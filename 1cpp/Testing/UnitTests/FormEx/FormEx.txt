Перем                    
		_Сервис,
		_РасширениеФормы,
		_ТаблицаПечатнойФормы,
		_ТаблицаПечатнойФормы2,
		_НомерДопГлобальника,
		_СписокГлобальников
		;
		
Функция Конт(Конт) Возврат Конт; КонецФункции // : Контекст
Функция Сам() Возврат Конт(Контекст); КонецФункции // : Контекст
Функция База() Возврат Конт(Контекст).ПолучитьБазовыйКласс(); КонецФункции  // : ТестовыйСлучайФормы

Процедура Сброс() Экспорт
	Если ТипЗначенияСтр(_ТаблицаПечатнойФормы) = "Таблица" Тогда
		_ТаблицаПечатнойФормы.Показать(,, -1);
	КонецЕсли;
	Если ТипЗначенияСтр(_ТаблицаПечатнойФормы2) = "Таблица" Тогда
		_ТаблицаПечатнойФормы2.Показать(,, -1);
	КонецЕсли;
	Если _НомерДопГлобальника <> 0 Тогда
		_Сервис.УдалитьГлобальныйМодуль(_НомерДопГлобальника);
	КонецЕсли;

	_Сервис.ВключитьРаскраскуТаблиц(0);
	
	База().Сброс(); // обязательно !!
КонецПроцедуры
                                    
Функция ОткрытьТестовуюФорму(ВидФормы)   
	Перем Конт;
	Возврат Сам().ОткрытьФорму(ВидФормы, Конт);
КонецФункции

// -------------------------------- -------------------------------------
Процедура Конструктор()                                   
	_Сервис	= СоздатьОбъект("Сервис");
	_РасширениеФормы = СоздатьОбъект("РасширениеФормы");
	
	_НомерДопГлобальника = 0;
КонецПроцедуры // Конструктор

Процедура ТестПолучитьФорму() Экспорт 
	Сам = Сам();
	//Сам.ПропуститьТест();
	
	//Сообщить(Сам.ИмяМетода+" ТестСервисПолучитьФорму");
	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx#");
	
	Форма = КонтФормы.Форма; //.Параметр;
	
	Сам.ПроверитьРавенство(ТипЗначенияСтр(Форма), "НеизвестныйОбъект");
	Сам.ПроверитьРавенство(Форма.АктивныйЭлемент(), "Реквизит");

	Сам.ПроверитьРавенство(Форма.Заголовок(), "");
КонецПроцедуры

//Процедура ТестАтрибутФормы1() Экспорт
//	Перем Конт;
//	ОткрытьТестовуюФорму(Конт);
//КонецПроцедуры

Процедура Тест_ПредупреждениеСТаймером() Экспорт
	ТекстПредупреждения = РазделительСтрок+
		"Ничего не нажимайте"+РазделительСтрок+РазделительСтрок+
		"Если более двух секунд видите это сообщение, значит, произошла ошибка !!";

	Время=_GetPerformanceCounter();
		Предупреждение("Первое из предупреждений для проверки таймера."+ТекстПредупреждения, 1);
	Сам().ПроверитьМеньшеИлиРавно(_GetPerformanceCounter()-Время, 2100);

	Время=_GetPerformanceCounter();
		Предупреждение("Последнее предупреждение для проверки таймера."+ТекстПредупреждения, 1);
	Сам().ПроверитьМеньшеИлиРавно(_GetPerformanceCounter()-Время, 2100);
	
КонецПроцедуры

Процедура ТестДобавлениеСтрокВТабличнуюЧастьЧерезКонтекстДокумента() Экспорт
	Сам = Сам();

	Сам.ОткрытьФорму("Документ.Новый1");
	Конт=Сам.КонтекстФормы;
	
	//Конт=0;
	//ОткрытьФорму("Документ.Новый1", Конт);

	Сам.ПроверитьРавенство(Конт.КоличествоСтрок(), 0);

	Конт.НоваяСтрока();
	Сам.ПроверитьРавенство(Конт.КоличествоСтрок(), 1);
	Конт.Новый1 = "1";
	Конт.НоваяСтрока();
	Сам.ПроверитьРавенство(Конт.КоличествоСтрок(), 2);
	Конт.Новый1 = "2";
	Конт.НоваяСтрока();
	Сам.ПроверитьРавенство(Конт.КоличествоСтрок(), 3);
	Конт.Новый1 = "3";
	
	Конт.ПолучитьСтрокуПоНомеру(1);
	Сам.ПроверитьРавенство(СокрЛП(Конт.Новый1), "1");
	Конт.ПолучитьСтрокуПоНомеру(2);
	Сам.ПроверитьРавенство(СокрЛП(Конт.Новый1), "2");
	Конт.ПолучитьСтрокуПоНомеру(3);
	Сам.ПроверитьРавенство(СокрЛП(Конт.Новый1), "3");
	
//Сообщить("Конт.КоличествоСтрок() = <"+Конт.КоличествоСтрок()+">");
	
КонецПроцедуры

Процедура Тест_СервисВыполнитьПроцедуру_НеверныеПараметры() Экспорт 
	Сам = Сам();
	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx#", Журнал);

	фРез = _Сервис.ВыполнитьПроцедуру(, "ПроцедураВыполнить");
	Сам().ПроверитьРавенство(фРез, 0);

	фРез = _Сервис.ВыполнитьПроцедуру(КонтФормы, );
	Сам().ПроверитьРавенство(фРез, 0);
	
КонецПроцедуры

Процедура Тест_СервисВыполнитьФункцию_НеверныеПараметры() Экспорт 
	Сам = Сам();
	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx#", Журнал);

	фРез = _Сервис.ВыполнитьФункцию(, "ФункцияВыполнить", ,0);
	Сам().ПроверитьРавенство(фРез, 0);

	фРез = _Сервис.ВыполнитьФункцию(КонтФормы, , ,0);
	Сам().ПроверитьРавенство(фРез, 0);

	фРез = _Сервис.ВыполнитьФункцию(КонтФормы, "ФункцияВыполнить", ,);
	Сам().ПроверитьРавенство(фРез, 1);
	
КонецПроцедуры

Функция Проверить_ВыполнитьПроцедуру(КонтФормы, ИмяМетода, Журнал, фСуществуетМетод, СписокАргументов = 0)
	Сам().ПроверитьРавенство(Журнал.стрЖурнал, "Форма::ПослеОткрытия");
	
	Если СписокАргументов = 0 Тогда
		фРез = _Сервис.ВыполнитьПроцедуру(КонтФормы, ИмяМетода);
	Иначе
		фРез = _Сервис.ВыполнитьПроцедуру(КонтФормы, ИмяМетода, СписокАргументов);
	КонецЕсли;
	Сам().ПроверитьРавенство(фРез, фСуществуетМетод);
	Если фСуществуетМетод = 1 Тогда
		Если СписокАргументов = 0 Тогда
			Сам().ПроверитьРавенство(Журнал.стрЖурнал, "Форма::ПослеОткрытия, Форма::"+ИмяМетода);
		КонецЕсли;
	Иначе
		Сам().ПроверитьРавенство(Журнал.стрЖурнал, "Форма::ПослеОткрытия");
	КонецЕсли;
	
	Возврат Журнал;
КонецФункции

Функция Проверить_ВыполнитьФункцию(КонтФормы, ИмяМетода, Журнал, фСуществуетМетод, СписокАргументов = 0)
	Сам().ПроверитьРавенство(Журнал.стрЖурнал, "Форма::ПослеОткрытия");
	
	ВозвращаемоеЗначение = -123;
	Если СписокАргументов = 0 Тогда
		фРез = _Сервис.ВыполнитьФункцию(КонтФормы, ИмяМетода, , ВозвращаемоеЗначение);
	Иначе
		фРез = _Сервис.ВыполнитьФункцию(КонтФормы, ИмяМетода, СписокАргументов, ВозвращаемоеЗначение);
	КонецЕсли;
	Сам().ПроверитьРавенство(фРез, фСуществуетМетод);
	Если фСуществуетМетод = 1 Тогда
		Если СписокАргументов = 0 Тогда
			Сам().ПроверитьРавенство(Журнал.стрЖурнал, "Форма::ПослеОткрытия, Форма::"+ИмяМетода);
		КонецЕсли;
		Сам().ПроверитьРавенство(ВозвращаемоеЗначение, ИмяМетода);
	Иначе
		Сам().ПроверитьРавенство(Журнал.стрЖурнал, "Форма::ПослеОткрытия");
		Сам().ПроверитьРавенство(ВозвращаемоеЗначение, -123);
	КонецЕсли;

	Возврат Журнал;
КонецФункции

Процедура Тест_СервисВыполнитьПроцедуру_ФормаВстроеннойОбработки() Экспорт 
	Сам = Сам();
	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx#", Журнал);
	
	Проверить_ВыполнитьПроцедуру(КонтФормы, "ПроцедураВыполнить_НеСуществует", Журнал, 0);
	Проверить_ВыполнитьПроцедуру(КонтФормы, "ПроцедураВыполнить", Журнал, 1);
КонецПроцедуры

Процедура Тест_СервисВыполнитьФункциюВместоПроцедуры_ФормаВстроеннойОбработки() Экспорт 
	Сам = Сам();
	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx#", Журнал);
	
	Проверить_ВыполнитьПроцедуру(КонтФормы, "ФункцияВыполнить", Журнал, 1);
КонецПроцедуры

Процедура Тест_СервисВыполнитьПроцедуруВместоФункции_ФормаВстроеннойОбработки() Экспорт 
	Сам = Сам();
	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx#", Журнал);
	
	Проверить_ВыполнитьФункцию(КонтФормы, "ПроцедураВыполнить", Журнал, 0);
КонецПроцедуры

Процедура Тест_СервисВыполнитьПроцедуруСНесколькимиПараметрами_ФормаВстроеннойОбработки() Экспорт 
	Сам = Сам();
	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx#", Журнал);

	СписокАргументов = СоздатьОбъект("СписокЗначений");
	СписокАргументов.ДобавитьЗначение(1);
	СписокАргументов.ДобавитьЗначение(2);
	Проверить_ВыполнитьПроцедуру(КонтФормы, "ПроцедураСНесколькимиПараметрамиВыполнить", Журнал, 1, СписокАргументов);

	Сам().ПроверитьРавенство(Журнал.стрЖурнал, "Форма::ПослеОткрытия, Форма::ПроцедураСНесколькимиПараметрамиВыполнить(1,2)");
КонецПроцедуры

Процедура Тест_СервисВыполнитьПроцедуруСНесколькимиПараметрами_ФормаВстроеннойОбработки_2ПараметрПоУмолчанию() Экспорт 
	Сам = Сам();
	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx#", Журнал);

	СписокАргументов = СоздатьОбъект("СписокЗначений");
	СписокАргументов.ДобавитьЗначение(1);
	Проверить_ВыполнитьПроцедуру(КонтФормы, "ПроцедураСНесколькимиПараметрамиВыполнить", Журнал, 1, СписокАргументов);

	Сам().ПроверитьРавенство(Журнал.стрЖурнал, "Форма::ПослеОткрытия, Форма::ПроцедураСНесколькимиПараметрамиВыполнить(1,Парам2)");
КонецПроцедуры

Процедура Тест_СервисВыполнитьФункцию_ФормаВстроеннойОбработки() Экспорт 
	Сам = Сам();
	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx#", Журнал);
	
	Проверить_ВыполнитьФункцию(КонтФормы, "ФункцияВыполнить_НеСуществует", Журнал, 0);
	Проверить_ВыполнитьФункцию(КонтФормы, "ФункцияВыполнить", Журнал, 1);
КонецПроцедуры

Процедура Тест_СервисВыполнитьФункциюСНесколькимиПараметрами_ФормаВстроеннойОбработки() Экспорт 
	Сам = Сам();
	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx#", Журнал);

	СписокАргументов = СоздатьОбъект("СписокЗначений");
	СписокАргументов.ДобавитьЗначение(1);
	СписокАргументов.ДобавитьЗначение(2);
	Проверить_ВыполнитьФункцию(КонтФормы, "ФункцияСНесколькимиПараметрамиВыполнить", Журнал, 1, СписокАргументов);

	Сам().ПроверитьРавенство(Журнал.стрЖурнал, "Форма::ПослеОткрытия, Форма::ФункцияСНесколькимиПараметрамиВыполнить(1,2)");
КонецПроцедуры

Процедура Тест_СервисВыполнитьФункциюСНесколькимиПараметрами_ФормаВстроеннойОбработки_2ПараметрПоУмолчанию() Экспорт 
	Сам = Сам();
	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx#", Журнал);

	СписокАргументов = СоздатьОбъект("СписокЗначений");
	СписокАргументов.ДобавитьЗначение(1);
	Проверить_ВыполнитьФункцию(КонтФормы, "ФункцияСНесколькимиПараметрамиВыполнить", Журнал, 1, СписокАргументов);

	Сам().ПроверитьРавенство(Журнал.стрЖурнал, "Форма::ПослеОткрытия, Форма::ФункцияСНесколькимиПараметрамиВыполнить(1,Парам2)");
КонецПроцедуры

Процедура Тест_СервисВыполнитьПроцедуру_ФормаДокумента() Экспорт 
	Сам = Сам();
	//Сам.ПропуститьТест();
	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Документ.Новый1", Журнал);

	Проверить_ВыполнитьПроцедуру(КонтФормы, "ПроцедураВыполнить_НеСуществует", Журнал, 0);
	Проверить_ВыполнитьПроцедуру(КонтФормы, "ПроцедураВыполнить", Журнал, 1);
КонецПроцедуры

Процедура Тест_СервисВыполнитьФункцию_ФормаДокумента() Экспорт 
	Сам = Сам();
	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Документ.Новый1", Журнал);

	Проверить_ВыполнитьФункцию(КонтФормы, "ФункцияВыполнить_НеСуществует", Журнал, 0);
	Проверить_ВыполнитьФункцию(КонтФормы, "ФункцияВыполнить", Журнал, 1);
КонецПроцедуры

Процедура Тест_СервисВыполнитьФункциюВместоПроцедуры_ФормаДокумента() Экспорт 
	Сам = Сам();
	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx#", Журнал);
	
	Проверить_ВыполнитьПроцедуру(КонтФормы, "ФункцияВыполнить", Журнал, 1);
КонецПроцедуры

Процедура Тест_СервисВыполнитьПроцедуруВместоФункции_ФормаДокумента() Экспорт 
	Сам = Сам();
	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx#", Журнал);
	
	Проверить_ВыполнитьФункцию(КонтФормы, "ПроцедураВыполнить", Журнал, 0);
КонецПроцедуры

Процедура Тест_СервисВыполнитьПроцедуруСНесколькимиПараметрами_ФормаДокумента() Экспорт 
	Сам = Сам();
	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Документ.Новый1", Журнал);

	СписокАргументов = СоздатьОбъект("СписокЗначений");
	СписокАргументов.ДобавитьЗначение(1);
	СписокАргументов.ДобавитьЗначение(2);
	Проверить_ВыполнитьПроцедуру(КонтФормы, "ПроцедураСНесколькимиПараметрамиВыполнить", Журнал, 1, СписокАргументов);

	Сам().ПроверитьРавенство(Журнал.стрЖурнал, "Форма::ПослеОткрытия, Форма::ПроцедураСНесколькимиПараметрамиВыполнить(1,2)");
КонецПроцедуры

Процедура Тест_СервисВыполнитьПроцедуруСНесколькимиПараметрами_ФормаДокумента_2ПараметрПоУмолчанию() Экспорт 
	Сам = Сам();
	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Документ.Новый1", Журнал);

	СписокАргументов = СоздатьОбъект("СписокЗначений");
	СписокАргументов.ДобавитьЗначение(1);
	Проверить_ВыполнитьПроцедуру(КонтФормы, "ПроцедураСНесколькимиПараметрамиВыполнить", Журнал, 1, СписокАргументов);

	Сам().ПроверитьРавенство(Журнал.стрЖурнал, "Форма::ПослеОткрытия, Форма::ПроцедураСНесколькимиПараметрамиВыполнить(1,Парам2)");
КонецПроцедуры

Процедура Тест_СервисВыполнитьФункциюСНесколькимиПараметрами_ФормаДокумента() Экспорт 
	Сам = Сам();
	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Документ.Новый1", Журнал);

	СписокАргументов = СоздатьОбъект("СписокЗначений");
	СписокАргументов.ДобавитьЗначение(1);
	СписокАргументов.ДобавитьЗначение(2);
	Проверить_ВыполнитьФункцию(КонтФормы, "ФункцияСНесколькимиПараметрамиВыполнить", Журнал, 1, СписокАргументов);

	Сам().ПроверитьРавенство(Журнал.стрЖурнал, "Форма::ПослеОткрытия, Форма::ФункцияСНесколькимиПараметрамиВыполнить(1,2)");
КонецПроцедуры

Процедура Тест_СервисВыполнитьФункциюСНесколькимиПараметрами_ФормаДокумента_2ПараметрПоУмолчанию() Экспорт 
	Сам = Сам();
	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Документ.Новый1", Журнал);

	СписокАргументов = СоздатьОбъект("СписокЗначений");
	СписокАргументов.ДобавитьЗначение(1);
	Проверить_ВыполнитьФункцию(КонтФормы, "ФункцияСНесколькимиПараметрамиВыполнить", Журнал, 1, СписокАргументов);

	Сам().ПроверитьРавенство(Журнал.стрЖурнал, "Форма::ПослеОткрытия, Форма::ФункцияСНесколькимиПараметрамиВыполнить(1,Парам2)");
КонецПроцедуры
                             
Процедура Проверить_Сервис_ПолучитьПеременнуюКонтекста(ВидФормы)
	Сам = Сам();

	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	КонтФормы = Сам.ОткрытьФорму(ВидФормы, Журнал);

	Значение = -1245;
	Сам().ПроверитьИсключение(_Сервис, "ПолучитьПеременнуюКонтекста", "гЖурнал", Значение);
	Сам().ПроверитьИсключение(_Сервис, "ПолучитьПеременнуюКонтекста", 0, "гЖурнал", Значение, Значение);

	Значение = -1245;
	фРезультат = _Сервис.ПолучитьПеременнуюКонтекста(0, "", Значение);
	Сам().ПроверитьРавенство(фРезультат, 0);
	Сам().ПроверитьРавенство(Значение, -1245);
	
	Значение = -1245;
	фРезультат = _Сервис.ПолучитьПеременнуюКонтекста(КонтФормы, "НесуществующаяПеременная", Значение);
	Сам().ПроверитьРавенство(фРезультат, 0);
	Сам().ПроверитьРавенство(Значение, -1245);
	
	Значение = -1245;
	фРезультат = _Сервис.ПолучитьПеременнуюКонтекста(КонтФормы, "гЖурнал", Значение);
	Сам().ПроверитьРавенство(фРезультат, 1);
	Сам().ПроверитьРавенство(ТипЗначенияСтр(Значение), "ЖурналВызоваМетодов");
КонецПроцедуры

Процедура Тест_Сервис_ПолучитьПеременнуюКонтекста_ФормаВстроеннойОбработки() Экспорт 
	Проверить_Сервис_ПолучитьПеременнуюКонтекста("Обработка.ТестоваяДляFormEx#");
КонецПроцедуры

Процедура Тест_Сервис_ПолучитьПеременнуюКонтекста_ФормаДокумента() Экспорт 
	Проверить_Сервис_ПолучитьПеременнуюКонтекста("Документ.Новый1");
КонецПроцедуры
                             
Процедура Проверить_Сервис_УстановитьПеременнуюКонтекста(ВидФормы)
	Сам = Сам();

	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	КонтФормы = Сам.ОткрытьФорму(ВидФормы, Журнал);

	Значение = -1245;
	Сам().ПроверитьИсключение(_Сервис, "УстановитьПеременнуюКонтекста", "гЖурнал", Значение);
	Сам().ПроверитьИсключение(_Сервис, "УстановитьПеременнуюКонтекста", 0, "гЖурнал", Значение, Значение);

	Значение = -1245;
	фРезультат = _Сервис.УстановитьПеременнуюКонтекста(0, "", Значение);
	Сам().ПроверитьРавенство(фРезультат, 0);
	Сам().ПроверитьРавенство(Значение, -1245);
	
	Значение = -1245;
	фРезультат = _Сервис.УстановитьПеременнуюКонтекста(КонтФормы, "НесуществующаяПеременная", Значение);
	Сам().ПроверитьРавенство(фРезультат, 0);
	Сам().ПроверитьРавенство(Значение, -1245);
	
	Значение = "НовоеЗначение";
	фРезультат = _Сервис.УстановитьПеременнуюКонтекста(КонтФормы, "гЖурнал", Значение);
	Сам().ПроверитьРавенство(фРезультат, 1);
	Сам().ПроверитьРавенство(Значение, "НовоеЗначение");

	Значение = -1234;
	фРезультат = _Сервис.ПолучитьПеременнуюКонтекста(КонтФормы, "гЖурнал", Значение);
	Сам().ПроверитьРавенство(фРезультат, 1);
	Сам().ПроверитьРавенство(Значение, "НовоеЗначение");
КонецПроцедуры

Процедура Тест_Сервис_УстановитьПеременнуюКонтекста_ФормаВстроеннойОбработки() Экспорт 
	Проверить_Сервис_УстановитьПеременнуюКонтекста("Обработка.ТестоваяДляFormEx#");
КонецПроцедуры

Процедура Тест_Сервис_УстановитьПеременнуюКонтекста_ФормаДокумента() Экспорт 
	Проверить_Сервис_УстановитьПеременнуюКонтекста("Документ.Новый1");
КонецПроцедуры
            
Функция ПроверитьТипАктивногоКонтекста(ТипКонтекста)
	АктивныйКонтекст = 0;
	фРезультат = _Сервис.АктивныйКонтекст(АктивныйКонтекст);
	Сам().ПроверитьРавенство(фРезультат, 1);
	Сам().ПроверитьРавенство(ТипЗначенияСтр(АктивныйКонтекст), ТипКонтекста);
	
	Возврат АктивныйКонтекст;
КонецФункции

Функция ПроверитьАктивныйКонтекст(ВидФормы)
	Сам = Сам();
	КонтФормы = Сам.ОткрытьФорму(ВидФормы);

	АктивныйКонтекст = ПроверитьТипАктивногоКонтекста("ГрупповойКонтекст");
	
	_РасширениеФормы.УстановитьФорму(АктивныйКонтекст.Форма);
	фТипОбъекта = _РасширениеФормы.ПолныйТипОбъекта();
	Сам().ПроверитьРавенство(фТипОбъекта, ВидФормы+".Форма");
КонецФункции

Процедура Тест_Сервис_АктивныйКонтекст_ФормаВстроеннойОбработки() Экспорт
	ПроверитьАктивныйКонтекст("Обработка.ТестоваяДляFormEx");
КонецПроцедуры

Процедура Тест_Сервис_АктивныйКонтекст_ФормаДокумента() Экспорт
	ПроверитьАктивныйКонтекст("Документ.Новый1");
КонецПроцедуры

Процедура Тест_Сервис_АктивныйКонтекст_ФормаТестирования() Экспорт
	// ничего не открываем, должны найти открытую форму тестирования
	АктивныйКонтекст = ПроверитьТипАктивногоКонтекста("ГрупповойКонтекст");

	_РасширениеФормы.УстановитьФорму(АктивныйКонтекст.Форма);
	фТипОбъекта = _РасширениеФормы.ПолныйТипОбъекта();
	Сам().ПроверитьРавенство(фТипОбъекта, "ВнешнийОтчет");
	                                                      
	Путь = ""; Имя = "";
	ПолныйПутьКФайлу = АктивныйКонтекст.РасположениеФайла(Путь, Имя);
	Сам().ПроверитьРавенство(Имя, "ЗапускЮнитТестов.ert");
КонецПроцедуры

Процедура Тест_Сервис_АктивныйКонтекст_Таблица() Экспорт
	_ТаблицаПечатнойФормы = СоздатьОбъект("Таблица");
	_ТаблицаПечатнойФормы.ИсходнаяТаблица("ОбщаяТаблица");
	_ТаблицаПечатнойФормы.Показать("Таблица", , 1);
	
	ПроверитьТипАктивногоКонтекста("Таблица");
КонецПроцедуры

Процедура Тест_Сервис_КоманднаяСтрока() Экспорт
// ENTERPRISE /M /D"G:\1C++\Testing 1C++\" /N /U"G:\1C++\Testing 1C++\" /T"g:\" /Lrus  /Обработка:ЗагрузчикЮнитТестов /Команда:Тестировать /Close 

	Сам = Сам();
	КоманднаяСтрока = _Сервис.КоманднаяСтрока();
	
	Сам().ПроверитьНеравенство(КоманднаяСтрока, "");
КонецПроцедуры

Процедура Тест_Сервис_КоманднаяСтрока1() Экспорт

	Сам = Сам();
	ОбАнализаКоманднойСтроки = СоздатьОбъект("Общие.АнализКоманднойСтроки1С");

	КоманднаяСтрока = _Сервис.КоманднаяСтрока();
	ОбАнализаКоманднойСтроки.РазобратьКоманднуюСтроку(КоманднаяСтрока);
	
	Параметр = ОбАнализаКоманднойСтроки.ПолучитьПараметр( "/D" );
	
	Сам().ПроверитьНеравенство(Параметр, "");
КонецПроцедуры

Процедура Тест_Сервис_КоманднаяСтрокаКоличествоПараметров() Экспорт

	Сам = Сам();
	ОбАнализаКоманднойСтроки = СоздатьОбъект("Общие.АнализКоманднойСтроки1С");

	КоманднаяСтрока = _Сервис.КоманднаяСтрока();
	ОбАнализаКоманднойСтроки.РазобратьКоманднуюСтроку(КоманднаяСтрока);

	КолПараметров = ОбАнализаКоманднойСтроки.ПолучитьКоличествоПараметров();
	Сам.ПроверитьБольшеИлиРавно(КолПараметров, 1);
КонецПроцедуры

Процедура Тест_ВерсияОС() Экспорт
	Сам = Сам();
	                                  
	лВерсияОС = _Сервис.ВерсияОС();

	Сам.ПроверитьТипЗначения(лВерсияОС, "Строка");
	Сам.ПроверитьРавенство(Лев(лВерсияОС, 2), "NT");
	Сам.ПроверитьБольше(Найти(лВерсияОС, "Build"), 1);
	
КонецПроцедуры

Процедура Тест_ПолучитьИменаТаблицы() Экспорт
	Сам = Сам();

   	Журнал=СоздатьОбъект("ЖурналВызоваМетодов");

   	ПутьКФорме = КаталогИБ()+"ExtForms\UnitTests\СобытияFormEx.ert"; 	
	Сам().ОткрытьФорму("Отчет", Журнал, ПутьКФорме);
	_ТаблицаПечатнойФормы = Сам.КонтекстФормы.ПолучитьПечатнуюТаблицуСИменами();

	ТабИменаПечТаблицы = _Сервис.ПолучитьИменаТаблицы(_ТаблицаПечатнойФормы); // : ТаблицаЗначений
	// ТабИменаПечТаблицы // : ТаблицаЗначений

	Сам.ПроверитьТипЗначения(ТабИменаПечТаблицы, "ТаблицаЗначений");
	Сам.ПроверитьРавенство(ТабИменаПечТаблицы.КоличествоКолонок(), 6);

	Сам.ПроверитьРавенство(ТабИменаПечТаблицы.ПолучитьПараметрыКолонки(1), "Адрес");
	Сам.ПроверитьРавенство(ТабИменаПечТаблицы.ПолучитьПараметрыКолонки(2), "Идентификатор");
	Сам.ПроверитьРавенство(ТабИменаПечТаблицы.ПолучитьПараметрыКолонки(3), "Лево");
	Сам.ПроверитьРавенство(ТабИменаПечТаблицы.ПолучитьПараметрыКолонки(4), "Верх");
	Сам.ПроверитьРавенство(ТабИменаПечТаблицы.ПолучитьПараметрыКолонки(5), "Право");
	Сам.ПроверитьРавенство(ТабИменаПечТаблицы.ПолучитьПараметрыКолонки(6), "Низ");

	Сам.ПроверитьРавенство(ТабИменаПечТаблицы.КоличествоСтрок(), 2);
	                       
	ТабИменаПечТаблицы.ПолучитьСтрокуПоНомеру(2);
	Сам.ПроверитьРавенство(ТабИменаПечТаблицы.Адрес, "R1C1:R1C1");
	Сам.ПроверитьРавенство(ТабИменаПечТаблицы.Идентификатор, "ПерваяОбласть");
КонецПроцедуры

Процедура Тест_СписокТаблиц() Экспорт
	Сам = Сам();
                           
	лСписокТаблиц = _Сервис.СписокТаблиц();
	Сам.ПроверитьТипЗначения(лСписокТаблиц, "СписокЗначений");
	Сам.ПроверитьРавенство(лСписокТаблиц.РазмерСписка(), 0);

	Журнал=СоздатьОбъект("ЖурналВызоваМетодов");

   	ПутьКФорме = КаталогИБ()+"ExtForms\UnitTests\СобытияFormEx.ert"; 	
	Сам().ОткрытьФорму("Отчет", Журнал, ПутьКФорме);
	_ТаблицаПечатнойФормы = Сам.КонтекстФормы.ПолучитьПечатнуюТаблицуСИменами();

	_ТаблицаПечатнойФормы.Показать("ТаблицаДляТеста_СписокТаблиц");
	                
	лСписокТаблиц = _Сервис.СписокТаблиц();
	Сам.ПроверитьТипЗначения(лСписокТаблиц, "СписокЗначений");
	Сам.ПроверитьРавенство(лСписокТаблиц.РазмерСписка(), 1);
	
	лПредставление = 0;
	лТаблица = лСписокТаблиц.ПолучитьЗначение(1, лПредставление);
	Сам.ПроверитьТипЗначения(лТаблица, "Таблица");
	Сам.ПроверитьРавенство(лПредставление, "ТаблицаДляТеста_СписокТаблиц  *");
КонецПроцедуры

Процедура Тест_СписокТаблиц_ДвеТаблицы() Экспорт
	Сам = Сам();
                           
	лСписокТаблиц = _Сервис.СписокТаблиц();
	Сам.ПроверитьТипЗначения(лСписокТаблиц, "СписокЗначений");
	Сам.ПроверитьРавенство(лСписокТаблиц.РазмерСписка(), 0);

	Журнал=СоздатьОбъект("ЖурналВызоваМетодов");

   	ПутьКФорме = КаталогИБ()+"ExtForms\UnitTests\СобытияFormEx.ert"; 	
	Сам().ОткрытьФорму("Отчет", Журнал, ПутьКФорме);
	_ТаблицаПечатнойФормы = Сам.КонтекстФормы.ПолучитьПечатнуюТаблицуСИменами();

	_ТаблицаПечатнойФормы.Показать("ТаблицаДляТеста_СписокТаблиц");

	Журнал=СоздатьОбъект("ЖурналВызоваМетодов");

   	ПутьКФорме = КаталогИБ()+"ExtForms\UnitTests\СобытияFormEx.ert"; 	
   	НовыйДелегатФормы = СоздатьОбъект("ДелегатФормы");
	НовыйДелегатФормы.ОткрытьФорму("Отчет", Журнал, ПутьКФорме);
	_ТаблицаПечатнойФормы2 = Сам.КонтекстФормы.ПолучитьПечатнуюТаблицуСИменами();

	_ТаблицаПечатнойФормы2.Показать("ТаблицаДляТеста_СписокТаблиц2");
	                
	лСписокТаблиц = _Сервис.СписокТаблиц();
	Сам.ПроверитьТипЗначения(лСписокТаблиц, "СписокЗначений");
	Сам.ПроверитьРавенство(лСписокТаблиц.РазмерСписка(), 2);
	
	лПредставление = 0;
	лТаблица = лСписокТаблиц.ПолучитьЗначение(1, лПредставление);
	Сам.ПроверитьТипЗначения(лТаблица, "Таблица");
	Сам.ПроверитьРавенство(лПредставление, "ТаблицаДляТеста_СписокТаблиц  *");
	
	лПредставление = 0;
	лТаблица = лСписокТаблиц.ПолучитьЗначение(2, лПредставление);
	Сам.ПроверитьТипЗначения(лТаблица, "Таблица");
	Сам.ПроверитьРавенство(лПредставление, "ТаблицаДляТеста_СписокТаблиц2  *");

КонецПроцедуры

Процедура Тест_ДобавитьУдалитьГлобальныйМодуль() Экспорт
	Сам = Сам();

	ТекстМодуля = "
		|Перем ТестовоеЗначение Экспорт;
		|Функция Тест_ВернутьЧисло(Значение = 4) Экспорт
		|	Возврат Значение;
		|КонецФункции
		|ТестовоеЗначение = 1";

	_НомерДопГлобальника = _Сервис.ДобавитьГлобальныйМодуль(ТекстМодуля);
	Сам().ПроверитьНеравенство(_НомерДопГлобальника, 0);
                      
	ТекстМодуля = "
		|Функция ПолучитьЗначениеИзФункции(Значение)
		|  Возврат Тест_ВернутьЧисло(Значение);
		|КонецФункции
		|
		|Функция ПолучитьЗначениеПоУмолчаниюИзФункции()
		|  Возврат Тест_ВернутьЧисло();
		|КонецФункции
		|
		|Функция УстановитьЗначениеПеременной(Значение)
		|  ТестовоеЗначение = Значение;
		|	Возврат ТестовоеЗначение;
		|КонецФункции
		|
		|Функция ПолучитьЗначениеИзПеременной()
		|  Возврат ТестовоеЗначение;
		|КонецФункции
		|";
	ВМ = СоздатьОбъект("ВыполняемыйМодуль");
	ВМ.УстановитьМодуль(ТекстМодуля);
	ВМ.КомпилироватьИВыполнитьМодуль();

	Сам.ПроверитьРавенство(ВМ.ПолучитьЗначениеИзПеременной(), 1);
	Сам.ПроверитьРавенство(ВМ.УстановитьЗначениеПеременной(2), 2);
	Сам.ПроверитьРавенство(ВМ.ПолучитьЗначениеИзФункции(3), 3);
	Сам.ПроверитьРавенство(ВМ.ПолучитьЗначениеПоУмолчаниюИзФункции(), 4);
	
	фРезУдаленияДопГлобальника = _Сервис.УдалитьГлобальныйМодуль(_НомерДопГлобальника);
	Сам.ПроверитьРавенство(фРезУдаленияДопГлобальника, 1);
	лСохраненный_НомерДопГлобальника = _НомерДопГлобальника;
	_НомерДопГлобальника = 0;

	ВМ = СоздатьОбъект("ВыполняемыйМодуль");
	ВМ.УстановитьМодуль(ТекстМодуля);
	Сам.ПроверитьИсключение(ВМ, "КомпилироватьИВыполнитьМодуль");

	фРезУдаленияДопГлобальника = _Сервис.УдалитьГлобальныйМодуль(лСохраненный_НомерДопГлобальника);
	Сам.ПроверитьРавенство(фРезУдаленияДопГлобальника, 0);

	Сам.ПроверитьИсключение(ВМ, "КомпилироватьИВыполнитьМодуль");
КонецПроцедуры

Процедура Тест_УдалитьСреднийГлобальныйМодуль() Экспорт
	Сам = Сам();
	Сам().ПропуститьТест(1, "Данный тест ПАДАЕТ, а как исправлять баг, непонятно :(");

	СписокГлобальников = СоздатьОбъект("СписокЗначений");
	                         
	лИндексУдаляемогоГлобальника = 2;
	лНомерУдаляемогоГлобальника = -1;
	Для к=1 По 3 Цикл
		ТекстМодуля = "
			|Перем ТестовоеЗначение"+к+" Экспорт;
			|Функция Тест_ВернутьЧисло"+к+"(Значение = 4) Экспорт
			|	Возврат Значение;
			|КонецФункции
			|ТестовоеЗначение"+к+" = 1";
	
		НомерДопГлобальника = _Сервис.ДобавитьГлобальныйМодуль(ТекстМодуля);
		Сам().ПроверитьНеравенство(НомерДопГлобальника, 0);
		
		СписокГлобальников.ДобавитьЗначение(НомерДопГлобальника);
		
		Если к = лИндексУдаляемогоГлобальника Тогда
			лНомерУдаляемогоГлобальника = НомерДопГлобальника;
		КонецЕсли;
	КонецЦикла;
    
	// удаляю средний глобальник и пытаюсь обратиться к тому, кто идет после него
	фРезУдаленияДопГлобальника = _Сервис.УдалитьГлобальныйМодуль(лНомерУдаляемогоГлобальника);
	Сам.ПроверитьРавенство(фРезУдаленияДопГлобальника, 1);
	СписокГлобальников.УдалитьЗначение(лИндексУдаляемогоГлобальника);

	фРезУдаленияДопГлобальника = _Сервис.УдалитьГлобальныйМодуль(лНомерУдаляемогоГлобальника+1);
	Сам.ПроверитьРавенство(фРезУдаленияДопГлобальника, 1);

	// уточняю, что будет следующим номером после удаления среднего глобальника
	_НомерДопГлобальника = _Сервис.ДобавитьГлобальныйМодуль(ТекстМодуля);
	Сам().ПроверитьРавенство(_НомерДопГлобальника, 3);
                      
КонецПроцедуры

Процедура Тест_ПолучитьСписокПринтеров() Экспорт
	Сам = Сам();

	лСписокПринтеровИзСистемы = СоздатьОбъект("СписокЗначений");
	
	wshNetwork=createObject("WScript.Network");
	oPrinters=wshNetwork.EnumPrinterConnections();
	i=0;
	Пока i<oPrinters.count()-1 Цикл
		//Сообщить("Порт "+oPrinters.item(i)+" = "+oPrinters.item(i+1));
		лСписокПринтеровИзСистемы.ДобавитьЗначение(oPrinters.item(i+1));
		i=i+2;
	КонецЦикла;

	лСписокПринтеров = _Сервис.ПолучитьСписокПринтеров();
	Сам.ПроверитьТипЗначения(лСписокПринтеров, "СписокЗначений");
	Сам.ПроверитьБольше(лСписокПринтеров.РазмерСписка(), 0);
	Для к=1 По лСписокПринтеров.РазмерСписка() Цикл
		Сам.ПроверитьБольше(лСписокПринтеровИзСистемы.НайтиЗначение(лСписокПринтеров.ПолучитьЗначение(к)), 0);
	КонецЦикла;
КонецПроцедуры

Процедура Тест_ЭмулироватьКлавиатуру() Экспорт
	// ничего не делаем, т.к. метод активно юзается в тестах событий ФормЕкс 
	// соответственно, там и проверяется его работа
	// TODO нужно протестить 3-параметр - значение раскладки!
КонецПроцедуры

Процедура Тест_ЭмулироватьКлавиатуруБезОжиданияОбработки() Экспорт
	// нужно протестить 2-й параметр со значением 0 (не останавливать выполнение) и 3-параметр
	Сам = Сам();
	Сам.ПропуститьТест(, "Данный тест не реализован, т.к. непонятно, как выполнить тест без прерывания работы системы тестирования");
КонецПроцедуры

Процедура Тест_ПолучитьGUID() Экспорт
	Сам = Сам();

	ГУИД = _Сервис.ПолучитьGUID();
	
	Сам.ПроверитьТипЗначения(ГУИД, "Строка");
	Сам.ПроверитьРавенство(СтрДлина(ГУИД), 36+2); // две фигурные скобки
	Сам.ПроверитьРавенство(Лев(ГУИД,1), "{");
	Сам.ПроверитьРавенство(Прав(ГУИД,1), "}");
	Сам.ПроверитьРавенство(Сред(ГУИД,10,1), "-");
КонецПроцедуры

Процедура Тест_Версия() Экспорт
	Сам = Сам();

	стрВерсия = ""; // 2.0.5.0
	чВерсия = _Сервис.Версия(стрВерсия); // 33555712

	стрВерсия2 = СтрЗаменить(стрВерсия, ".", ", ");
	МетаИнфо = СоздатьОбъект("MetaInfoClasses");
	Сам.ПроверитьРавенство(стрВерсия2, МетаИнфо.ПолучитьВерсиюФайла(КаталогПрограммы()+"formex.dll", "FileVersion"));

	Сам.ПроверитьТипЗначения(стрВерсия, "Строка");
	Сам.ПроверитьТипЗначения(чВерсия, "Число");
	               
	Сам.ПроверитьБольшеИлиРавно(СтрДлина(стрВерсия), 7);
	Сам.ПроверитьРавенство(Сред(стрВерсия, 2, 1), ".");
	Сам.ПроверитьРавенство(Сред(стрВерсия, 4, 1), ".");
             
	лПраваяЧасть = Прав(стрВерсия, 2);
	Если Лев(лПраваяЧасть, 1) = "." Тогда
		стрВерсия = СтрЗаменить(стрВерсия, ".", 0);
		math = СоздатьОбъект("Math");
		чВерсияИзСтроки = math.Long(стрВерсия, 16);
	Иначе // 2.0.5.77 - в конце две цифры
		// не проверяем !
		Возврат;
	КонецЕсли;

	Сам.ПроверитьРавенство(чВерсия, чВерсияИзСтроки);
КонецПроцедуры

Процедура Тест_СписокВсехФорм() Экспорт
	Сам = Сам();

	ОбъектТекст = _Сервис.СписокВсехФорм();
	// ОбъектТекст // : Текст 
	
	Сам.ПроверитьТипЗначения(ОбъектТекст, "Текст");
	Сам.ПроверитьБольше(ОбъектТекст.КоличествоСтрок(), 10);
	                                               
	фНашлиСпр = 0;
	фНашлиДок = 0;
	фНашлиОбр = 0;
	фНашлиОтч = 0;
	фНашлиОбщТаб = 0;
	Для к=1 По ОбъектТекст.КоличествоСтрок() Цикл
		стрТекСтрока = ОбъектТекст.ПолучитьСтроку(к);
		Если Найти(стрТекСтрока, "СПРАВОЧНИК.") > 0 Тогда
			фНашлиСпр = фНашлиСпр + 1;
		ИначеЕсли Найти(стрТекСтрока, "ДОКУМЕНТ.") > 0 Тогда
			фНашлиДок = фНашлиДок + 1;
		ИначеЕсли Найти(стрТекСтрока, "ОБРАБОТКА.") > 0 Тогда
			фНашлиОбр = фНашлиОбр + 1;
		ИначеЕсли Найти(стрТекСтрока, "ОТЧЕТ.") > 0 Тогда
			фНашлиОтч = фНашлиОтч + 1;
		ИначеЕсли Найти(стрТекСтрока, "ОБЩИЕ ТАБЛИЦЫ") > 0 Тогда
			фНашлиОбщТаб = фНашлиОбщТаб + 1;
		КонецЕсли;
	КонецЦикла;
	
	Сам.ПроверитьБольше(фНашлиСпр, 1);
	Сам.ПроверитьБольше(фНашлиДок, 1);
	Сам.ПроверитьБольше(фНашлиОбр, 1);
	Сам.ПроверитьБольше(фНашлиОтч, 1);
	Сам.ПроверитьРавенство(фНашлиОбщТаб, 1);
КонецПроцедуры

Процедура Тест_ПерехватКлавиатуры() Экспорт
	// основная проверка идет в тестах событий ФормЕкс 
	// здесь только простейшие проверки

	Сам = Сам();
	Сам.ПроверитьРавенство(_Сервис.ПерехватКлавиатуры(), 1);
	Сам.ПроверитьРавенство(_Сервис.ПерехватКлавиатуры(0), 1);
	Сам.ПроверитьРавенство(_Сервис.ПерехватКлавиатуры(1), 0);
КонецПроцедуры

Процедура Тест_ПерехватМыши() Экспорт
	// здесь только простейшие проверки
	// основные проверки непонятно, как выполнить

	Сам = Сам();
	Сам.ПроверитьРавенство(_Сервис.ПерехватМыши(), 1);
	Сам.ПроверитьРавенство(_Сервис.ПерехватМыши(0), 1);
	Сам.ПроверитьРавенство(_Сервис.ПерехватМыши(1), 0);
КонецПроцедуры

Процедура Тест_ПерехватМыши_ОсновнаяПроверка() Экспорт
	Сам().ПропуститьТест(, "Данный тест не реализован, т.к. непонятно, как выполнить тест и проверить мышиные события");
КонецПроцедуры

Процедура Тест_ВыбратьЗначение() Экспорт
	Сам().ПропуститьТест(, "Данный тест пока не реализован, т.к. непонятно, как выполнить тест автоматически, без участия пользователя");
	
	Список = СоздатьОбъект("СписокЗначений");
	Список.ДобавитьЗначение("Значение");
	Значение = 0;
	Если _Сервис.ВыбратьЗначение(Список, Значение, "Тест_ВыбратьЗначение", 0) = 1 Тогда
		Сообщить("Значение = <"+Значение+">");
	КонецЕсли;
КонецПроцедуры
