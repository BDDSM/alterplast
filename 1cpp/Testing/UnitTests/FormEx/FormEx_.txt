Перем 
		_Сервис,
		_РасширениеФормы;

Функция Конт(Конт) Возврат Конт; КонецФункции // : Контекст
Функция Сам() Возврат Конт(Контекст); КонецФункции // : Контекст
Функция База() Возврат Конт(Контекст).ПолучитьБазовыйКласс(); КонецФункции // : ТестовыйСлучайФормы

Процедура Сетап() Экспорт
	База().Сетап(); // обязательно !!
	_Сервис = СоздатьОбъект("Сервис"); 
	_РасширениеФормы = СоздатьОбъект("РасширениеФормы");
КонецПроцедуры

Процедура Сброс() Экспорт
	_Сервис.ВключитьРаскраскуТаблиц(0);
	База().Сброс(); // обязательно !!
КонецПроцедуры

Процедура Тест_УстановитьФорму_ВнешнийОтчет() Экспорт
	Сам = Сам();
	_Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка#", _Журнал, КаталогИБ()+"ExtForms\UnitTests\СобытияFormEx.ert");
	
	РасширениеФормы = СоздатьОбъект("РасширениеФормы");
	РасширениеФормы.УстановитьФорму(КонтФормы.Форма);
	лМаксимизирована = РасширениеФормы.Максимизирована;
	
	Сам.ПроверитьРавенство(ТипЗначенияСтр(КонтФормы), "ГрупповойКонтекст");

	Форма = РасширениеФормы.ПолучитьФорму();
	Сам.ПроверитьРавенство(ТипЗначения(Форма), 100);
	Сам.ПроверитьРавенство(ТипЗначенияСтр(Форма), "НеизвестныйОбъект");

	Сам.ПроверитьБольше(РасширениеФормы.КоличествоАтрибутов(), 0);
	//Сам.ПроверитьБольше(РасширениеФормы.Верх, 0);
	//Сам.ПроверитьБольше(РасширениеФормы.Лево, 0);
	
	Сам.ПроверитьРавенство(РасширениеФормы.ТипОбъекта(), "ВнешнийОтчет");
	Сам.ПроверитьРавенство(РасширениеФормы.ПолныйТипОбъекта(), "ВнешнийОтчет");
	Сам.ПроверитьРавенство(РасширениеФормы.ПолныйПуть(), "ВнешнийОтчет");

	РасширениеФормы = СоздатьОбъект("РасширениеФормы");
	Сам.ПроверитьИсключение(РасширениеФормы, "УстановитьФорму", КонтФормы); // объект-контекст, но не Форма
	Сам.ПроверитьИсключение(РасширениеФормы, "УстановитьФорму", 0);
	
КонецПроцедуры

Процедура Тест_ПолучитьФормуДляЗакрытойФормы() Экспорт
	Сам = Сам();
	
	_Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка#", _Журнал, КаталогИБ()+"ExtForms\UnitTests\СобытияFormEx.ert");
	
	РасширениеФормы = СоздатьОбъект("РасширениеФормы");
	РасширениеФормы.УстановитьФорму(КонтФормы.Форма);
	лМаксимизирована = РасширениеФормы.Максимизирована;
	
	Система=СоздатьОбъект("Система");
	Система.ЗакрытьФорму(КонтФормы);
	
	Сам.ПроверитьРавенство(ТипЗначения(КонтФормы), 0);
	//Сам.ПроверитьРавенство(ТипЗначения(лФорма), 0);
	Форма = РасширениеФормы.ПолучитьФорму();
	Сам.ПроверитьРавенство(ТипЗначения(Форма), 0);

	Сам.ПроверитьИсключение(РасширениеФормы, "КоличествоАтрибутов");
	
КонецПроцедуры

Процедура Тест_ПолучитьАтрибут() Экспорт
	Сам = Сам();
	_Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка#", _Журнал, КаталогИБ()+"ExtForms\UnitTests\СобытияFormEx.ert");
	
	РасширениеФормы = СоздатьОбъект("РасширениеФормы");
	РасширениеФормы.УстановитьФорму(КонтФормы.Форма);
	
	Атрибут = РасширениеФормы.ПолучитьАтрибут("КнопкаПерезагрузить");
	Сам.ПроверитьРавенство(ТипЗначенияСтр(Атрибут), "АтрибутФормы");

	Атрибут = РасширениеФормы.ПолучитьАтрибут("кНОПКАпЕРЕЗАГРУЗИТЬ");
	Сам.ПроверитьРавенство(ТипЗначенияСтр(Атрибут), "АтрибутФормы");

	Атрибут = РасширениеФормы.ПолучитьАтрибут(0);
	Сам.ПроверитьРавенство(ТипЗначенияСтр(Атрибут), "АтрибутФормы");

	Атрибут = РасширениеФормы.КнопкаПерезагрузить;
	Сам.ПроверитьРавенство(ТипЗначенияСтр(Атрибут), "АтрибутФормы");
	
	Атрибут = РасширениеФормы.кНОПКАпЕРЕЗАГРУЗИТЬ;
	Сам.ПроверитьРавенство(ТипЗначенияСтр(Атрибут), "АтрибутФормы");

	Сам.ПроверитьИсключение(РасширениеФормы, "ПолучитьАтрибут", "НесуществующийАтрибут");
	НомерНесуществующегоАтрибута = -1;
	Сам.ПроверитьИсключение(РасширениеФормы, "ПолучитьАтрибут", НомерНесуществующегоАтрибута);
КонецПроцедуры

Процедура Тест_ПолучитьАтрибутДляЗакрытойФормы() Экспорт
	Сам = Сам();
	
	_Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка#", _Журнал, КаталогИБ()+"ExtForms\UnitTests\СобытияFormEx.ert");
	
	РасширениеФормы = СоздатьОбъект("РасширениеФормы");
	РасширениеФормы.УстановитьФорму(КонтФормы.Форма);
	
	Система=СоздатьОбъект("Система");
	Система.ЗакрытьФорму(КонтФормы);

	Сам.ПроверитьИсключение(РасширениеФормы, "ПолучитьАтрибут", "КнопкаПерезагрузить");
КонецПроцедуры
    
Функция ПроверитьАтрибут(Атрибут)
	Сам = Сам();
	Сам.ПроверитьРавенство(ТипЗначенияСтр(Атрибут), "АтрибутФормы");
	
	лФорма = Атрибут.ПолучитьФорму();
	Сам.ПроверитьРавенство(ТипЗначения(лФорма), 100);
	Сам.ПроверитьРавенство(ТипЗначенияСтр(лФорма), "НеизвестныйОбъект");
	
	лЗаголовок = Атрибут.Заголовок;
	Сам.ПроверитьРавенство(ТипЗначенияСтр(лЗаголовок), "Строка");
	Сам.ПроверитьНеравенство(лЗаголовок, "");
	
	лФормула = Атрибут.Формула;
	Сам.ПроверитьРавенство(ТипЗначенияСтр(лФормула), "Строка");
	Сам.ПроверитьНеравенство(лФормула, "");
КонецФункции

Процедура Тест_УстановитьАтрибут() Экспорт
	Сам = Сам();
	_Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка#", _Журнал, КаталогИБ()+"ExtForms\UnitTests\СобытияFormEx.ert");
	                                                 
	Атрибут = СоздатьОбъект("АтрибутФормы");
	Сам.ПроверитьИсключение(Атрибут, "ПолучитьФорму");

	Атрибут.УстановитьАтрибут(КонтФормы.Форма, "КнопкаПерезагрузить");
	ПроверитьАтрибут(Атрибут);
	Сам.ПроверитьРавенство(Атрибут.Идентификатор, "КнопкаПерезагрузить");

	Атрибут.УстановитьАтрибут(КонтФормы.Форма, "кНОПКАпЕРЕЗАГРУЗИТЬ");
	ПроверитьАтрибут(Атрибут);
	Сам.ПроверитьРавенство(Атрибут.Идентификатор, "КнопкаПерезагрузить");
                              
	РасширениеФормы = СоздатьОбъект("РасширениеФормы");
	РасширениеФормы.УстановитьФорму(КонтФормы.Форма);
	Для к=1 По РасширениеФормы.КоличествоАтрибутов() Цикл
        Если РасширениеФормы.ПолучитьАтрибут(к).Идентификатор = "КнопкаПерезагрузить" Тогда
			Атрибут.УстановитьАтрибут(КонтФормы.Форма, к);
			ПроверитьАтрибут(Атрибут);
			Сам.ПроверитьРавенство(Атрибут.Идентификатор, "КнопкаПерезагрузить");
			Прервать;				
        КонецЕсли;
	КонецЦикла;
	

	Атрибут = СоздатьОбъект("АтрибутФормы");
	Сам.ПроверитьИсключение(Атрибут, "УстановитьАтрибут", 0, "КнопкаПерезагрузить");
КонецПроцедуры

Процедура Тест_ИспользованиеАтрибутаФормы() Экспорт
	Сам = Сам();
	_Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка#", _Журнал, КаталогИБ()+"ExtForms\UnitTests\СобытияFormEx.ert");
	
	РасширениеФормы = СоздатьОбъект("РасширениеФормы");
	РасширениеФормы.УстановитьФорму(КонтФормы.Форма);
	
	Атрибут = РасширениеФормы.ПолучитьАтрибут("КнопкаПерезагрузить");
	Сам.ПроверитьРавенство(ТипЗначенияСтр(Атрибут), "АтрибутФормы");

	// Атрибут // : АтрибутФормы
	Атрибут = РасширениеФормы.КнопкаПерезагрузить; // : АтрибутФормы
	ПроверитьАтрибут(Атрибут);
КонецПроцедуры

Процедура Тест_АтрибутФормы_ПолучитьФормуДляНеоткрытойФормы() Экспорт
	Сам = Сам();
	_Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	//КонтФормы = Сам.ОткрытьФорму("Обработка#", _Журнал, КаталогИБ()+"ExtForms\UnitTests\СобытияFormEx.ert");
	
	Атрибут = СоздатьОбъект("АтрибутФормы");
	Сам.ПроверитьИсключение(Атрибут, "ПолучитьФорму");
	//лФорма = Атрибут.ПолучитьФорму();
	//Сам.ПроверитьРавенство(ТипЗначения(лФорма), 0);
КонецПроцедуры

Процедура Тест_ИспользованиеАтрибутаПослеЗакрытияФормы() Экспорт
	Сам = Сам();
	_Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка#", _Журнал, КаталогИБ()+"ExtForms\UnitTests\СобытияFormEx.ert");
	                                                 
	Атрибут = СоздатьОбъект("АтрибутФормы");
	//Сам.ПроверитьИсключение(Атрибут, "ПолучитьФорму");

	Атрибут.УстановитьАтрибут(КонтФормы.Форма, "КнопкаПерезагрузить");
	//ПроверитьАтрибут(Атрибут);
	
	Система=СоздатьОбъект("Система");
	Система.ЗакрытьФорму(КонтФормы);
	
	Сам.ПроверитьИсключение(Атрибут, "ПолучитьФорму");
	Сам.ПроверитьИсключение(Атрибут, "ТипЗначенияСтр");

	//Атрибут = СоздатьОбъект("АтрибутФормы");
	//Сам.ПроверитьИсключение(Атрибут, "УстановитьАтрибут", 0, "КнопкаПерезагрузить");
КонецПроцедуры

Процедура ПроверитьСтруктуруКоординат(СтруктураКоординат, НаименованиеСвойства) Экспорт
	Сам = Сам();
	лСтруктура = 0;
	СтруктураКоординат.Свойство(НаименованиеСвойства, лСтруктура);
	Сам.ПроверитьТипЗначения(лСтруктура, "Структура");
	// лСтруктура // : Структура  
	
//Сообщить("НаименованиеСвойства = <"+НаименованиеСвойства+">");
//
//Сообщить("	Форма");	
	лСтруктураФормы = 0;
	лСтруктура.Свойство("Форма", лСтруктураФормы);
	Лево = лСтруктураФормы.Лево;
	Верх = лСтруктураФормы.Верх;
	Высота = лСтруктураФормы.Высота;
	Ширина = лСтруктураФормы.Ширина;
	Максимизирована = лСтруктураФормы.Максимизирована;
//Сообщить("		Лево = <"+Лево+">");
//Сообщить("		Верх = <"+Верх+">");
//Сообщить("		Высота = <"+Высота+">");
//Сообщить("		Ширина = <"+Ширина+">");
//Сообщить("		Максимизирована = <"+Максимизирована+">");
	
	лСтруктураАтрибута = 0;
	лСтруктура.Свойство("КнопкаЛевоВерх", лСтруктураАтрибута);
	
	Если (НаименованиеСвойства = "ПриОткрытии") или (НаименованиеСвойства = "ПриОткрытииСоСлоями") Тогда
		Сам.ПроверитьРавенство(лСтруктураФормы.Лево, 0);
		Сам.ПроверитьРавенство(лСтруктураФормы.Верх, 0);
		Сам.ПроверитьРавенство(лСтруктураФормы.Высота, 224);
		Сам.ПроверитьРавенство(лСтруктураФормы.Ширина, 313);

		Сам.ПроверитьРавенство(лСтруктураАтрибута.Лево, 0);
		Сам.ПроверитьРавенство(лСтруктураАтрибута.Верх, 2);
		Сам.ПроверитьРавенство(лСтруктураАтрибута.Высота, 13);
		Сам.ПроверитьРавенство(лСтруктураАтрибута.Ширина, 39);
		                             
// 	в методе ПослеСозданияФормы нельзя измерять координаты формы, т.к. они все равно изменятся !
//	ИначеЕсли НаименованиеСвойства = "ПослеСозданияФормы" Тогда
//		Сам.ПроверитьРавенство(лСтруктураФормы.Лево, 22);
//		Сам.ПроверитьРавенство(лСтруктураФормы.Верх, 29);
//		Сам.ПроверитьРавенство(лСтруктураФормы.Высота, 364);
//		Сам.ПроверитьРавенство(лСтруктураФормы.Ширина, 470);
//
//		Сам.ПроверитьРавенство(лСтруктураАтрибута.Лево, 0);
//		Сам.ПроверитьРавенство(лСтруктураАтрибута.Верх, 3);
//		Сам.ПроверитьРавенство(лСтруктураАтрибута.Высота, 21);
//		Сам.ПроверитьРавенство(лСтруктураАтрибута.Ширина, 59);
		
	ИначеЕсли НаименованиеСвойства = "ПослеОткрытия" Тогда
		//Сам.ПроверитьРавенство(лСтруктураФормы.Лево, 254);
		//Сам.ПроверитьРавенство(лСтруктураФормы.Верх, 28);
		Сам.ПроверитьРавенство(лСтруктураФормы.Лево, 132);
		Сам.ПроверитьРавенство(лСтруктураФормы.Верх, 174);
		
		Если лСтруктураФормы.Максимизирована = 1 Тогда                          
			// TODO artbear - попытаться узнать разрешение экрана и в зависимости от этого посчитать размеры
			// Высота 494 при разрешении 1024х780
			// Высота 560 при разрешении 1152х864
			Сам.ПроверитьБольше(лСтруктураФормы.Высота, 364); 
			//Сам.ПроверитьРавенство(лСтруктураФормы.Высота, 421); 
			Сам.ПроверитьРавенство(лСтруктураФормы.Высота, 560); 
			// Ширина 1012 при разрешении 1024х780
			// Ширина 1140 при разрешении 1152х864
			Сам.ПроверитьБольше(лСтруктураФормы.Ширина, 470); // 
			Сам.ПроверитьРавенство(лСтруктураФормы.Ширина, 1140); // 
		Иначе
			Сам.ПроверитьРавенство(лСтруктураФормы.Высота, 364);
			Сам.ПроверитьРавенство(лСтруктураФормы.Ширина, 470);
		КонецЕсли;

		Сам.ПроверитьРавенство(лСтруктураАтрибута.Лево, 0);
		Сам.ПроверитьРавенство(лСтруктураАтрибута.Верх, 3);
		Сам.ПроверитьРавенство(лСтруктураАтрибута.Высота, 21);
		Сам.ПроверитьРавенство(лСтруктураАтрибута.Ширина, 59);
		
	КонецЕсли;
	
//Сообщить("	КнопкаЛевоВерх");	
	Лево = лСтруктураАтрибута.Лево;
	Верх = лСтруктураАтрибута.Верх;
	Высота = лСтруктураАтрибута.Высота;
	Ширина = лСтруктураАтрибута.Ширина;
	Максимизирована = лСтруктураАтрибута.Максимизирована;
//Сообщить("		Лево = <"+Лево+">");
//Сообщить("		Верх = <"+Верх+">");
//Сообщить("		Высота = <"+Высота+">");
//Сообщить("		Ширина = <"+Ширина+">");
//Сообщить("		Максимизирована = <"+Максимизирована+">");


КонецПроцедуры

Процедура Тест_ПолучениеКоординатДляРасширенияИАтрибутаФормы() Экспорт
	Сам = Сам();
	_Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	
	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx", _Журнал);
//Предупреждение(1);	
	Сервис = СоздатьОбъект("Сервис");	
	СтруктураКоординат = ""; // : Структура
	Сервис.ПолучитьПеременнуюКонтекста(КонтФормы, "гСтруктура", СтруктураКоординат);
	Сам.ПроверитьТипЗначения(СтруктураКоординат, "Структура");
                  
	МетаИнфо = СоздатьОбъект("MetaInfoClasses");
	ВерсияСтрокой = МетаИнфо.ПолучитьВерсиюФайла(КаталогПрограммы()+"formex.dll", "FileVersion");
//Сообщить("ВерсияСтрокой = <"+ВерсияСтрокой+">");
	
	ПроверитьСтруктуруКоординат(СтруктураКоординат, "ПриОткрытии");
	ПроверитьСтруктуруКоординат(СтруктураКоординат, "ПриОткрытииСоСлоями");
	ПроверитьСтруктуруКоординат(СтруктураКоординат, "ПослеСозданияФормы");
	ПроверитьСтруктуруКоординат(СтруктураКоординат, "ПослеОткрытия");
КонецПроцедуры

Процедура Тест_РасширениеФормы_РаскрашиватьТаблицу() Экспорт
	Сам = Сам();
	
	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx");

	РасширениеФормы = СоздатьОбъект("РасширениеФормы");
	РасширениеФормы.УстановитьФорму(КонтФормы.Форма);
	
	Сервис = СоздатьОбъект("Сервис"); 
	Сервис.ВключитьРаскраскуТаблиц(1);
	
	РасширениеФормы.РаскрашиватьТаблицу("ТаблицаЗначений");

	АтрибутФормы = СоздатьОбъект("АтрибутФормы");
	АтрибутФормы.УстановитьАтрибут(КонтФормы.Форма,"ТаблицаЗначений");
КонецПроцедуры

Процедура ПроверитьСвойстваФормы(РасширениеФормы)
	Сам = Сам();

	Сам.ПроверитьРавенство(РасширениеФормы.Метка, "");
	Сам.ПроверитьРавенство(РасширениеФормы.Описание, "");
	Сам.ПроверитьРавенство(РасширениеФормы.ЦветФона, -1);
	Сам.ПроверитьБольше(СтрДлина(РасширениеФормы.ТекстМодуля), 0);
	Сам.ПроверитьРавенство(РасширениеФормы.Прозрачность, 511);
	Сам.ПроверитьБольше(РасширениеФормы.Дескриптор, 0);

	//Сам.ПроверитьРавенство(РасширениеФормы.Стиль, 1422901248); //1439154176);
	//Сам.ПроверитьРавенство(РасширениеФормы.Стиль, 1439154176);
	лСтиль = РасширениеФормы.Стиль;
	Если (лСтиль = 1422901248) или (лСтиль = 1439154176) Тогда
	Иначе
		Сам._ВыброситьИскл("Неверный стиль "+лСтиль);
	КонецЕсли;
	
	Сам.ПроверитьРавенство(РасширениеФормы.РасширенныйСтиль, 320);
	Сам.ПроверитьНеПустоеЗначение(РасширениеФормы.Иконка);
	Сам.ПроверитьТипЗначения(РасширениеФормы.Иконка, "");
КонецПроцедуры

Процедура Тест_РасширениеФормы_Свойства() Экспорт
	КонтФормы = Сам().ОткрытьФорму("Обработка.ТестоваяДляFormEx");

	РасширениеФормы = СоздатьОбъект("РасширениеФормы");
	РасширениеФормы.УстановитьФорму(КонтФормы.Форма);

	ПроверитьСвойстваФормы(РасширениеФормы);
	
КонецПроцедуры

Процедура Тест_РасширениеФормы_Свойства2() Экспорт
	КонтФормы = Сам().ОткрытьФорму("Обработка", , КаталогИБ()+"ExtForms\UnitTests\СобытияFormEx.ert");

	РасширениеФормы = СоздатьОбъект("РасширениеФормы");
	РасширениеФормы.УстановитьФорму(КонтФормы.Форма);

	ПроверитьСвойстваФормы(РасширениеФормы);
	
КонецПроцедуры

Процедура Тест_АтрибутФормы_ТипЗначенияСтр() Экспорт
	Сам = Сам();

	КонтФормы = Сам.ОткрытьФорму("Документ.Новый1");

	РасширениеФормы = СоздатьОбъект("РасширениеФормы");
	РасширениеФормы.УстановитьФорму(КонтФормы.Форма);
	
	АтрибутНомерДок = РасширениеФормы.ПолучитьАтрибут("НомерДок");
	Сам.ПроверитьРавенство(АтрибутНомерДок.ТипЗначенияСтр(), "Число");
	
	АтрибутДатаДок = РасширениеФормы.ПолучитьАтрибут("ДатаДок");
	Сам.ПроверитьРавенство(АтрибутДатаДок.ТипЗначенияСтр(), "Дата");
	
	АтрибутШапка2 = РасширениеФормы.ПолучитьАтрибут("Шапка2");
	Сам.ПроверитьРавенство(АтрибутШапка2.ТипЗначенияСтр(), "Число");
	
	Атрибутновый1 = РасширениеФормы.ПолучитьАтрибут("новый1");
	Сам.ПроверитьРавенство(Атрибутновый1.ТипЗначенияСтр(), "Строка");
	
	АтрибутМногострочнаяЧасть = РасширениеФормы.ПолучитьАтрибут("МногострочнаяЧасть");
	Сам.ПроверитьРавенство(АтрибутМногострочнаяЧасть.ТипЗначенияСтр(), "МногострочнаяЧасть");
КонецПроцедуры

Процедура Тест_РасширениеФормы_ПолныйПуть_ТипОбъекта_ПолныйТипОбъекта_ФормаДокумента() Экспорт
	Сам = Сам();

	КонтФормы = Сам.ОткрытьФорму("Документ.Новый1");

	РасширениеФормы = СоздатьОбъект("РасширениеФормы");
	РасширениеФормы.УстановитьФорму(КонтФормы.Форма);

	Сам.ПроверитьРавенство(РасширениеФормы.ПолныйПуть(), КаталогИБ()+"1Cv7.MD\Document\Document_Number16");
	Сам.ПроверитьРавенство(РасширениеФормы.ТипОбъекта(), "Документ");
	Сам.ПроверитьРавенство(РасширениеФормы.ПолныйТипОбъекта(), "Документ.Новый1.Форма");
КонецПроцедуры

Процедура Тест_РасширениеФормы_ПолныйПуть_ТипОбъекта_ПолныйТипОбъекта_ВстроеннаяОбработка() Экспорт
	Сам = Сам();

	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx");

	РасширениеФормы = СоздатьОбъект("РасширениеФормы");
	РасширениеФормы.УстановитьФорму(КонтФормы.Форма);

	Сам.ПроверитьРавенство(РасширениеФормы.ПолныйПуть(), КаталогИБ()+"1Cv7.MD\CalcVar\CalcVar_Number37");
	Сам.ПроверитьРавенство(РасширениеФормы.ТипОбъекта(), "Обработка");
	Сам.ПроверитьРавенство(РасширениеФормы.ПолныйТипОбъекта(), "Обработка.ТестоваяДляFormEx.Форма");
КонецПроцедуры

Процедура Тест_РасширениеФормы_ПолныйПуть_ТипОбъекта_ПолныйТипОбъекта_ВнешняяОбработка() Экспорт
	Сам = Сам();

	КонтФормы = Сам().ОткрытьФорму("Обработка", , КаталогИБ()+"ExtForms\UnitTests\СобытияFormEx.ert");

	РасширениеФормы = СоздатьОбъект("РасширениеФормы");
	РасширениеФормы.УстановитьФорму(КонтФормы.Форма);

	Сам.ПроверитьРавенство(РасширениеФормы.ПолныйПуть(), "ВнешнийОтчет");
	Сам.ПроверитьРавенство(РасширениеФормы.ТипОбъекта(), "ВнешнийОтчет");
	Сам.ПроверитьРавенство(РасширениеФормы.ПолныйТипОбъекта(), "ВнешнийОтчет");
КонецПроцедуры

Процедура ПроверитьСвойстваСтатика(лАтрибут)
	Сам = Сам();

	Сам.ПроверитьРавенство(лАтрибут.Видимость, 1);
	Сам.ПроверитьРавенство(лАтрибут.Заголовок, "Текст");
	Сам.ПроверитьРавенство(лАтрибут.Формула, "Текст()");
	Сам.ПроверитьРавенство(лАтрибут.Подсказка, "");
	Сам.ПроверитьРавенство(лАтрибут.Описание, "");
	Сам.ПроверитьРавенство(лАтрибут.Доступность, 1);
	Сам.ПроверитьРавенство(лАтрибут.Слой, "Основной");
	Сам.ПроверитьРавенство(лАтрибут.Тип, 1);
	Сам.ПроверитьРавенство(лАтрибут.Идентификатор, "статикТекст");
	Сам.ПроверитьРавенство(лАтрибут.ЦветШрифта, 0);
	Сам.ПроверитьРавенство(лАтрибут.Маска, "");
	Сам.ПроверитьРавенство(лАтрибут.ЦветФона, 16777215);
	//Сам.ПроверитьРавенство(лАтрибут.Шрифт, 1577718815); // разные значения
	Сам.ПроверитьРавенство(лАтрибут.Класс, "CStatic(0x40)->CWnd(0x40)->CCmdTarget(0x20)->CObject(0x4)->");
	Сам.ПроверитьРавенство(лАтрибут.Рамка, 0);
	//Сам.ПроверитьРавенство(лАтрибут.РодительскоеОкно, 0);
	Сам.ПроверитьБольше(лАтрибут.Дескриптор, 0);
	Сам.ПроверитьРавенство(лАтрибут.Стиль, 1342308352);
	Сам.ПроверитьРавенство(лАтрибут.РасширенныйСтиль, 1342308352);
	//Сам.ПроверитьРавенство(лАтрибут.Картинка, "");
	Сам.ПроверитьРавенство(лАтрибут.Фокус, 0);
	Сам.ПроверитьРавенство(лАтрибут.Автовыбор, 1);
	Сам.ПроверитьРавенство(лАтрибут.ИмеетКнопкуВыбора, 0);
КонецПроцедуры

Процедура Тест_ПолучениеСвойствАтрибутовФормы_Статик() Экспорт
	Сам = Сам();

	//Сам.ПропуститьТест();

	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx#");
	Форма = КонтФормы.Форма;

	_РасширениеФормы.УстановитьФорму(Форма);

	лАтрибут =	_РасширениеФормы.ПолучитьАтрибут("статикТекст");

	ПроверитьСвойстваСтатика(лАтрибут);
	
	Форма.Обновить();

	ПроверитьСвойстваСтатика(лАтрибут);
КонецПроцедуры
    
Процедура ПроверитьСвойстваСтатикаШтатно(Форма, Идентификатор)
	Сам = Сам();
	
	лАтрибут = Форма.ПолучитьАтрибут(Идентификатор);
	
	Сам.ПроверитьРавенство(лАтрибут.Видимость(), 1);
	Сам.ПроверитьРавенство(лАтрибут.Доступность(), 1);
	Сам.ПроверитьРавенство(лАтрибут.Редактирование(), 0);
	Сам.ПроверитьРавенство(лАтрибут.Цвет(), 0);
	Сам.ПроверитьРавенство(ТипЗначения(лАтрибут.Маска()), 0);
	Сам.ПроверитьРавенство(лАтрибут.ВыборГруппы(), -1);
	Сам.ПроверитьРавенство(лАтрибут.ВыполнятьФормулуТолькоПриИзменении(), 0);
	Сам.ПроверитьРавенство(лАтрибут.НеИзменятьВид(), 0);

	Сам.ПроверитьРавенство(лАтрибут.Заголовок(), "Текст");
	
КонецПроцедуры// ПроверитьСвойстваСтатикаШтатно

Процедура Тест_ПолучениеСвойствАтрибутовФормы_Штатно_Статик() Экспорт
	Сам = Сам();

	//Сам.ПропуститьТест();

	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx#");
	Форма = КонтФормы.Форма;

//	_РасширениеФормы.УстановитьФорму(Форма);
//
//	лАтрибут =	_РасширениеФормы.ПолучитьАтрибут("статикТекст");

	ПроверитьСвойстваСтатикаШтатно(Форма, "статикТекст");
	
	Форма.Обновить();

	ПроверитьСвойстваСтатикаШтатно(Форма, "статикТекст");
КонецПроцедуры

Процедура ТестАтрибутФормы() Экспорт
	Перем КонтФормы;

	Сам = Сам();

	//Сам.ПропуститьТест();
	//Сообщить(Сам.ИмяМетода+" ТестАтрибутФормы");

	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx#");
	
	//Форма = КонтФормы.Форма.Параметр;
	
	//Форма = КонтФормы.Переменная;
	Форма = КонтФормы.Форма;
	Сам.ПроверитьРавенство(ТипЗначенияСтр(Форма), "НеизвестныйОбъект");
	Сам.ПроверитьРавенство(Форма.АктивныйЭлемент(), "Реквизит");

//Сам.ПроверитьРавенство(Форма.Заголовок(), "ТестоваяОбработка");

	Сам.ПроверитьРавенство(Форма.Заголовок(), "");
	
	//Сам.ПроверитьИсключение(_РасширениеФормы, "ПолучитьФорму"); // Форма = _РасширениеФормы.ПолучитьФорму();
	Форма = _РасширениеФормы.ПолучитьФорму();
	Сам.ПроверитьРавенство(ТипЗначения(Форма), 0);

	//Сам.ПроверитьРавенство(Форма.Заголовок, "ТестоваяОбработка");
	
	_РасширениеФормы.УстановитьФорму(Форма);
	
	Форма = 0;
	Форма = _РасширениеФормы.ПолучитьФорму();
	
	Сам.ПроверитьРавенство(ТипЗначенияСтр(Форма), "НеизвестныйОбъект");
	Сам.ПроверитьРавенство(Форма.АктивныйЭлемент(), "Реквизит");
	//Сам.ПроверитьРавенство(Форма.Заголовок(), "ТестоваяОбработка");
	Сам.ПроверитьРавенство(Форма.Заголовок(), "");
	
КонецПроцедуры
                          
Функция ПроверитьДоступность(лАтрибут);
	Сам = Сам();

	Сам.ПроверитьРавенство(лАтрибут.Доступность, 1);

	лАтрибут.Доступность = 0;
	Сам.ПроверитьРавенство(лАтрибут.Доступность, 0);

	лАтрибут.Доступность = лАтрибут.Доступность;
	Сам.ПроверитьРавенство(лАтрибут.Доступность, 0);

	лАтрибут.Доступность = 1;
	Сам.ПроверитьРавенство(лАтрибут.Доступность, 1);

	лАтрибут.Доступность = лАтрибут.Доступность;
	Сам.ПроверитьРавенство(лАтрибут.Доступность, 1);
КонецФункции

Процедура Тест_АтрибутФормы_Доступность() Экспорт
	Сам = Сам();

	КонтФормы = Сам.ОткрытьФорму("Обработка.ТестоваяДляFormEx#");
	Форма = КонтФормы.Форма;

	_РасширениеФормы.УстановитьФорму(Форма);

	лАтрибут =	_РасширениеФормы.ПолучитьАтрибут("статикТекст");

	ПроверитьДоступность(лАтрибут);
	
	Форма.Обновить();

	ПроверитьДоступность(лАтрибут);
КонецПроцедуры

Процедура Тест_АтрибутФормы_ДоступностьДляТабличнойЧасти() Экспорт
	Сам = Сам();

	КонтФормы = Сам.ОткрытьФорму("Документ.Новый1");
	Форма = КонтФормы.Форма;

	_РасширениеФормы.УстановитьФорму(Форма);

	лАтрибут =	_РасширениеФормы.ПолучитьАтрибут("новый1");

	ПроверитьДоступность(лАтрибут);
	
	Форма.Обновить();

	ПроверитьДоступность(лАтрибут);
КонецПроцедуры
