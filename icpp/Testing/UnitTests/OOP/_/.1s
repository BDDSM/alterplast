Перем стрЖурнал Экспорт;
Перем КонтФормы;

Функция Конт(Конт) Возврат Конт; КонецФункции // : Контекст
Функция Сам() Возврат Конт(Контекст); КонецФункции // : Контекст
Функция База() Возврат Конт(Контекст).ПолучитьБазовыйКласс(); КонецФункции

Процедура Сброс() Экспорт
	Если ТипЗначения(КонтФормы)=100 Тогда
		КонтФормы.Форма.Закрыть();
	КонецЕсли;

	База().Сброс(); // обязательно !!
КонецПроцедуры

Процедура КомпиляцияМодуляКласса() Экспорт
	Сам=Сам();
	Объект=СоздатьОбъект("Тесты_КомпиляцияКласса");
	Объект.ЗаполнитьФлаги();
	Сам.ПроверитьРавенство(Объект.стрЖурнал, "ЭтоКласс");
КонецПроцедуры

Функция ПолучитьТекКонтекст()
	Перем Конт;     

	Попытка
		Сервис=СоздатьОбъект("Сервис");
	Исключение
		Сам().ПропуститьТест(, "Для проверки необходимо загрузить FormEx");
	КонецПопытки;
	
	Сервис.АктивныйКонтекст(Конт);
	Возврат Конт;
КонецФункции

Процедура Тест_КомпиляцияМодуляКлассаБезОтладки() Экспорт
	ВключитьОтладку(0);
	КомпиляцияМодуляКласса();
КонецПроцедуры

Процедура Тест_КомпиляцияМодуляКлассаСОтладкой() Экспорт
	Сам=Сам();
	
	//Сообщить("Нифига сообщения автоматом не заносятся в лог-файл
	//		|а если в модуле класса определить процедуру Сообщить() как в глобальнике, все будет ок.
	//		|это недокументированная особенность недокументированного перехвата данной функции");
	
	текКонтекст=ПолучитьТекКонтекст();
	
	ВключитьОтладку(1);
	КомпиляцияМодуляКласса();
	
	КонтекстОтладки=ПолучитьТекКонтекст();
	Сам.ПроверитьНеравенство(КонтекстОтладки, текКонтекст);

	Сам.ПроверитьРавенство(КонтекстОтладки.стрКопияЖурнала, "ПриОтладке");
КонецПроцедуры

Процедура КомпиляцияМодуляОбработки() Экспорт
	Сам=Сам();
//	Сам.ПропуститьТест(); //Падают тесты после тестов ВыполняемогоМодуля
	
	ОткрытьФорму("Обработка#", КонтФормы, Сам.ПолучитьПуть());
	Сам.ПроверитьРавенство(ТипЗначенияСтр(КонтФормы), "ГрупповойКонтекст");

	КонтФормы.ЗаполнитьФлаги();
	Сам.ПроверитьРавенство(КонтФормы.стрЖурнал, "ПриОткрытииОбработки, ЭтоОбработка");
КонецПроцедуры

Процедура Тест_КомпиляцияМодуляОбработкиПриВыключеннойОтладке() Экспорт
	ВключитьОтладку(0);
	КомпиляцияМодуляОбработки();
КонецПроцедуры

Процедура Тест_КомпиляцияМодуляОбработкиПриВключеннойОтладке() Экспорт
//Предупреждение(1);	
	ВключитьОтладку(1);
	КомпиляцияМодуляОбработки();
КонецПроцедуры

Процедура СоздатьФайлИзменчивогоКласса(стрРезультат)
	ИмяФайлаКласса=СтрЗаменить(Сам().ПолучитьПуть(), "Тесты_КомпиляцияКласса.ert", "ИзменчивыйКласс.txt");
	Текст=СоздатьОбъект("Текст");
	Текст.ДобавитьСтроку("Функция ПолучитьЗначение() Экспорт
			|	Возврат """+стрРезультат+""";
			|КонецФункции");
	Текст.Записать(ИмяФайлаКласса);
КонецПроцедуры

Процедура Тест_РежимыОптимизации1() Экспорт
	Сам=Сам();
	ВключитьОптимизацию(0);
	
	СоздатьФайлИзменчивогоКласса("Значение1");
	Объект=СоздатьОбъект("ИзменчивыйКласс");
	Сам.ПроверитьРавенство(Объект.ПолучитьЗначение(), "Значение1");
	
	СоздатьФайлИзменчивогоКласса("Значение2");
	Объект=СоздатьОбъект("ИзменчивыйКласс");
	Сам.ПроверитьРавенство(Объект.ПолучитьЗначение(), "Значение2");
	
	ВключитьОптимизацию(1);
	
	СоздатьФайлИзменчивогоКласса("Значение1");
	Объект=СоздатьОбъект("ИзменчивыйКласс");
	Сам.ПроверитьРавенство(Объект.ПолучитьЗначение(), "Значение1");
	
	СоздатьФайлИзменчивогоКласса("Значение2");
	Объект=СоздатьОбъект("ИзменчивыйКласс");
	Сам.ПроверитьРавенство(Объект.ПолучитьЗначение(), "Значение1");
КонецПроцедуры

Процедура Тест_РежимыОптимизации2() Экспорт
	Сам=Сам();
	
	ВключитьОптимизацию(0);
	СоздатьФайлИзменчивогоКласса("Значение1");
	Объект1=СоздатьОбъект("ИзменчивыйКласс");
	ВключитьОптимизацию(1);
	СоздатьФайлИзменчивогоКласса("Значение2");
	Объект2=СоздатьОбъект("ИзменчивыйКласс");
	
	Сам.ПроверитьРавенство(Объект1.ПолучитьЗначение(), "Значение1");
	Сам.ПроверитьРавенство(Объект2.ПолучитьЗначение(), "Значение2");
	
	ВключитьОптимизацию(0);
	Объект2=СоздатьОбъект("ИзменчивыйКласс");
	
	Сам.ПроверитьРавенство(Объект1.ПолучитьЗначение(), "Значение1");
	Сам.ПроверитьРавенство(Объект2.ПолучитьЗначение(), "Значение2");
КонецПроцедуры

Процедура Тест_РежимыОптимизации3() Экспорт
	Сам=Сам();
	
	СоздатьФайлИзменчивогоКласса("Значение1");
	
	ВключитьОптимизацию(0);
	Объект1=СоздатьОбъект("ИзменчивыйКласс");
	Сам.ПроверитьРавенство(Объект1.ПолучитьЗначение(), "Значение1");
	ВключитьОптимизацию(1);
	Объект2=СоздатьОбъект("ИзменчивыйКласс");
	Сам.ПроверитьРавенство(Объект2.ПолучитьЗначение(), "Значение1");
	
	СоздатьФайлИзменчивогоКласса("Значение2");
	ВключитьОптимизацию(0);
	Объект2=СоздатьОбъект("ИзменчивыйКласс");
	Сам.ПроверитьРавенство(Объект1.ПолучитьЗначение(), "Значение1");
	Сам.ПроверитьРавенство(Объект2.ПолучитьЗначение(), "Значение2");
	
	СоздатьФайлИзменчивогоКласса("Значение1");
	ВключитьОптимизацию(1);
	Объект2=СоздатьОбъект("ИзменчивыйКласс");
	Сам.ПроверитьРавенство(Объект1.ПолучитьЗначение(), "Значение1");
	Сам.ПроверитьРавенство(Объект2.ПолучитьЗначение(), "Значение1");

	СоздатьФайлИзменчивогоКласса("Значение2");
	Объект2=СоздатьОбъект("ИзменчивыйКласс");
	Сам.ПроверитьРавенство(Объект1.ПолучитьЗначение(), "Значение1");
	Сам.ПроверитьРавенство(Объект2.ПолучитьЗначение(), "Значение1");
КонецПроцедуры

Процедура ДобавитьЗаписьВЖурнал(ИмяМетода) Экспорт
	Если ПустоеЗначение(стрЖурнал)=1 Тогда
		стрЖурнал=ИмяМетода;
	Иначе
		стрЖурнал=стрЖурнал+", "+ИмяМетода;
	КонецЕсли;
	//В принципе, конечно, можно оставить так. Но в строгих языках нужна условная компиляция.
	стрКопияЖурнала=стрЖурнал;
КонецПроцедуры

Процедура ЗаполнитьФлаги() Экспорт
//#if _NOW_PREPARE_CLASS
	ДобавитьЗаписьВЖурнал("ЭтоКласс");
//#else
	ДобавитьЗаписьВЖурнал("ЭтоОбработка");
//#endif
КонецПроцедуры

Процедура ПриОткрытии()
//#if _NOW_PREPARE_CLASS
	Форма.Параметр._ПриОткрытии();
	ДобавитьЗаписьВЖурнал("ПриОтладке");
	//Сообщить("ПриОткрытии");
	
//#else
	ДобавитьЗаписьВЖурнал("ПриОткрытииОбработки");
	
	// этот код нужен чтобы в режиме отладки класса обращаться к методам и свойствам контекста данной формы в файле класса
	// уже не нужен
	//лУскоритель = СоздатьОбъект("УскорительГК");
	//лУскоритель.Ускорить();

//#endif
КонецПроцедуры

Процедура Тест_КомпиляцияСВключениемАЗатемОтключениемОптимизации() Экспорт
	Сам=Сам();
	ВключитьОптимизацию(1);
	
	СоздатьФайлИзменчивогоКласса("Значение1");
	Объект=СоздатьОбъект("ИзменчивыйКласс");
	Сам.ПроверитьРавенство(Объект.ПолучитьЗначение(), "Значение1");
	
	СоздатьФайлИзменчивогоКласса("Значение2");
	Объект=СоздатьОбъект("ИзменчивыйКласс");
	Сам.ПроверитьРавенство(Объект.ПолучитьЗначение(), "Значение1");
	
	МетаИнфо = СоздатьОбъект("MetaInfoClasses");
	МетаИнфо.ОчиститьДанныеОптимизацииКлассов();
	//ВключитьОптимизацию(0);
	
	СоздатьФайлИзменчивогоКласса("Значение2");
	Объект=СоздатьОбъект("ИзменчивыйКласс");
	Сам.ПроверитьРавенство(Объект.ПолучитьЗначение(), "Значение2");
	
	СоздатьФайлИзменчивогоКласса("Значение1");
	Объект=СоздатьОбъект("ИзменчивыйКласс");
	Сам.ПроверитьРавенство(Объект.ПолучитьЗначение(), "Значение2");
КонецПроцедуры

Процедура СоздатьФайлИзменчивогоКлассаСНовымМетодомИСвойством(стрРезультат, НаименованиеМетода)
	ИмяФайлаКласса=СтрЗаменить(Сам().ПолучитьПуть(), "Тесты_КомпиляцияКласса.ert", "ИзменчивыйКласс.txt");
	Текст=СоздатьОбъект("Текст");
	
	Текст.ДобавитьСтроку("Перем АтрибутМодуля"+НаименованиеМетода+" Экспорт;");
			
	Текст.ДобавитьСтроку("Функция ПолучитьЗначение() Экспорт
			|	Возврат """+стрРезультат+""";
			|КонецФункции");

	Текст.ДобавитьСтроку("Функция Метод"+НаименованиеМетода+"() Экспорт
			| АтрибутМодуля"+НаименованиеМетода+" = """+НаименованиеМетода+""";
			|	Возврат """+стрРезультат+""";
			|КонецФункции");
	
	Текст.Записать(ИмяФайлаКласса);
КонецПроцедуры
                                                       
Процедура ПроверитьКомпиляциюСВключениемАЗатемСбросомОптимизации()
	Сам=Сам();

	// схема следующая - все действия при включенном режиме оптимизации
	// 1) сначала создаю два разных объекта одного класса
	//		два класса нужны, чтобы убедиться в правильности множественной реализации подсчета ссылок
	// 2) меняю код класса (добавляю новый метод и меняю значение)
	// 3) сбрасываю данные оптимизации классов                    
	// 4) создаю новый объект c другими методами и атрибутами
	// 5) теперь для первых двух объектов (если сброс оптимизации работает верно)
	//		- не должно быть ни новых методов, ни новых атрибутов и все значения должны остаться старыми
	
	СоздатьФайлИзменчивогоКлассаСНовымМетодомИСвойством("Значение1", "1");

	ВключитьОптимизацию(1);
	
	Объект1 = СоздатьОбъект("ИзменчивыйКласс");
	Сам.ПроверитьРавенство(Объект1.ПолучитьЗначение(), "Значение1");
	Сам.ПроверитьРавенство(Объект1.Метод1(), "Значение1");
	Сам.ПроверитьРавенство(Объект1.АтрибутМодуля1, "1");
	                                                       
	Информатор = СоздатьОбъект("Информатор");

	Сам.ПроверитьРавенство(Информатор.МетодСуществует(Объект1, "Метод2"), 0);
	
	//СоздатьФайлИзменчивогоКласса("Значение2");
	Объект2 = СоздатьОбъект("ИзменчивыйКласс");
	Сам.ПроверитьРавенство(Объект2.ПолучитьЗначение(), "Значение1");
	Сам.ПроверитьРавенство(Объект2.Метод1(), "Значение1");
	Сам.ПроверитьРавенство(Объект2.АтрибутМодуля1, "1");
	
	МетаИнфо = СоздатьОбъект("MetaInfoClasses");
	МетаИнфо.ОчиститьДанныеОптимизацииКлассов();

	СоздатьФайлИзменчивогоКлассаСНовымМетодомИСвойством("Значение2", "2");
	
	Объект=СоздатьОбъект("ИзменчивыйКласс");
	Сам.ПроверитьРавенство(Объект.ПолучитьЗначение(), "Значение2");
	Сам.ПроверитьРавенство(Объект.Метод2(), "Значение2");
	Сам.ПроверитьРавенство(Объект.АтрибутМодуля2, "2");

	Сам.ПроверитьРавенство(Объект1.ПолучитьЗначение(), "Значение1");
	Сам.ПроверитьРавенство(Объект1.Метод1(), "Значение1");
	Сам.ПроверитьРавенство(Информатор.МетодСуществует(Объект1, "Метод2"), 0);
	Сам.ПроверитьРавенство(Объект1.АтрибутМодуля1, "1");
	
	Сам.ПроверитьРавенство(Объект2.ПолучитьЗначение(), "Значение1");
	Сам.ПроверитьРавенство(Объект2.Метод1(), "Значение1");
	Сам.ПроверитьРавенство(Информатор.МетодСуществует(Объект2, "Метод2"), 0);
	Сам.ПроверитьРавенство(Объект2.АтрибутМодуля1, "1");
КонецПроцедуры	// ПроверитьКомпиляциюСВключениемАЗатемСбросомОптимизации

// для одного класса можно очистить данные оптимизации одним из двух вариантов !
Процедура Тест_КомпиляцияСВключениемАЗатемОтключениемОптимизации2() Экспорт
	// очистить данные оптимизации для класса "ИзменчивыйКласс"
	ВключитьОптимизацию(0);
	Объект1 = СоздатьОбъект("ИзменчивыйКласс");
	
	ПроверитьКомпиляциюСВключениемАЗатемСбросомОптимизации();
КонецПроцедуры

Процедура Тест_КомпиляцияСВключениемАЗатемОтключениемОптимизации3() Экспорт
	// очистить данные оптимизации для всех классов
	МетаИнфо = СоздатьОбъект("MetaInfoClasses");
	МетаИнфо.ОчиститьДанныеОптимизацииКлассов();

	ПроверитьКомпиляциюСВключениемАЗатемСбросомОптимизации();
КонецПроцедуры

Процедура Тест_КомпиляцияМодуляКласса_ВФайлеВнешнейОбработкиБезЭлементовФормы_СОтладкой() Экспорт
	Сам=Сам();
	
	ПомощникСозданияКласса = СоздатьОбъект("ПомощникСозданияКласса");        
	ИмяНовогоКласса = ПомощникСозданияКласса.ПолучитьСлучайноеИмяНовогоКласса();
	
	СтрокаОписанияКласса = "class "+ИмяНовогоКласса+" = ExtForms\ОтчетБезЭлементовФормы.ert
	|{}";
	
	_МетаИнфо = СоздатьОбъект("MetaInfoClasses");	
	_МетаИнфо.ЗагрузитьОписаниеКлассов(СтрокаОписанияКласса);
	
	ВключитьОтладку(1);

	Объект = СоздатьОбъект(ИмяНовогоКласса);
	Сам.ПроверитьТипЗначения(Объект, ИмяНовогоКласса);
	Объект.Метод();
КонецПроцедуры

Процедура Тест_КомпиляцияМодуляКласса_ВТекстовомФайле_СОтладкой() Экспорт
	Сам=Сам();
	
	ИмяНовогоКласса = "ООППредок";

	ВключитьОтладку(1);

	Объект = СоздатьОбъект(ИмяНовогоКласса);
	Сам.ПроверитьТипЗначения(Объект, ИмяНовогоКласса);
КонецПроцедуры
