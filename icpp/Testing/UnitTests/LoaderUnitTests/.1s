// Возможен режим автотестирования
// должна быть командная строка вида
//
// "C:\Program Files\1Cv77\Bin25\BIN\1CV7.exe" ENTERPRISE /D"G:\1C\1C++\Testing 1C++\" /N /U"G:\1C\1C++\Testing 1C++\" /T"g:\" /Lrus  /Команда:Тестировать /ExitAfterTest

Перем гЗагрузчикТестов, гРезультатТеста;
Перем гфАвтотестирование, гфЗавершить1С;

Перем гПрефиксИменТестовыхКлассов;
//	------------------- ------------------- ------------------- -------------------
//
//		TODO возможно есть смысл ООПТесты перенести сразу же после загрузки 1С++
// 		без использования классов загрузки юнит-тестов, чтобы сразу локализовать ошибку работы с ООП
//
//	------------------- ------------------- ------------------- -------------------
	
//*************************************************************************
Процедура ЗадатьСтатуснуюСтроку(Сообщение)
	Форма.СтатуснаяСтрока.Заголовок("");
	Форма.СтатуснаяСтрока.Заголовок(Сообщение);
	Форма.Обновить(0);
КонецПроцедуры //ЗадатьСтатуснуюСтроку

//******************************************************************************
//	ВклОбъекты(Режим)
//
//	Параметры:
//		Пометка - режим установки пометок
//
//	Описание:
//		Помечает, снимает или инвертирует установленные пометки в списке типов сотрудников.	
//
Процедура ВклОбъекты(РежимПометки, СписокНаФорме)
	
	Для Сч = 1 по СписокНаФорме.РазмерСписка() Цикл 
		Если РежимПометки = "Все" тогда
			СписокНаФорме.Пометка(Сч,1)
		ИначеЕсли РежимПометки = "Сброс" тогда
			СписокНаФорме.Пометка(Сч,0)
		Иначе
			Если СписокНаФорме.Пометка(Сч) = 1 тогда
				СписокНаФорме.Пометка(Сч,0)
			Иначе
				СписокНаФорме.Пометка(Сч,1)
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры // ВклОбъекты

Процедура УстановитьТипы(Режим="") 
	ВклОбъекты(Режим, СписокКлассовЮнитТестов);
КонецПроцедуры        
   
// здесь добавляем тестируемые классы из списка на форме
Функция ПолучитьСписокТестируемыхКлассов()
	СписокКлассов = СоздатьОбъект("СписокЗначений");
	                                                    
	Для к=1 По СписокКлассовЮнитТестов.РазмерСписка() Цикл
		Если СписокКлассовЮнитТестов.Пометка(к) = 1 Тогда
			СписокКлассов.ДобавитьЗначение(СписокКлассовЮнитТестов.ПолучитьЗначение(к));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокКлассов;
КонецФункции	// ПолучитьСписокВсехТестируемыхКлассов

//_____________________________________________________________________________
Процедура СброситьКэшМодулейКлассов()
	МетаИнфо = СоздатьОбъект("MetaInfoClasses");
	МетаИнфо.ОчиститьДанныеОптимизацииКлассов();
//Возврат;
//	
//	ВключитьОптимизацию(0);
//	
//	спИменаКлассов = MetaInfoClasses.ПолучитьВсеИменаКлассов();
//	Для ъ = 1 по спИменаКлассов.РазмерСписка() Цикл
//		Попытка
//			объект=СоздатьОбъект(спИменаКлассов.ПолучитьЗначение(ъ));
//		Исключение 
//			//Предупреждение("Исключение");
//			//Предупреждение("спИменаКлассов.ПолучитьЗначение(ъ) = "+спИменаКлассов.ПолучитьЗначение(ъ));
//			//Предупреждение("ТипЗначениеСтр(объект) = "+ТипЗначенияСтр(объект));
//		КонецПопытки;
//		Попытка
//			Объект = 0; // чтобы отработать возможные исключение в деструкторе !!
//		Исключение 
//			//Предупреждение("Исключение");
//			//Предупреждение("спИменаКлассов.ПолучитьЗначение(ъ) = "+спИменаКлассов.ПолучитьЗначение(ъ));
//			//Предупреждение("ТипЗначениеСтр(объект) = "+ТипЗначенияСтр(объект));
//		КонецПопытки;
//	КонецЦикла;
	ОчиститьОкноСообщений();
КонецПроцедуры
                                                    
// иначе деструкторы классов тестов не вызываются, и объекты висят в памяти
// например, без этого метода
// при использовании классов таймера видно, что таймер продолжает работает, хотя тестирования уже завершено
Процедура УдалитьВсеСозданныеОбъектыТестов() Экспорт
	гЗагрузчикТестов = СоздатьОбъект("ЗагрузчикТестов");
КонецПроцедуры

//_____________________________________________________________________________
Процедура ЗагрузитьТесты()
	
	гРезультатТеста = СоздатьОбъект("РезультатТеста"); // чтобы данные по тестам очистились и правильно замерилось время
	
	Если фОптимизация=1 Тогда
	    Состояние("Сброс кэша модулей классов");
		СброситьКэшМодулейКлассов();
	КонецЕсли;
	ВключитьОптимизацию(фОптимизация);

    Состояние("Создание объектов тестовых классов");
	СписокКлассов = ПолучитьСписокТестируемыхКлассов();
	
	//НаборТестов = гЗагрузчикТестов.ЗагрузитьИзСпискаКлассов(СписокКлассов, "тест"); // ИндексированнаяТаблица
	НаборТестов = гЗагрузчикТестов.ЗагрузитьИзСпискаКлассов_ПолучаяИнфуИзФайловРеализацииКлассов(СписокКлассов, "тест"); // ИндексированнаяТаблица
	
	лСообщатьОПрогрессе = ?(гфАвтотестирование = 1, 0, 1);
	НаборТестов.Запустить(гРезультатТеста, фОтключитьПропускТестов, лСообщатьОПрогрессе);
	
	Если гфАвтотестирование = 0 Тогда
		гРезультатТеста.Печать();
	Иначе     
		гРезультатТеста.ВыдатьРезультатВЛогФайл(КаталогИБ()+"ЛогДляВеб.log", 1);
//Предупреждение("гРезультатТеста.ВыдатьРезультатВЛогФайл");
	КонецЕсли;
	
	ЗадатьСтатуснуюСтроку(гРезультатТеста.Итог());
	                                                    
	УдалитьВсеСозданныеОбъектыТестов();
КонецПроцедуры

// более удобное представление "тесты НаименованиеКласса"
Процедура ПреобразоватьПредставлениеСпискаЮнитТестов()
	Для к=1 По СписокКлассовЮнитТестов.РазмерСписка() Цикл
		
		Представление = "";
		Значение = СписокКлассовЮнитТестов.ПолучитьЗначение(к, Представление);
		Если Представление = "" Тогда
			Представление = Значение;
		КонецЕсли;
		лПредставление = Нрег(Представление);
		ПрефиксИлиСуффикс = гПрефиксИменТестовыхКлассов;
		ДлинаПрефикса = СтрДлина(ПрефиксИлиСуффикс);
		Если (Лев(лПредставление , ДлинаПрефикса) = ПрефиксИлиСуффикс) Тогда
			Представление = Сред(Представление, ДлинаПрефикса+1);
			Если Лев(Представление, 1) = "_" Тогда
				Представление=Сред(Представление, 2);
			КонецЕсли;
		ИНачеЕсли (Прав(лПредставление, ДлинаПрефикса) = ПрефиксИлиСуффикс) Тогда
			Представление = Лев(Представление, СтрДлина(Представление)-ДлинаПрефикса);
			Если Прав(Представление, 1) = "_" Тогда
				Представление = Лев(Представление, СтрДлина(Представление)-1);
			КонецЕсли;
		КонецЕсли;
		//Представление = "тесты " + Представление;
		
		СписокКлассовЮнитТестов.УстановитьЗначение(к, Значение, Представление);
	КонецЦикла;
	СписокКлассовЮнитТестов.СортироватьПоПредставлению();
КонецПроцедуры	// ПреобразоватьПредставлениеСпискаЮнитТестов

//============================================================
Процедура СохранитьНастройки()
	спОтмеченныеТесты=СоздатьОбъект("СписокЗначений");
	Для ъ=1 По СписокКлассовЮнитТестов.РазмерСписка() Цикл
		Если СписокКлассовЮнитТестов.Пометка(ъ)=0 Тогда Продолжить; КонецЕсли;
		текТест=СписокКлассовЮнитТестов.ПолучитьЗначение(ъ);
		спОтмеченныеТесты.ДобавитьЗначение(СписокКлассовЮнитТестов.ПолучитьЗначение(ъ));
	КонецЦикла;
	спНастройки=СоздатьСписок("спОтмеченныеТесты", спОтмеченныеТесты, "ТекущийТест", спТекущееЗначение(СписокКлассовЮнитТестов));
	СохранитьЗначение("ЗапускТестов.Настройки", спНастройки);
КонецПроцедуры

//============================================================
Процедура ВосстановитьНастройки()
	спНастройки=ВосстановитьЗначение("ЗапускТестов.Настройки");
	Если ПустоеЗначение(спНастройки)=1 Тогда Возврат; КонецЕсли;
	
	ТекущийТест=спНастройки.Получить("ТекущийТест");
	Если ПустоеЗначение(ТекущийТест)=0 Тогда спУстановитьТекущуюСтроку(СписокКлассовЮнитТестов, ТекущийТест); КонецЕсли;
		
	спОтмеченныеТесты=спНастройки.Получить("спОтмеченныеТесты");
	Если ПустоеЗначение(спОтмеченныеТесты)=1 Тогда Возврат;	КонецЕсли;
	Для ъ=1 По СписокКлассовЮнитТестов.РазмерСписка() Цикл
		ИмяКласса=СписокКлассовЮнитТестов.ПолучитьЗначение(ъ);
		Если спОтмеченныеТесты.НайтиЗначение(ИмяКласса)=0 Тогда Продолжить; КонецЕсли;
		СписокКлассовЮнитТестов.Пометка(ъ, 1);
	КонецЦикла;
КонецПроцедуры

//============================================================
Процедура ОбработатьКоманднуюСтроку()
	АнализКоманднойСтроки = СоздатьОбъект("Общие.АнализКоманднойСтроки1С");
	Команда = АнализКоманднойСтроки.ПолучитьПараметр( "/Команда" );
	гфАвтотестирование = ?(Команда = "Тестировать", 1, 0);
	
	гфЗавершить1С = АнализКоманднойСтроки.ПолучитьПараметр( "/ExitAfterTest" );
	гфЗавершить1С = ?(гфЗавершить1С = 0, 0, 1);
КонецПроцедуры

//============================================================
Процедура ПриОткрытии() 

	ВключитьОтладку(0);
                                      
	// т.к. используем сброс кеша оптимизации классов, 
	// удобно одновременно использовать оттимизацию и изменение классов на лету
	Форма.фОптимизация.Доступность(0);
	Форма.фОптимизация.Видимость(0);
	фОптимизация=1;
	ВключитьОптимизацию(фОптимизация); // сильное ускорение создания тестовых классов и быстрое открытие обработки!
	
	ОбработатьКоманднуюСтроку();
	фОтключитьПропускТестов = 0;
                                            
	гЗагрузчикТестов = СоздатьОбъект("ЗагрузчикТестов");

	гЗагрузчикТестов.ЗагрузитьДополнительныеКлассы(КаталогИБ()+"UnitTests\User");
	
    СписокКлассов = гЗагрузчикТестов.ПолучитьСписокВсехКлассовЮнитТестовЗагруженныхВ1С(гПрефиксИменТестовыхКлассов);
	СписокКлассов.Выгрузить(СписокКлассовЮнитТестов);
    
	ПреобразоватьПредставлениеСпискаЮнитТестов();
    
	гРезультатТеста = СоздатьОбъект("РезультатТеста");
	ЗадатьСтатуснуюСтроку(гРезультатТеста.Итог());
	
	Если гфАвтотестирование=0 Тогда
		ВосстановитьНастройки();
		Возврат;
	КонецЕсли;

	фОптимизация=1; // при автотестировании удобна оптимизация
	//Форма.Обновить();
	Для ъ=1 По СписокКлассовЮнитТестов.РазмерСписка() Цикл
		СписокКлассовЮнитТестов.Пометка(ъ, 1);
	КонецЦикла;
	ЗагрузитьТесты();
	
	Если гфЗавершить1С=1 Тогда
		Форма.Закрыть(0);
		
		Сообщить("Успешно! Работа будет завершена");
		//Предупреждение("Успешно! Работа будет завершена");
		//глКонфигурация.ЗавершитьРаботу(0);
		ЗавершитьРаботуСистемы(0);
	КонецЕсли;
КонецПроцедуры

//============================================================
Процедура ПриЗакрытии()
	СохранитьНастройки();
	
	МетаИнфо = СоздатьОбъект("MetaInfoClasses");
	МетаИнфо.ОчиститьДанныеОптимизацииКлассов();
	
КонецПроцедуры

//======================================================================
Процедура ПоказатьЛогФайл()
	ЗапуститьПриложение(гРезультатТеста.ЛогФайл.ИмяЛогФайла);
КонецПроцедуры // ПоказатьЛогФайл()

гПрефиксИменТестовыхКлассов = "тесты";