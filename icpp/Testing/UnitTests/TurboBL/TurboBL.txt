
Функция Конт(Конт) Возврат Конт; КонецФункции
Функция Сам() Возврат Конт(Контекст); КонецФункции

Процедура TurboBLВключен() Экспорт
	Сам = Сам();
	Сам.ПроверитьНастройку("EnableTurboBL", 1);
	Сам.ПроверитьНастройку("TurboBL", 1);
КонецПроцедуры

Процедура ПроверитьПолучениеАтрибутаКонтекста(Парам1, Парам3=)
	Делегат=СоздатьОбъект("ДелегатФормы");
	Конт=Делегат.ОткрытьФорму(Парам1,, Парам3);
	Сам().ПроверитьРавенство(Конт.АтрибутМодуля, 1);
	
	Конт.АтрибутМодуля = 10;
	Сам().ПроверитьРавенство(Конт.АтрибутМодуля, 10);
КонецПроцедуры

Процедура ТестПолученияАтрибутаМодуляЧерезКонтекстФормы() Экспорт
	ПроверитьПолучениеАтрибутаКонтекста("Отчет.новый1#");
	ПроверитьПолучениеАтрибутаКонтекста("Отчет", КаталогИБ()+"ExtForms\ОтчетНовый1.ert");
	ПроверитьПолучениеАтрибутаКонтекста("Документ.Новый1");
	ПроверитьПолучениеАтрибутаКонтекста("Справочник.Новый2");
КонецПроцедуры

Процедура ПроверитьВызовМетодаКонтекста(Парам1, Парам3=)
	Сам = Сам();
	Делегат=СоздатьОбъект("ДелегатФормы");
	Конт=Делегат.ОткрытьФорму(Парам1,, Парам3);
	
	Сам.ПроверитьРавенство(Конт.АтрибутМодуля, 1);
	Сам.ПроверитьРавенство(Конт.ПолучитьРеквизит_АтрибутМодуля(), 1);
	Конт.УстановитьРеквизит_АтрибутМодуля(2);
	Сам.ПроверитьРавенство(Конт.АтрибутМодуля, 2);
КонецПроцедуры

Процедура ТестВызовМетодаЧерезКонтекст() Экспорт
	ПроверитьВызовМетодаКонтекста("Отчет.новый1#");
	ПроверитьВызовМетодаКонтекста("Отчет", КаталогИБ()+"ExtForms\ОтчетНовый1.ert");
КонецПроцедуры

Процедура Тест_ПолучениеУстановкаСпособаВызоваМетодаКонтекста() Экспорт
	Сам = Сам();
	Конт=Сам.ОткрытьФорму("Отчет#",, КаталогИБ()+"ExtForms\ОтчетНовый1.ert");
	Сам.ПроверитьРавенство(Конт.__ВызыватьМетодыКакСобытия(), 1);
	Сам.ПроверитьРавенство(Конт.__ВызыватьМетодыКакСобытия("0"), 1);
	Сам.ПроверитьРавенство(Конт.__CallMethodsAsEvents(''), 0);
	Сам.ПроверитьРавенство(Конт.__ВызыватьМетодыКакСобытия(1), 0);
	Сам.ПроверитьРавенство(Конт.__ВызыватьМетодыКакСобытия(), 1);
КонецПроцедуры

Процедура ТестВызовВложенногоМетодаКонтекста() Экспорт
	Сам = Сам();
	Конт=Сам.ОткрытьФорму("Отчет",, КаталогИБ()+"ExtForms\ОтчетНовый1.ert");
	
	Сам.ПроверитьРавенство(Конт.АтрибутМодуля, 1);
	Сам.ПроверитьРавенство(Конт.ПолучитьРеквизит_АтрибутМодуля(), 1);
	Сам.ПроверитьРавенство(Конт.ВложенныйВызов(), 1);
КонецПроцедуры

Функция ЗаполнитьТзНаФорме(Конт)
	тзНаФорме=Конт.тзНаФорме;
	тзНаФорме.КоличествоСтрок(2);
	тзНаФорме.ТекущаяСтрока(1);
	Возврат тзНаФорме;
КонецФункции

Процедура Тест_НомерСтрокиТзНаФорме_Совместимость() Экспорт
	Сам = Сам();
	Конт=Сам.ОткрытьФорму("Отчет#",, КаталогИБ()+"ExtForms\ОтчетНовый1.ert");
	//Сам.ПроверитьРавенство(Конт.__ВызыватьМетодыКакСобытия(), 1);
	
	тзНаФорме=ЗаполнитьТзНаФорме(Конт);
	тзНаФорме.ПолучитьСтрокуПоНомеру(2);
	Конт.ПолучитьРеквизит_АтрибутМодуля();
	Сам.ПроверитьРавенство(тзНаФорме.НомерСтроки, 1);
КонецПроцедуры

Процедура Тест_НомерСтрокиТзНаФорме() Экспорт
	Сам = Сам();
	Делегат1=СоздатьОбъект("ДелегатФормы");
	Конт1=Делегат1.ОткрытьФорму("Отчет#",, КаталогИБ()+"ExtForms\ОтчетНовый1.ert");
	Конт1.__ВызыватьМетодыКакСобытия(1);
	
	Делегат2=СоздатьОбъект("ДелегатФормы");
	Конт2=Делегат2.ОткрытьФорму("Отчет#",, КаталогИБ()+"ExtForms\ОтчетНовый1.ert");
	Конт2.__ВызыватьМетодыКакСобытия(0);
	Сам.ПроверитьНеравенство(Конт1, Конт2);
	
	тзНаФорме1=ЗаполнитьТзНаФорме(Конт1);
	тзНаФорме1.ПолучитьСтрокуПоНомеру(2);
	Конт1.ПолучитьРеквизит_АтрибутМодуля();
	Сам.ПроверитьРавенство(тзНаФорме1.НомерСтроки, 1);
	
	тзНаФорме2=ЗаполнитьТзНаФорме(Конт2);
	тзНаФорме2.ПолучитьСтрокуПоНомеру(2);
	Конт2.ПолучитьРеквизит_АтрибутМодуля();
	Сам.ПроверитьРавенство(тзНаФорме2.НомерСтроки, 2);
КонецПроцедуры


// -------------------------------------   --------------------------------------------------------
//
// тесты проверки работы таблиц (ИсходнаяТаблица) после вызова методов контекстов через ТурбоБЛ
//
// -------------------------------------   --------------------------------------------------------

Процедура ПроверитьПодключениеТаблицы(Таблица, ТестовыйОбъект) Экспорт
	ЗаголовокОкна="Тестовый заголовок";
	Таблица.ВывестиСекцию("Описатель");
	ТестовыйОбъект.ПроверитьРавенство(Таблица.Область(1, 2).Текст, "Тестовый заголовок");
КонецПроцедуры

Процедура ПроверитьПодключениеВторойТаблицы(Таблица, ТестовыйОбъект)
	ТестовоеВыражение=55;
	Таблица.Вывести();
	ТестовыйОбъект.ПроверитьРавенство(Таблица.Область(1, 1).Текст, "55");
КонецПроцедуры

Процедура Тест_ТаблицаВоВстроенномОтчете() Экспорт
	TurboBLВключен();

	Сам=Сам();

	Путь=КаталогИБ()+"UnitTests\FormEx\ТестИсходнойТаблицы.mxl";
	//Таблица=СоздатьОбъект("Таблица");
	////Сам.ЭмулироватьПадение1С(); Таблица.ИсходнаяТаблица(Путь);
	//Таблица.ИсходнаяТаблица(Путь);
	//ПроверитьПодключениеТаблицы(Таблица, Сам);
	
	Конт = 0;
	Сам().ОткрытьФорму("Отчет.новый1#", Конт);
	Конт = Сам().КонтекстФормы;

	//Таблица = Конт.ПолучитьТаблицу(); // TODO возможно лучше использовать способ без вызова ТурбоБЛ
	Таблица = глТаблица; // TODO возможно лучше использовать способ без вызова ТурбоБЛ
	Таблица.ИсходнаяТаблица(Путь);
	ПроверитьПодключениеТаблицы(Таблица, Сам);
	
	Конт.Сформировать();

	ПроверитьПодключениеТаблицы(Таблица, Сам);
	
	Таблица.ИсходнаяТаблица(Путь);
	ПроверитьПодключениеТаблицы(Таблица, Сам);
	
	Конт.Сформировать();

	ПроверитьПодключениеТаблицы(Таблица, Сам);
	
	Таблица.ИсходнаяТаблица(Путь);
	ПроверитьПодключениеТаблицы(Таблица, Сам);
	
	Конт.Сформировать();

	ПроверитьПодключениеТаблицы(Таблица, Сам);
	
	Таблица.ИсходнаяТаблица(Путь);
	ПроверитьПодключениеТаблицы(Таблица, Сам);
КонецПроцедуры

Процедура Тест_ТаблицаВоВнешнемОтчете() Экспорт
	TurboBLВключен();

	Сам=Сам();

	Путь=КаталогИБ()+"UnitTests\FormEx\ТестИсходнойТаблицы.mxl";
	//Таблица=СоздатьОбъект("Таблица");
	////Сам.ЭмулироватьПадение1С(); Таблица.ИсходнаяТаблица(Путь);
	//Таблица.ИсходнаяТаблица(Путь);
	//ПроверитьПодключениеТаблицы(Таблица, Сам);
	
	Конт = 0;
	Сам().ОткрытьФорму("Отчет#", Конт, КаталогИБ()+"ExtForms\ОтчетНовый1.ert");
	Конт = Сам().КонтекстФормы;

	//Таблица = Конт.ПолучитьТаблицу(); // TODO возможно лучше использовать способ без вызова ТурбоБЛ
	Таблица = глТаблица; // TODO возможно лучше использовать способ без вызова ТурбоБЛ
	Таблица.ИсходнаяТаблица(Путь);
	ПроверитьПодключениеТаблицы(Таблица, Сам);
	
	Конт.Сформировать();

	ПроверитьПодключениеТаблицы(Таблица, Сам);
	
	Таблица.ИсходнаяТаблица(Путь);
	ПроверитьПодключениеТаблицы(Таблица, Сам);
	
	Конт.Сформировать();

	ПроверитьПодключениеТаблицы(Таблица, Сам);
	
	Таблица.ИсходнаяТаблица(Путь);
	ПроверитьПодключениеТаблицы(Таблица, Сам);
	
	Конт.Сформировать();

	ПроверитьПодключениеТаблицы(Таблица, Сам);
	
	Таблица.ИсходнаяТаблица(Путь);
	ПроверитьПодключениеТаблицы(Таблица, Сам);
КонецПроцедуры


Процедура Тест_ТаблицаВоВнешнемОтчете_ИсходнаяТаблицаИзОтчета() Экспорт
	TurboBLВключен();

	Сам=Сам();

	Путь=КаталогИБ()+"UnitTests\FormEx\ТестИсходнойТаблицы.mxl";
	//Таблица=СоздатьОбъект("Таблица");
	////Сам.ЭмулироватьПадение1С(); Таблица.ИсходнаяТаблица(Путь);
	//Таблица.ИсходнаяТаблица(Путь);
	//ПроверитьПодключениеТаблицы(Таблица, Сам);
	
	Конт = 0;
	Сам().ОткрытьФорму("Отчет#", Конт, КаталогИБ()+"ExtForms\ОтчетНовый1.ert");
	Конт = Сам().КонтекстФормы;

	//Таблица = Конт.ПолучитьТаблицу(); // TODO возможно лучше использовать способ без вызова ТурбоБЛ
	Таблица = глТаблица; // TODO возможно лучше использовать способ без вызова ТурбоБЛ
	//Таблица.ИсходнаяТаблица(Путь);
	ПроверитьПодключениеТаблицы(Таблица, Сам);
	
	Конт.Сформировать();
	Конт.Сформировать();
	Конт.Сформировать();

	ПроверитьПодключениеТаблицы(Таблица, Сам);
	
	Конт.Сформировать();
	Конт.Сформировать();
	Конт.Сформировать();

	ПроверитьПодключениеТаблицы(Таблица, Сам);
	
	Конт.Сформировать();
	Конт.Сформировать();
	Конт.Сформировать();

	ПроверитьПодключениеТаблицы(Таблица, Сам);
	
КонецПроцедуры

// копия теста ВыполняемыйМодульТесты::ТестGetMethOfContextДляМодуляВстроенногоОтчета()
Процедура ТестПолучениеМетодовИСвойствИзКонтекстаВстроенногоОтчета() Экспорт
	ВМТесты = СоздатьОбъект("ВыполняемыйМодульТесты");
	ВМТесты.ТестGetMethOfContextДляМодуляВстроенногоОтчета();
КонецПроцедуры	// ТестМодуляФормыОтчета

// копия теста ВыполняемыйМодульТесты::ТестGetMethOfContextДляМодуляВнешнегоОтчета()
Процедура ТестПолучениеМетодовИСвойствИзКонтекстаВнешнегоОтчета() Экспорт
	ВМТесты = СоздатьОбъект("ВыполняемыйМодульТесты");
	ВМТесты.ТестGetMethOfContextДляМодуляВнешнегоОтчета();
КонецПроцедуры	// ТестМодуляФормыОтчета

//Процедура ПроверитьВызовМетодаКонтекста(Парам1, Парам3=)
//	Сам = Сам();
//	Делегат=СоздатьОбъект("ДелегатФормы");
//	Конт=Делегат.ОткрытьФорму(Парам1,, Парам3);
//	
//	Сам.ПроверитьРавенство(Конт.АтрибутМодуля, 1);
//	Сам.ПроверитьРавенство(Конт.ПолучитьРеквизит_АтрибутМодуля(), 1);
//	Конт.УстановитьРеквизит_АтрибутМодуля(2);
//	Сам.ПроверитьРавенство(Конт.АтрибутМодуля, 2);
//КонецПроцедуры

Процедура ТестВызовМетодаСПараметрамиПоУмолчаниюЧерезКонтекст0() Экспорт
	Сам = Сам();
	
	Парам3 = КаталогИБ()+"ExtForms\ОтчетНовый1.ert";
	Конт = Сам.ОткрытьФорму("Отчет#",, Парам3);

	Сам.ПроверитьРавенство(Конт.ВызовСПараметрамиПоУмолчанию("Строка2", 2), "Строка2,2");
КонецПроцедуры

Процедура ТестВызовМетодаСПараметрамиПоУмолчаниюЧерезКонтекст() Экспорт
	Сам = Сам();
	
	Парам3 = КаталогИБ()+"ExtForms\ОтчетНовый1.ert";
	Конт = Сам.ОткрытьФорму("Отчет#",, Парам3);

	Сам.ПроверитьРавенство(Конт.ВызовСПараметрамиПоУмолчанию(), "Строка,1");
КонецПроцедуры

Процедура ТестВызовМетодаСПараметрамиПоУмолчаниюЧерезКонтекст2() Экспорт
	Сам = Сам();
	
	Парам3 = КаталогИБ()+"ExtForms\ОтчетНовый1.ert";
	Конт = Сам.ОткрытьФорму("Отчет#",, Парам3);

	Сам.ПроверитьРавенство(Конт.ВызовСПараметрамиПоУмолчанию(""), ",1");
КонецПроцедуры

Процедура ТестВызовМетодаСПараметрамиПоУмолчаниюЧерезКонтекст3() Экспорт
	Сам = Сам();
	
	Парам3 = КаталогИБ()+"ExtForms\ОтчетНовый1.ert";
	Конт = Сам.ОткрытьФорму("Отчет#",, Парам3);

	Сам.ПроверитьРавенство(Конт.ВызовСПараметрамиПоУмолчанию(, 2), "Строка,2");
КонецПроцедуры

Процедура Тест_Система_ОбновитьДанныеГК() Экспорт
	// дубль соответствующего теста из тестов класса Система
	Сам = Сам();
	
//Предупреждение(1);	
	ПутьКТестовойФорме = КаталогИБ()+"ExtForms\ОтчетНовый1.ert";
	КонтФормы = Сам.ОткрытьФорму("Отчет",, ПутьКТестовойФорме);

	Информатор = СоздатьОбъект("Информатор");	
	ТабМетодовИсходная = Информатор.ПолучитьТаблицуМетодов(КонтФормы);
	ТабСвойствИсходная = Информатор.ПолучитьТаблицуСвойств(КонтФормы);
//ТабМетодовИсходная.ВыбратьСтроку();
//ТабСвойствИсходная.ВыбратьСтроку();
//Предупреждение(2);	
	Система = СоздатьОбъект("Система");
	Система.ОбновитьДанныеГК(КонтФормы);
//Предупреждение(3);	

	ТабМетодовПослеОбновления = Информатор.ПолучитьТаблицуМетодов(КонтФормы);
	ТабСвойствПослеОбновления = Информатор.ПолучитьТаблицуСвойств(КонтФормы);
//ТабМетодовПослеОбновления.ВыбратьСтроку();
//ТабСвойствПослеОбновления.ВыбратьСтроку();
	
	Сам.ПроверитьРавенствоТаблиц(ТабМетодовИсходная, ТабМетодовПослеОбновления, "NameEng,NameRus,Number,HasRetVal,NParams", "NameEng,NameRus,Number,HasRetVal,NParams");
	Сам.ПроверитьРавенствоТаблиц(ТабСвойствИсходная, ТабСвойствПослеОбновления, "NameEng,NameRus,Number,IsReadable,IsWritable", "NameEng,NameRus,Number,IsReadable,IsWritable");
//Предупреждение(10);	
КонецПроцедуры

Функция Добавить_ДопСвойства(Конт)
	вирт().ПроверитьИсключениеНаЧтениеАтрибута(Конт, "_ДопСвойства");
	
	Структура = СоздатьОбъект("Структура");
	л_ДопСвойства = СоздатьОбъект("АссоциативныйВектор");
	Структура.Вставить("_ДопСвойства", л_ДопСвойства);
	
	Конт.__ДобавитьКонтекст(Структура);
	вирт().ПроверитьИсключение(Конт, "__ДобавитьКонтекст", Структура);
	
	//Структура = 0;
	л_ДопСвойства = 0;
	Возврат Структура;
КонецФункции

Процедура Тест_КонтекстФормы___ДобавитьКонтекст_Ошибки() Экспорт
	ПутьКФорме = КаталогИБ()+"ExtForms\ОтчетНовый1.ert";
	Конт = вирт().ОткрытьФорму("Отчет", , ПутьКФорме);
	
	вирт().ПроверитьИсключение(Конт, "_ДобавитьКонтекст");
	вирт().ПроверитьИсключение(Конт, "_ДобавитьКонтекст", 1);
	вирт().ПроверитьИсключение(Конт, "_ДобавитьКонтекст", Конт, 1);
КонецПроцедуры

Процедура Тест_КонтекстФормы___ДобавитьКонтекст_ДопСвойства() Экспорт
	//Сам = Сам();

	ПутьКФорме = КаталогИБ()+"ExtForms\ОтчетНовый1.ert";
	Конт = вирт().ОткрытьФорму("Отчет", , ПутьКФорме);
	
	Информатор = СоздатьОбъект("Информатор");
	ИсходнаяТабМетодов = Информатор.ПолучитьТаблицуМетодов(Конт);
	ИсходнаяТабСвойств = Информатор.ПолучитьТаблицуСвойств(Конт);
	//ИсходнаяТабМетодов // :ТаблицаЗначений
	//ИсходнаяТабСвойств // :ТаблицаЗначений
	
	лИсходныйПрототип = СоздатьОбъект("Структура");
	ИсходнаяТабМетодов_ДобавляемогоКонтекста = Информатор.ПолучитьТаблицуМетодов(лИсходныйПрототип);
	ИсходнаяТабСвойств_ДобавляемогоКонтекста = Информатор.ПолучитьТаблицуСвойств(лИсходныйПрототип);
	//ИсходнаяТабМетодов_ДобавляемогоКонтекста // :ТаблицаЗначений
	//ИсходнаяТабСвойств_ДобавляемогоКонтекста // :ТаблицаЗначений
	
	Добавить_ДопСвойства(Конт);

	ТабМетодов = Информатор.ПолучитьТаблицуМетодов(Конт);
	ТабСвойств = Информатор.ПолучитьТаблицуСвойств(Конт);
	//ТабМетодов // :ТаблицаЗначений
	//ТабСвойств // :ТаблицаЗначений

	лКоличествоПользовательскихМетодов = 0;
	лКоличествоПользовательскихСвойств = 1;
	
	вирт().ПроверитьРавенство(ТабМетодов.КоличествоСтрок(), ИсходнаяТабМетодов.КоличествоСтрок() + ИсходнаяТабМетодов_ДобавляемогоКонтекста.КоличествоСтрок() + лКоличествоПользовательскихМетодов);
	вирт().ПроверитьРавенство(ТабСвойств.КоличествоСтрок(), ИсходнаяТабСвойств.КоличествоСтрок() + ИсходнаяТабСвойств_ДобавляемогоКонтекста.КоличествоСтрок() + лКоличествоПользовательскихСвойств);
	
	вирт().ПроверитьТипЗначения(Конт._ДопСвойства, "АссоциативныйВектор");
	вирт().ПроверитьРавенство(Конт._ДопСвойства.Количество(), 0);
	
	лИмяЗначения = "НовоеИмя1";
	
	лСохраненноеЗначение = 1;
	лЗначение = 1; // одинаковое с предыдущим, но нельзя для полной гарантии юзать лЗначение = лСохраненноеЗначение;
	
	//Перехватчик.ДобавитьСвойствоККонтекстуФормы(Конт, лИмяЗначения, лЗначение);
	Конт._ДопСвойства.Добавить(лЗначение, лИмяЗначения);

	вирт().ПроверитьРавенство(лЗначение, лСохраненноеЗначение);
	
	//вирт().ПроверитьРавенство(Конт.НовоеИмя1, лСохраненноеЗначение);
	вирт().ПроверитьРавенство(Конт._ДопСвойства.Количество(), 1);
	вирт().ПроверитьРавенство(Конт._ДопСвойства.Получить(лИмяЗначения), лСохраненноеЗначение);

	лИмяЗначения2 = "НовоеИмя2";
	
	лСохраненноеЗначение2 = 10;
	лЗначение2 = 10; // одинаковое с предыдущим, но нельзя для полной гарантии юзать лЗначение = лСохраненноеЗначение;

	//Перехватчик.ДобавитьСвойствоККонтекстуФормы(Конт, лИмяЗначения2, лЗначение2);
	Конт._ДопСвойства.Добавить(лЗначение2, лИмяЗначения2);

	вирт().ПроверитьРавенство(лЗначение2, лСохраненноеЗначение2);
	
	//вирт().ПроверитьРавенство(Конт.НовоеИмя2, лСохраненноеЗначение2);
	//вирт().ПроверитьРавенство(Конт.НовоеИмя1, лСохраненноеЗначение);
	вирт().ПроверитьРавенство(Конт._ДопСвойства.Количество(), 2);
	вирт().ПроверитьРавенство(Конт._ДопСвойства.Получить(лИмяЗначения2), лСохраненноеЗначение2);
	вирт().ПроверитьРавенство(Конт._ДопСвойства.Получить(лИмяЗначения), лСохраненноеЗначение);
	
	вирт().ЗакрытьФорму();
	
	вирт().ПроверитьТипЗначения(Конт, "");

	//вирт().ПроверитьИсключениеНаЧтениеАтрибута(Конт, лИмяЗначения2);
	//вирт().ПроверитьИсключениеНаЧтениеАтрибута(Конт, лИмяЗначения);
КонецПроцедуры

Процедура Тест_КонтекстФормы___ДобавитьКонтекст_ДопСвойства_ПроверитьДеструктор() Экспорт
	Сам = Сам();
	
	ПутьКФорме = КаталогИБ()+"ExtForms\ОтчетНовый1.ert";
	Конт = Сам.ОткрытьФорму("Отчет", , ПутьКФорме);

	//лИсходнаяСтруктура = Добавить_ДопСвойства(Конт);
	//лИсходнаяСтруктура = 0;
	вирт().ПроверитьИсключениеНаЧтениеАтрибута(Конт, "_ДопСвойства");
	
	Структура = СоздатьОбъект("Структура");
	л_ДопСвойства = СоздатьОбъект("АссоциативныйВектор");
	Структура.Вставить("_ДопСвойства", л_ДопСвойства);
	
	Конт.__ДобавитьКонтекст(Структура);
	//вирт().ПроверитьИсключение(Конт, "__ДобавитьКонтекст", Структура);
	
	//Структура = 0;
	л_ДопСвойства = 0;
	Структура = 0;
	
	вирт().ПроверитьТипЗначения(Конт._ДопСвойства, "АссоциативныйВектор");
	
	лИмяЗначения = "НовоеИмя1";
	
	Объект = СоздатьОбъект("ООППредок");
	Журнал=Объект.ПолучитьЖурналВызовов();

	лЗначение = Объект;
	// Конт // : ГрупповойКонтекст
	// Конт._ДопСвойства // : АссоциативныйВектор
	//Перехватчик.ДобавитьСвойствоККонтекстуФормы(Конт, лИмяЗначения, лЗначение);
	Конт._ДопСвойства.Добавить(лЗначение, лИмяЗначения);
	Сам.ПроверитьРавенство(Конт._ДопСвойства.Количество(), 1);

	Объект=""; лЗначение = "";
	вирт().ПроверитьРавенство(Журнал.стрЖурнал, "ООППредок::Конструктор, ООППредок::ПолучитьЖурналВызовов");

	вирт().ЗакрытьФорму();

	вирт().ПроверитьТипЗначения(Конт, "");	
	вирт().ПроверитьРавенство(Журнал.стрЖурнал, "ООППредок::Конструктор, ООППредок::ПолучитьЖурналВызовов, ООППредок::Деструктор");
КонецПроцедуры

Процедура Тест_КонтекстФормы___ДобавитьКонтекст_ДопСвойства_ПроверитьДеструктор2() Экспорт
	Сам = Сам();
	
	ПутьКФорме = КаталогИБ()+"ExtForms\ОтчетНовый1.ert";
	Конт = Сам.ОткрытьФорму("Отчет", , ПутьКФорме);

	вирт().ПроверитьИсключениеНаЧтениеАтрибута(Конт, "_ДопСвойства");
	
	Структура = СоздатьОбъект("Структура");
	л_ДопСвойства = СоздатьОбъект("АссоциативныйВектор");
	Структура.Вставить("_ДопСвойства", л_ДопСвойства);
	
	Конт.__ДобавитьКонтекст(Структура);
	
	Структура_Копия = Структура;
	
	вирт().ПроверитьИсключение(Конт, "__ДобавитьКонтекст", Структура); // из-за этой строки тест не проходит!
	Сам.ПроверитьРавенство(Структура, Структура_Копия);
	
	л_ДопСвойства = 0;
	Структура = 0; 
	Структура_Копия = 0;
	
	вирт().ПроверитьТипЗначения(Конт._ДопСвойства, "АссоциативныйВектор");
	
	лИмяЗначения = "НовоеИмя1";
	
	Объект = СоздатьОбъект("ООППредок");
	Журнал=Объект.ПолучитьЖурналВызовов();

	лЗначение = Объект;
	Конт._ДопСвойства.Добавить(лЗначение, лИмяЗначения);
	Сам.ПроверитьРавенство(Конт._ДопСвойства.Количество(), 1);

	Объект=""; лЗначение = "";
	вирт().ПроверитьРавенство(Журнал.стрЖурнал, "ООППредок::Конструктор, ООППредок::ПолучитьЖурналВызовов");

	вирт().ЗакрытьФорму();

	вирт().ПроверитьТипЗначения(Конт, "");	
	вирт().ПроверитьРавенство(Журнал.стрЖурнал, "ООППредок::Конструктор, ООППредок::ПолучитьЖурналВызовов, ООППредок::Деструктор");
КонецПроцедуры

Процедура Тест_КонтекстФормы___ДобавитьКонтекст_ДопСвойства_ПроверитьДоступ() Экспорт
	Сам = Сам();
	
	ПутьКФорме = КаталогИБ()+"ExtForms\ОтчетНовый1.ert";
	Конт = Сам.ОткрытьФорму("Отчет", , ПутьКФорме);

	Добавить_ДопСвойства(Конт);
	
	лТекущаяКоллекция = Конт._ДопСвойства;
	вирт().ПроверитьТипЗначения(Конт._ДопСвойства, "АссоциативныйВектор");
	
	лНоваяКоллекция = СоздатьОбъект("АссоциативныйВектор");
	//вирт().ПроверитьИсключениеНаИзменениеАтрибута(Конт, "_ДопСвойства", лНоваяКоллекция);
	Конт._ДопСвойства = лНоваяКоллекция;
	вирт().ПроверитьТипЗначения(Конт._ДопСвойства, "АссоциативныйВектор");
	Сам.ПроверитьНеРавенство(лТекущаяКоллекция, Конт._ДопСвойства);
	
	лНоваяКоллекция = СоздатьОбъект("Вектор");
	//вирт().ПроверитьИсключениеНаИзменениеАтрибута(Конт, "_ДопСвойства", лНоваяКоллекция);
	//вирт().ПроверитьТипЗначения(Конт._ДопСвойства, "АссоциативныйВектор");
	Конт._ДопСвойства = лНоваяКоллекция;
	вирт().ПроверитьТипЗначения(Конт._ДопСвойства, "Вектор");
	Сам.ПроверитьНеРавенство(лТекущаяКоллекция, Конт._ДопСвойства);
	
	лНоваяКоллекция = СоздатьОбъект("СписокЗначений");
	//вирт().ПроверитьИсключениеНаИзменениеАтрибута(Конт, "_ДопСвойства", лНоваяКоллекция);
	//вирт().ПроверитьТипЗначения(Конт._ДопСвойства, "АссоциативныйВектор");
	Конт._ДопСвойства = лНоваяКоллекция;
	вирт().ПроверитьТипЗначения(Конт._ДопСвойства, "СписокЗначений");
	Сам.ПроверитьНеРавенство(лТекущаяКоллекция, Конт._ДопСвойства);
КонецПроцедуры

Процедура Тест_КонтекстФормы___ДобавитьКонтекст_ДопСвойства_НесколькоФорм() Экспорт
	Сам = Сам();
	
	ПутьКФорме = КаталогИБ()+"ExtForms\ОтчетНовый1.ert";
	Конт = Сам.ОткрытьФорму("Отчет", , ПутьКФорме);
	
	ДелегатФормы = СоздатьОбъект("ДелегатФормы");
	Конт2 = ДелегатФормы.ОткрытьФорму("Отчет#", , ПутьКФорме);
	
	Добавить_ДопСвойства(Конт);
	Добавить_ДопСвойства(Конт2);
	
	вирт().ПроверитьТипЗначения(Конт._ДопСвойства, "АссоциативныйВектор");
	
	лИмяЗначения = "НовоеИмя1";
	
	лСохраненноеЗначение = 1;
	лЗначение = 1; // одинаковое с предыдущим, но нельзя для полной гарантии юзать лЗначение = лСохраненноеЗначение;
	
	//Перехватчик.ДобавитьСвойствоККонтекстуФормы(Конт, лИмяЗначения, лЗначение);
	Конт._ДопСвойства.Добавить(лЗначение, лИмяЗначения);

	Сам.ПроверитьРавенство(лЗначение, лСохраненноеЗначение);
	
	//Сам.ПроверитьРавенство(Конт.НовоеИмя1, лСохраненноеЗначение);
	Сам.ПроверитьРавенство(Конт._ДопСвойства.Количество(), 1);
	Сам.ПроверитьРавенство(Конт._ДопСвойства.Получить(лИмяЗначения), лСохраненноеЗначение);

	Сам.ПроверитьРавенство(Конт2._ДопСвойства.Количество(), 0);

	лИмяЗначения2 = "НовоеИмя2";
	
	лСохраненноеЗначение2 = 10;
	лЗначение2 = 10; // одинаковое с предыдущим, но нельзя для полной гарантии юзать лЗначение = лСохраненноеЗначение;

	//Перехватчик.ДобавитьСвойствоККонтекстуФормы(Конт, лИмяЗначения2, лЗначение2);
	Конт2._ДопСвойства.Добавить(лЗначение2, лИмяЗначения2);

	Сам.ПроверитьРавенство(лЗначение2, лСохраненноеЗначение2);
	
	//Сам.ПроверитьРавенство(Конт.НовоеИмя2, лСохраненноеЗначение2);
	//Сам.ПроверитьРавенство(Конт.НовоеИмя1, лСохраненноеЗначение);
	Сам.ПроверитьРавенство(Конт._ДопСвойства.Количество(), 1);
	Сам.ПроверитьРавенство(Конт2._ДопСвойства.Количество(), 1);
	Сам.ПроверитьРавенство(Конт2._ДопСвойства.Получить(лИмяЗначения2), лСохраненноеЗначение2);
	Сам.ПроверитьРавенство(Конт._ДопСвойства.Получить(лИмяЗначения), лСохраненноеЗначение);
	
	ДелегатФормы = 0;
	вирт().ПроверитьТипЗначения(Конт2, "");
	
	ДелегатФормы = СоздатьОбъект("ДелегатФормы");
	Конт2 = ДелегатФормы.ОткрытьФорму("Отчет#", , ПутьКФорме);
	Добавить_ДопСвойства(Конт2);
	Сам.ПроверитьРавенство(Конт2._ДопСвойства.Количество(), 0);

	вирт().ЗакрытьФорму();
	
	вирт().ПроверитьТипЗначения(Конт, "");
КонецПроцедуры

Процедура Тест_КонтекстФормы___ДобавитьКонтекст_ИзменениеИсходногоКонтекста() Экспорт
	Сам = Сам();
	
	ПутьКФорме = КаталогИБ()+"ExtForms\ОтчетНовый1.ert";
	Конт = Сам.ОткрытьФорму("Отчет", , ПутьКФорме);
	
	Информатор = СоздатьОбъект("Информатор");
	ИсходнаяТабМетодов = Информатор.ПолучитьТаблицуМетодов(Конт);
	ИсходнаяТабСвойств = Информатор.ПолучитьТаблицуСвойств(Конт);
	
	лИсходныйПрототип = СоздатьОбъект("Структура");
	ИсходнаяТабМетодов_ДобавляемогоКонтекста = Информатор.ПолучитьТаблицуМетодов(лИсходныйПрототип);
	ИсходнаяТабСвойств_ДобавляемогоКонтекста = Информатор.ПолучитьТаблицуСвойств(лИсходныйПрототип);
	
	лИсходнаяСтруктура = Добавить_ДопСвойства(Конт);
	лКоллекция = лИсходнаяСтруктура._ДопСвойства;

	ТабМетодов = Информатор.ПолучитьТаблицуМетодов(Конт);
	ТабСвойств = Информатор.ПолучитьТаблицуСвойств(Конт);

	лКоличествоПользовательскихМетодов = 0;
	лКоличествоПользовательскихСвойств = 1;
	
	вирт().ПроверитьРавенство(ТабМетодов.КоличествоСтрок(), ИсходнаяТабМетодов.КоличествоСтрок() + ИсходнаяТабМетодов_ДобавляемогоКонтекста.КоличествоСтрок() + лКоличествоПользовательскихМетодов);
	вирт().ПроверитьРавенство(ТабСвойств.КоличествоСтрок(), ИсходнаяТабСвойств.КоличествоСтрок() + ИсходнаяТабСвойств_ДобавляемогоКонтекста.КоличествоСтрок() + лКоличествоПользовательскихСвойств);
	
	вирт().ПроверитьТипЗначения(Конт._ДопСвойства, "АссоциативныйВектор");
	Сам.ПроверитьРавенство(Конт._ДопСвойства, лКоллекция);
	Сам.ПроверитьРавенство(Конт._ДопСвойства.Количество(), 0);

	лИмя_ЕщеОдноСвойство = "ЕщеОдноСвойство";
	лИсходнаяСтруктура.Вставить(лИмя_ЕщеОдноСвойство, 1);
	вирт().ПроверитьИсключениеНаЧтениеАтрибута(Конт, лИмя_ЕщеОдноСвойство);
	//Конт._ДопСвойства.Вставить(лИмя_ЕщеОдноСвойство, 1);
	
	Сам.ПроверитьРавенство(лИсходнаяСтруктура.Количество(), 2);
	Сам.ПроверитьРавенство(Конт._ДопСвойства.Количество(), 0);
	
	вирт().ПроверитьРавенство(ТабМетодов.КоличествоСтрок(), ИсходнаяТабМетодов.КоличествоСтрок() + ИсходнаяТабМетодов_ДобавляемогоКонтекста.КоличествоСтрок() + лКоличествоПользовательскихМетодов);
	вирт().ПроверитьРавенство(ТабСвойств.КоличествоСтрок(), ИсходнаяТабСвойств.КоличествоСтрок() + ИсходнаяТабСвойств_ДобавляемогоКонтекста.КоличествоСтрок() + лКоличествоПользовательскихСвойств);
	
//	вирт().ПроверитьИсключение(Конт, "__ДобавитьКонтекст", лИсходнаяСтруктура);
//	//Конт.__ДобавитьКонтекст(лИсходнаяСтруктура);
//	
	Система = СоздатьОбъект("Система");
	Система.ОбновитьДанныеГК(Конт);

	ТабМетодов = Информатор.ПолучитьТаблицуМетодов(Конт);
	ТабСвойств = Информатор.ПолучитьТаблицуСвойств(Конт);

	лКоличествоПользовательскихСвойств = 2;
	
	вирт().ПроверитьРавенство(ТабМетодов.КоличествоСтрок(), ИсходнаяТабМетодов.КоличествоСтрок() + ИсходнаяТабМетодов_ДобавляемогоКонтекста.КоличествоСтрок() + лКоличествоПользовательскихМетодов);
	вирт().ПроверитьРавенство(ТабСвойств.КоличествоСтрок(), ИсходнаяТабСвойств.КоличествоСтрок() + ИсходнаяТабСвойств_ДобавляемогоКонтекста.КоличествоСтрок() + лКоличествоПользовательскихСвойств);

	вирт().ПроверитьТипЗначения(Конт._ДопСвойства, "АссоциативныйВектор");
	Сам.ПроверитьРавенство(Конт._ДопСвойства, лКоллекция);

	Сам.ПроверитьРавенство(Конт.ЕщеОдноСвойство, 1);
	
	вирт().ЗакрытьФорму();
	
	вирт().ПроверитьТипЗначения(Конт, "");
КонецПроцедуры

Процедура Тест_КонтекстФормы___ДобавитьКонтекст_ИзменениеЗначенияСвойстваИсходногоКонтекста() Экспорт
	Сам = Сам();
	
	ПутьКФорме = КаталогИБ()+"ExtForms\ОтчетНовый1.ert";
	Конт = Сам.ОткрытьФорму("Отчет", , ПутьКФорме);
	
	лИсходнаяСтруктура = Добавить_ДопСвойства(Конт);
	лИсходноеЗначение = лИсходнаяСтруктура._ДопСвойства;
	
	лНовоеЗначение = СоздатьОбъект("Вектор");
	лИсходнаяСтруктура._ДопСвойства = лНовоеЗначение;

	Сам.ПроверитьНеРавенство(лИсходноеЗначение, лНовоеЗначение);
	вирт().ПроверитьТипЗначения(лИсходнаяСтруктура._ДопСвойства, ТипЗначенияСтр(лНовоеЗначение));

	Сам.ПроверитьРавенство(Конт._ДопСвойства, лНовоеЗначение);
	Сам.ПроверитьРавенство(Конт._ДопСвойства, лИсходнаяСтруктура._ДопСвойства);
	вирт().ПроверитьТипЗначения(Конт._ДопСвойства, ТипЗначенияСтр(лНовоеЗначение));
КонецПроцедуры

Процедура Тест_КонтекстФормы___ДобавитьКонтекст_ЧерезВыполняемыйМодуль() Экспорт
	Сам = Сам();
	
	ПутьКФорме = КаталогИБ()+"ExtForms\ОтчетНовый1.ert";
	Конт = Сам.ОткрытьФорму("Отчет", , ПутьКФорме);
	
	вирт().ПроверитьИсключениеНаЧтениеАтрибута(Конт, "_ДопСвойства");
	
	Информатор = СоздатьОбъект("Информатор");
	ИсходнаяТабМетодов = Информатор.ПолучитьТаблицуМетодов(Конт);
	ИсходнаяТабСвойств = Информатор.ПолучитьТаблицуСвойств(Конт);
	
	лИсходныйПрототип = СоздатьОбъект("ВыполняемыйМодуль");
	ИсходнаяТабМетодов_ДобавляемогоКонтекста = Информатор.ПолучитьТаблицуМетодов(лИсходныйПрототип);
	ИсходнаяТабСвойств_ДобавляемогоКонтекста = Информатор.ПолучитьТаблицуСвойств(лИсходныйПрототип);
	
	л_ДопСвойства = СоздатьОбъект("АссоциативныйВектор");

	ВМ = СоздатьОбъект("ВыполняемыйМодуль");
	ВМ.УстановитьМодуль("Перем _ДопСвойства Экспорт;");
	ВМ.КомпилироватьИВыполнитьМодуль();
	ВМ._ДопСвойства = л_ДопСвойства;

//	ИсходнаяТабМетодов_ДобавляемогоКонтекста1 = Информатор.ПолучитьТаблицуМетодов(ВМ);
//	ИсходнаяТабСвойств_ДобавляемогоКонтекста1 = Информатор.ПолучитьТаблицуСвойств(ВМ);
//
//Сообщить("ИсходнаяТабМетодов_ДобавляемогоКонтекста");
//ИсходнаяТабМетодов_ДобавляемогоКонтекста.ВыбратьСтроку();	
//Сообщить("ИсходнаяТабМетодов_ДобавляемогоКонтекста1");
//ИсходнаяТабМетодов_ДобавляемогоКонтекста1.ВыбратьСтроку();	
//
//	вирт().ПроверитьРавенство(ИсходнаяТабМетодов_ДобавляемогоКонтекста1.КоличествоСтрок(), ИсходнаяТабМетодов_ДобавляемогоКонтекста.КоличествоСтрок());
//	вирт().ПроверитьРавенство(ИсходнаяТабСвойств_ДобавляемогоКонтекста1.КоличествоСтрок(), ИсходнаяТабСвойств_ДобавляемогоКонтекста.КоличествоСтрок()+1);
	
	Конт.__ДобавитьКонтекст(ВМ);
	вирт().ПроверитьИсключение(Конт, "__ДобавитьКонтекст", ВМ);
	
	ВМ = 0;
	//л_ДопСвойства = 0;

	ТабМетодов = Информатор.ПолучитьТаблицуМетодов(Конт);
	ТабСвойств = Информатор.ПолучитьТаблицуСвойств(Конт);

	лКоличествоПользовательскихМетодов = 0;
	лКоличествоПользовательскихСвойств = 1;
	
	// TODO у ВМ после добавления текста модуля добавляется первый метод без наименования и др.данных, поэтому +1
	вирт().ПроверитьРавенство(ТабМетодов.КоличествоСтрок(), ИсходнаяТабМетодов.КоличествоСтрок() + ИсходнаяТабМетодов_ДобавляемогоКонтекста.КоличествоСтрок() + лКоличествоПользовательскихМетодов + 1);
	вирт().ПроверитьРавенство(ТабСвойств.КоличествоСтрок(), ИсходнаяТабСвойств.КоличествоСтрок() + ИсходнаяТабСвойств_ДобавляемогоКонтекста.КоличествоСтрок() + лКоличествоПользовательскихСвойств);
	
	вирт().ПроверитьТипЗначения(Конт._ДопСвойства, "АссоциативныйВектор");
	Сам.ПроверитьРавенство(Конт._ДопСвойства, л_ДопСвойства);
	
	вирт().ЗакрытьФорму();
	
	вирт().ПроверитьТипЗначения(Конт, "");

	//вирт().ПроверитьИсключениеНаЧтениеАтрибута(Конт, лИмяЗначения2);
	//вирт().ПроверитьИсключениеНаЧтениеАтрибута(Конт, лИмяЗначения);
КонецПроцедуры

Процедура Тест_КонтекстФормы_ОткрытьФорму_БезЭлементовФормы() Экспорт
	Сам = Сам();
	
	ПутьКФорме = КаталогИБ()+"ExtForms\ОтчетБезЭлементовФормы.ert";
//Предупреждение(1);	
	вирт().ПроверитьИсключение(Сам, "ОткрытьФорму", "Отчет", , ПутьКФорме); //Конт = Сам.ОткрытьФорму("Отчет", , ПутьКФорме);
	
	//Сам.ПроверитьРавенство(Конт._ДопСвойства, лИсходнаяСтруктура._ДопСвойства);
	//вирт().ПроверитьТипЗначения(Конт._ДопСвойства, ТипЗначенияСтр(лНовоеЗначение));
КонецПроцедуры
