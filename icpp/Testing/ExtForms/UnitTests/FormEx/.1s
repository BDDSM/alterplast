Перем Журнал Экспорт;
Перем фКоличествоНажатийКлавиатуры;
Перем гРасширениеФормы;
Перем гРасширениеФормы2;
Перем гКоманда;

Перем гТаймер, гТаймер2;
Процедура ПриОткрытии()
	//Журнал // : ЖурналВызоваМетодов

	Журнал = Форма.Параметр;
	Если ПустоеЗначение(Журнал) = 1 Тогда
		Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	КонецЕсли;

	гКоманда = "";
	Параметры = Форма.Параметр;
	Если ТипЗначенияСтр(Параметры) = "СписокЗначений" Тогда
		гКоманда = Параметры.Получить("Команда");

		Журнал = Параметры.Получить("Журнал");
		Если ПустоеЗначение(Журнал) = 1 Тогда
			Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
		КонецЕсли;
	КонецЕсли;
	
	Если гКоманда = "ЭмулироватьКлавиатуру_И_Закрыть" Тогда
		Форма.Параметр = Журнал;
		// для правильного срабатывания событий клавиатуры от формы событие клавы генерится после открытия !
	КонецЕсли;
	
	//Форма.Параметр = Журнал;
КонецПроцедуры
      
Процедура ПослеОткрытия()
	Журнал.ДобавитьЗапись("Форма::ПослеОткрытия");

	фКоличествоНажатийКлавиатуры = 0;

	Если гКоманда = "ЭмулироватьКлавиатуру_И_Закрыть" Тогда
		Сервис = СоздатьОбъект("Сервис");
		Сервис.ЭмулироватьКлавиатуру("{TAB}", 1);
	
		Форма.Закрыть(0);
	КонецЕсли;
КонецПроцедуры

Процедура ПослеЗакрытия()
	Журнал.ДобавитьЗапись("Форма::ПослеЗакрытия");
КонецПроцедуры

Процедура ПриНажатииКнопкиКлавиатуры(КодКлавиши, Alt, Shift, Ctrl, Символ, ФСО)
	//Журнал.ДобавитьЗапись("Форма::ПриНажатииКнопкиКлавиатуры<"+КодКлавиши+">");
	//Сообщить("Форма::ПриНажатииКнопкиКлавиатуры<"+КодКлавиши+">");
	
	фКоличествоНажатийКлавиатуры = фКоличествоНажатийКлавиатуры + 1;
//Сообщить("фКоличествоНажатийКлавиатуры = <"+фКоличествоНажатийКлавиатуры+">");
	
	Если фКоличествоНажатийКлавиатуры = 1 Тогда
		Журнал.ДобавитьЗапись("Форма::ПриНажатииКнопкиКлавиатуры<"+КодКлавиши+">");
	КонецЕсли;
КонецПроцедуры
                      
// обработчик не должен отработать
Процедура ПриОтжатииКнопкиКлавиатуры(КодКлавиши, Alt, Shift, Ctrl, Символ, ФСО, ЛишнийПараметр)
	//Журнал.ДобавитьЗапись("Форма::ПриНажатииКнопкиКлавиатуры<"+КодКлавиши+">");
	//Сообщить("Форма::ПриНажатииКнопкиКлавиатуры<"+КодКлавиши+">");
	
	фКоличествоНажатийКлавиатуры = фКоличествоНажатийКлавиатуры + 1;
//Сообщить("фКоличествоНажатийКлавиатуры = <"+фКоличествоНажатийКлавиатуры+">");
	
	Если фКоличествоНажатийКлавиатуры = 1 Тогда
		Журнал.ДобавитьЗапись("Форма::ПриОтжатииКнопкиКлавиатуры");
	КонецЕсли;
КонецПроцедуры

//*******************************************
Процедура Сформировать()  
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Таблица");
	Таб.ВывестиСекцию("Секция_1");		
	            
	ЭлементСправочника = 0;
//	СпрКлассы1СПП = СоздатьОбъект("Справочник.Классы1СПП");
//	СпрКлассы1СПП.ВыбратьЭлементы();
//	Пока СпрКлассы1СПП.ПолучитьЭлемент()=1  Цикл
//		Если СпрКлассы1СПП.ЭтоГруппа()=1 Тогда
//			Продолжить;
//		КонецЕсли;
//		ЭлементСправочника = СпрКлассы1СПП.ТекущийЭлемент();
//Сообщить("ЭлементСправочника = <"+ЭлементСправочника+">");
//Сообщить("ЭлементСправочника.Код = <"+ЭлементСправочника.Код+">");
//		
//		Прервать;
//	КонецЦикла;           
	ДОки = СоздатьОбъект("Документ.Новый1");
	Доки.ВыбратьДокументы('01.01.1980', РабочаяДата());
	Пока Доки.ПолучитьДокумент()=1  Цикл 
		ЭлементСправочника = Доки;
//Сообщить("ЭлементСправочника = <"+ЭлементСправочника+">");
	
		Прервать;
	КонецЦикла;      
	
	Таб.ТолькоПросмотр(1);
	Таб.Опции(0,0,0,0);
	Таб.Показать("");
 
КонецПроцедуры

Процедура Таймер() Экспорт                     
	Сообщить("Форма::Таймер");
	Журнал.ДобавитьЗапись("Форма::Таймер");

	//гРасширениеФормы.ОбработкаОжидания("", 0);
КонецПроцедуры	// Таймер

Процедура Таймер2() Экспорт                     
	Сообщить("Форма::Таймер2");
	Журнал.ДобавитьЗапись("Форма::Таймер2");

	//гРасширениеФормы2.ОбработкаОжидания("", 0);
КонецПроцедуры	// Таймер

Функция Таймер_Функция() Экспорт                     
	Сообщить("Форма::Таймер_Функция"); // не удалять !! нужно для доп.контроля удаления таймера после завершения работы тестирования
	Журнал.ДобавитьЗапись("Форма::Таймер_Функция");

	Сервис = СоздатьОбъект("Сервис");
	//Сервис.ОбработкаОжидания("",0);
	
КонецФункции

Процедура Таймер_НеверноеЧислоПараметров(Парам1) Экспорт                     
	Сообщить("Форма::Таймер_НеверноеЧислоПараметров");
	Журнал.ДобавитьЗапись("Форма::глТаймер_НеверноеЧислоПараметров");
КонецПроцедуры

Процедура ЗапуститьТаймер()
	//Если ТипЗначения(гРасширениеФормы) = 0 Тогда
	//	гРасширениеФормы = СоздатьОбъект("РасширениеФормы");
	//	гРасширениеФормы.УстановитьФорму(Форма);
	//КонецЕсли;
	//
	//гРасширениеФормы.ОбработкаОжидания("Таймер",100);
	Если ТипЗначения(гТаймер) = 0 Тогда
		гТаймер = СоздатьОбъект("Таймер");
	КонецЕсли;
	
	//Обработчик = СоздатьОбъект("FormEx_Таймер_Тесты");
	гТаймер.Остановить();
	//гТаймер.ЗадатьОбработчикВОбъекте(Обработчик, "Событие_Таймера1");
	гТаймер.ЗадатьОбработчикВМодулеФормы(Контекст, "Таймер");
	Обработчик = 0;
	гТаймер.Запустить(100);

КонецПроцедуры	// ЗапуститьТаймер

Процедура ИзменитьИнтервалТаймера()
	//Если ТипЗначения(гРасширениеФормы) = 0 Тогда
	//	гРасширениеФормы = СоздатьОбъект("РасширениеФормы");
	//	гРасширениеФормы.УстановитьФорму(Форма);
	//КонецЕсли;
	//гРасширениеФормы.ОбработкаОжидания("Таймер", 600);
	гТаймер.Остановить();
	гТаймер.Запустить(600);
КонецПроцедуры	// ИзменитьИнтервалТаймера

Процедура ЗапуститьТаймер2()
	//гРасширениеФормы2 = СоздатьОбъект("РасширениеФормы");
	//гРасширениеФормы2.УстановитьФорму(Форма);
	//
	//гРасширениеФормы2.ОбработкаОжидания("Таймер2",150);
	Если ТипЗначения(гТаймер2) = 0 Тогда
		гТаймер2 = СоздатьОбъект("Таймер");
	КонецЕсли;
	
	//Обработчик = СоздатьОбъект("FormEx_Таймер_Тесты");
	гТаймер2.Остановить();
	//гТаймер2.ЗадатьОбработчикВОбъекте(Обработчик, "Событие_Таймера2");
	гТаймер2.ЗадатьОбработчикВМодулеФормы(Контекст, "Таймер2");
	Обработчик = 0;
	гТаймер2.Запустить(150);
КонецПроцедуры	// ЗапуститьТаймер

Процедура ПроверитьТаймер()
	Сообщить("Журнал.стрЖурнал = <"+Журнал.стрЖурнал+">");
КонецПроцедуры	// ПроверитьТаймер

Процедура ЗапуститьГлобальныйТаймер()
	глЖурнал = СоздатьОбъект("ЖурналВызоваМетодов");
	//Сервис = СоздатьОбъект("Сервис");
	//Сервис.ОбработкаОжидания("глТаймер",100);
	Если ТипЗначения(глТаймер) = 0 Тогда
		глТаймер = СоздатьОбъект("Таймер");
	КонецЕсли;
	
	глТаймер.Остановить();
	глТаймер.ЗадатьОбработчикВГлобальномМодуле("глТаймер");
	глТаймер.Запустить(100);

	//Система = СоздатьОбъект("Система");
	//Система.Уснуть(500);
	//Сообщить("Проснулись");
КонецПроцедуры

Процедура ЗапуститьГлобальныйТаймер2()
	глЖурнал = СоздатьОбъект("ЖурналВызоваМетодов");
	//Сервис = СоздатьОбъект("Сервис");
	//Сервис.ОбработкаОжидания("глТаймер2",100);
	Если ТипЗначения(глТаймер2) = 0 Тогда
		глТаймер2 = СоздатьОбъект("Таймер");
	КонецЕсли;
	
	глТаймер2.Остановить();
	глТаймер2.ЗадатьОбработчикВГлобальномМодуле("глТаймер2");
	глТаймер2.Запустить(150);

	//Система = СоздатьОбъект("Система");
	//Система.Уснуть(500);
	//Сообщить("Проснулись");
КонецПроцедуры

Процедура ПроверитьГлобальныйТаймер()
	Сообщить("глЖурнал.стрЖурнал = <"+глЖурнал.стрЖурнал+">");
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)
	Сообщить("Форма::ОбработкаВнешнегоСобытия<"+Источник+">");
	глЖурнал.ДобавитьЗапись("Форма::ОбработкаВнешнегоСобытия<"+Источник+">");
КонецПроцедуры

Процедура СоздатьДопГлобальник(Журнал, стрТекстДопГлобальника)
	
	//стрТекстДопГлобальника = ТекстГлобальника;
	//Если стрТекстДопГлобальника = "" Тогда
	//	стрТекстДопГлобальника = ПолучитьТекстДопГлобальника();	
	//КонецЕсли;
	
	_Сервис = СоздатьОбъект("Сервис");
	_НомерДопГлобальника = _Сервис.ДобавитьГлобальныйМодуль(стрТекстДопГлобальника);
	//Сам().ПроверитьНеравенство(_НомерДопГлобальника, 0);

	//глУстановитьФлагОбработкиСобытийФормЕкс_ДопГлобальник(Журнал);
	_ВМ = СоздатьОбъект("ВыполняемыйМодуль");
	_ВМ.УстановитьМодуль("
	|Процедура УстановитьФлагОбработкиСобытийФормЕкс_ДопГлобальник(Журнал)
	|  глУстановитьФлагОбработкиСобытийФормЕкс_ДопГлобальник(Журнал);
	|КонецПроцедуры");
	_ВМ.КомпилироватьИВыполнитьМодуль();
	_ВМ.УстановитьФлагОбработкиСобытийФормЕкс_ДопГлобальник(Журнал);
КонецПроцедуры	// СоздатьДопГлобальник
             
Процедура ТестВызовШтатногоСобытия1С() Экспорт
	//Сам = Сам();

   	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	глУстановитьФлагОбработкиСобытийФормЕкс(Журнал);
	
	//Сервис = СоздатьОбъект("Сервис");
	//Сервис.ВнешнееСобытие("Тест", 1, 2);
	стрТекстДопГлобальника = "
		|Перем глЖурнал;
		|
		|Процедура глУстановитьФлагОбработкиСобытийФормЕкс_ДопГлобальник(Журнал) Экспорт
		|	//глОбрабатыватьСобытияФормЕкс = 1;
		|	//глФлагКоличествоНажатийКлавиатуры = 0;
		|	глЖурнал = Журнал;
		|КонецПроцедуры	// УстановитьФлагОбработкиСобытийФормЕкс
		|
		|Процедура ПриУдаленииДокумента(УдалДокум, Режим)
		//|	Если глОбрабатыватьСобытияФормЕкс = 0 Тогда
		//|		Возврат;
		//|	КонецЕсли;
		|
		|	Сообщить(""ДопГлобальный::ОбработкаВнешнегоСобытия<""+УдалДокум+"">"");
		|	глЖурнал.ДобавитьЗапись(""ДопГлобальный::ОбработкаВнешнегоСобытия<""+УдалДокум+"">"");
		|КонецПроцедуры";
		
	СоздатьДопГлобальник(Журнал, стрТекстДопГлобальника);
                                          
//   	Журнал2 = СоздатьОбъект("ЖурналВызоваМетодов");
//	ОткрытьТестовуюФорму(Журнал2);
//
//	Сам.ЗакрытьФорму(); 
	
	Сообщить("Журнал.стрЖурнал = <"+Журнал.стрЖурнал+">");
	//Сам.ПроверитьРавенство(Журнал.стрЖурнал, "");
	
КонецПроцедуры
             
Процедура Проверить_FormEx_ИконкаПредупреждения()
	//Предупреждение("Проверка", 30);
	Вопрос("Привет - простой таймер (знак !)", 1, 2);
	//Возврат;
	
	стрТекстДопГлобальника = "
	|Перем FormEx_ИконкаПредупреждения Экспорт;
	|
	|Процедура глДоп_Установить_FormEx_ИконкаПредупреждения(Значение) Экспорт
	|  FormEx_ИконкаПредупреждения = Значение;
	|КонецПроцедуры
	|
	|FormEx_ИконкаПредупреждения = 0;
	|";

	Журнал = СоздатьОбъект("ЖурналВызоваМетодов");
	_Сервис = СоздатьОбъект("Сервис");
	_НомерДопГлобальника = _Сервис.ДобавитьГлобальныйМодуль(стрТекстДопГлобальника);
	Если _НомерДопГлобальника = 0 Тогда
		Сообщить("ошибка _НомерДопГлобальника = 0");
		Возврат;
	КонецЕсли;

	_ВМ = СоздатьОбъект("ВыполняемыйМодуль");
	_ВМ.УстановитьМодуль("
	|Процедура Установить_FormEx_ИконкаПредупреждения(Значение)
	|  глДоп_Установить_FormEx_ИконкаПредупреждения(Значение);
	|КонецПроцедуры");
	_ВМ.КомпилироватьИВыполнитьМодуль();
	_ВМ.Установить_FormEx_ИконкаПредупреждения(1);
	
	//_Сервис.УдалитьГлобальныйМодуль(_НомерДопГлобальника);
	Предупреждение("Проверка - красный крестик");
	
	_Сервис.УдалитьГлобальныйМодуль(_НомерДопГлобальника);
КонецПроцедуры	// Проверить_FormEx_ИконкаПредупреждения

//Процедура ОбработкаЯчейкиТаблицы(ЗначениеРасшифровки, ФлагСтандОбр, ТаблИсточник, АдресЯчейки)
//	ФлагСтандОбр = 0;
//КонецПроцедуры // ОбработкаЯчейкиТаблицы 
        
////Процедура ПриДвойномНажатииПравойКнопки(Кон,Сос,Гор,Вер,ФСО)
//Процедура ПриДвойномНажатииПравойКнопки(Сос,Гор,Вер,ФСО)
//	Сообщить("лок ПриДвойномНажатииПравойКнопки");
//     //Если КонтрольФ("", 19) = 0 Тогда
//     //     Попытка
//     //          Если Кон.ТекущийДокумент.Выбран() = 1 Тогда
//     //               ОткрытьФорму("Отчет.editrekv",Кон.ТекущийДокумент);
//     //               Возврат; 
//     //          КонецЕсли;
//     //     Исключение
//     //     КонецПопытки;
//     //     Попытка
//     //          Если Кон.ТекущийЭлемент().Выбран() = 1 Тогда
//     //               ОткрытьФорму("Отчет.editrekv",Кон.ТекущийЭлемент());
//     //               Возврат;
//     //          КонецЕсли;
//     //     Исключение
//     //     КонецПопытки;
//     //КонецЕсли;
//КонецПроцедуры

//============================================================
Процедура ОбработкаЯчейкиТаблицы1(ЗначениеРасшифровки, ФлагСтандОбр, ТаблИсточник, АдресЯчейки)
	Сообщить("локальная ОбработкаЯчейкиТаблицы");	
	//ФлагСтандОбр = 0;
КонецПроцедуры // ОбработкаЯчейкиТаблицы 
             
Процедура ЗакрытьВсеОкна()
	Сервис = СоздатьОбъект("Сервис");
	//Сервис.ЗакрытьВсеОкна();
	Сервис.ОбработкаОжидания("ЗакрытьВсеОкна", 100);
КонецПроцедуры	// ЗакрытьВсеОкна

Функция ПолучитьПечатнуюТаблицуСИменами()  
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ТаблицаСИменами");
	Таб.ВывестиСекцию("Секция_1");		
	
	Возврат Таб;
 
КонецФункции

Процедура ПолучитьКартинку(Карт)
// процедура вызывается из объекта Картинка, расположенного на печатной форме
        Перем Лево,Верх,Ширина,Высота;
        ФормаРасш = СоздатьОбъект("РасширениеФормы");
        Лево = ФормаРасш.Лево;
        Верх = ФормаРасш.Верх;
        Лево = 0;
        Верх = 0;
        Ширина = ФормаРасш.Ширина;
        Высота = ФормаРасш.Высота;
        //АтрТекст = СоздатьОбъект("АтрибутФормы");
        //АтрТекст.УстановитьАтрибут(Форма,"Табл");
        //АтрТекст.ПолучитьКоординаты(Лево,Верх,Ширина,Высота);
        Карт.УстановитьКартинку(ФормаРасш.ПолучитьКартинку(Лево,Верх,Ширина,Высота));
КонецПроцедуры

Процедура ПоказатьКартинку()
	Таб=СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Таблица");

	ЭлементСправочника = "ЭлементСправочника";
	Таб.ВывестиСекцию("Секция_1");		
	
	Таб.ТолькоПросмотр(1);
	Таб.Опции(0,0,0,0);
	Таб.Показать("");
КонецПроцедуры

Попытка
	Сервис = СоздатьОбъект("Сервис");
Исключение
	ЗагрузитьВнешнююКомпоненту("formex.dll");
КонецПопытки;