
// Возможен режим автотестирования
// должна быть командная строка вида
//
// "C:\Program Files\1Cv77\Bin25\BIN\1CV7.exe" ENTERPRISE /D"G:\1C\1C++\Testing 1C++\" /N /U"G:\1C\1C++\Testing 1C++\" /T"g:\" /Lrus  /Команда:Тестировать /ExitAfterTest
//

Перем Форма Экспорт;
Перем MetaInfoClasses Экспорт;
Перем гЛогФайл;
Перем глФабрика1 Экспорт;

Перем глТест Экспорт;

Перем глТаблица Экспорт; // используется для тестов ТурбоБЛ и метода Таблица.ИсходнаяТаблица 

Перем глОбрабатыватьСобытияФормЕкс; 
Перем глФлагКоличествоНажатийКлавиатуры;
Перем глФлаг_ПриНажатииКнопкиКлавиатуры_ФСО Экспорт;
Перем глФлагОткрытьНовуюФормуВОбработчике_ПослеОткрытия Экспорт;

Перем глФлагЗаменятьФормуВСобытии_ЗагрузкеФормы Экспорт;
Перем глИмяОбъектаДляЗаменыФормыВСобытии_ЗагрузкеФормы Экспорт;

Перем глФлагЗаменятьФормуВСобытии_ПриЗагрузкеМодуляФормы Экспорт;
Перем глИмяОбъектаДляЗаменыФормыВСобытии_ПриЗагрузкеМодуляФормы Экспорт;

Перем глОбрабатыватьСобытие_ЗаписьСобытияЖурналаРегистрации Экспорт;
Перем глОбрабатыватьСобытие_ЗаписьПользовательскогоСобытияЖурналаРегистрации Экспорт;

Перем глЖурнал Экспорт; // : ЖурналВызоваМетодов

Перем глРасширениеФормы Экспорт;
Перем глТаймер Экспорт, глТаймер2 Экспорт;

Перем гФлагЗагрузкаБезТестирования;

Процедура Первая() // для проверки связки 1С++ и ФормЕкс при разном порядке загрузки
	Предупреждение("Первая");
КонецПроцедуры	// Первая

// все сообщения автоматом заносятся в лог-файл
Процедура Сообщить(Сообщение, Маркер="") Экспорт
	Message(Сообщение, Маркер);
	Если ПустоеЗначение(гЛогФайл) = 0 Тогда
		гЛогФайл.Сообщить(Сообщение);
	КонецЕсли;
КонецПроцедуры // Сообщить
//--------------------------------------------

Функция _глКаталогБезСлэша(__стр) Экспорт
	_стр=СокрЛП(__стр);
	Пока Прав(_стр,1)="\" Цикл
		_стр=Лев(_стр, СтрДлина(_стр) -1);
	КонецЦикла;
	Возврат _стр;
КонецФункции

//--------------------------------------------
Процедура спУстановитьТекущуюСтроку(спСписок, Значение) Экспорт
	номСтроки=спСписок.НайтиЗначение(Значение);
	Если номСтроки=0 Тогда Возврат; КонецЕсли;
	спСписок.ТекущаяСтрока(номСтроки);
КонецПроцедуры
//--------------------------------------------

Функция спТекущееЗначение(спСписок) Экспорт
	текСтрока=спСписок.ТекущаяСтрока();
	Если текСтрока=0 Тогда Возврат ""; КонецЕсли;
	Возврат спСписок.ПолучитьЗначение(текСтрока);
КонецФункции
//--------------------------------------------

Функция СоздатьСписок(Ид1="", Знач1="", Ид2="", Знач2="", Ид3="", Знач3="", Ид4="", Знач4="", Ид5="", Знач5="") Экспорт
	спСписок=СоздатьОбъект("СписокЗначений");
	Если Ид1<>"" Тогда спСписок.Установить(Ид1, Знач1); КонецЕсли;
	Если Ид2<>"" Тогда спСписок.Установить(Ид2, Знач2); КонецЕсли;
	Если Ид3<>"" Тогда спСписок.Установить(Ид3, Знач3); КонецЕсли;
	Если Ид4<>"" Тогда спСписок.Установить(Ид4, Знач4); КонецЕсли;
	Если Ид5<>"" Тогда спСписок.Установить(Ид5, Знач5); КонецЕсли;
	Возврат спСписок;
КонецФункции
//--------------------------------------------

Функция ПоУмолчанию(Параметр1, Параметр2) Экспорт
	Если ПустоеЗначение(Параметр1)=0 Тогда Возврат Параметр1; КонецЕсли;
	Возврат Параметр2;
КонецФункции
//--------------------------------------------

Функция стрСоединить(Строка1, Строка2, Разделитель=", ") Экспорт
	Если (ПустоеЗначение(Строка1)=1) Или (ПустоеЗначение(Строка2)=1) Тогда
		Возврат Строка1+Строка2;
	КонецЕсли;
	Возврат Строка1+Разделитель+Строка2;
КонецФункции
//--------------------------------------------

Процедура ВключитьОптимизацию(Режим) Экспорт
	MetaInfoClasses.УстановитьТекУстановки(Режим ,,);
КонецПроцедуры
//--------------------------------------------

Процедура ВключитьОтладку(Режим) Экспорт
	MetaInfoClasses.УстановитьТекУстановки(,, Режим);
КонецПроцедуры

//_____________________________________________________________________________
Функция НайтиФайлВнешнегоОтчета(ИмяОтчета, Знач сзПути) Экспорт
	Перем н, Путь;

	Если ТипЗначенияСтр(сзПути) <> "СписокЗначений" Тогда
		Путь = Строка(сзПути);
		сзПути = СоздатьОбъект("СписокЗначений");
		сзПути.ДобавитьЗначение(Путь);
	КонецЕсли;

	Для н = 1 По сзПути.РазмерСписка() Цикл
		Путь = сзПути.ПолучитьЗначение(н);
		Если ПустаяСтрока(Путь) = 1 Тогда Продолжить; КонецЕсли;

		Если ФС.СуществуетФайл(Путь + ИмяОтчета + ".ert") = 1 Тогда
			Возврат Путь + ИмяОтчета + ".ert";
		КонецЕсли;
	КонецЦикла;

	Если ФС.СуществуетФайл(КаталогИБ() + ИмяОтчета + ".ert") = 1 Тогда
		Возврат КаталогИБ() + ИмяОтчета + ".ert";
	ИначеЕсли ФС.СуществуетФайл(КаталогИБ() + "ExtForms\" + ИмяОтчета + ".ert") = 1 Тогда
		Возврат КаталогИБ() + "ExtForms\" + ИмяОтчета + ".ert";
	Иначе
		Возврат "" ;
	КонецЕсли;
КонецФункции

//_____________________________________________________________________________
//Пытается найти обработку, отчет или внешний отчет с указанным именем.
// - ИмяОбработки - строка с именем обработки/отчета. Без пути и расширения. Если последний
//   символ имени обработки - "#", то обработка откроется в новом окне.
// - Параметры - Это значение будет передано в качестве параметра в обработку.
// - Модально - Если 1, то форма будет открыта модально. По умолчанию 0.
// - Внешняя - Если 1, то сначала будет произведен поиск внешней обработки, и только в случае неуспеха -
//   обработки/отчета в конфигурации.
//   Если в этом параметре передана Строка или СписокЗначений, то они рассматривается как имя каталога,
//   в катором нужно поискать первым делом.
//
//Последовательность поиска:
// Если функция вызвана из внешнего отчета
//   1) Внешний отчет в том же каталоге, что и вызывающий отчет (если он внешний)
//   2) Внешний отчет в каталоге базы данных
//   3) Внешний отчет в каталоге ExtForms
//   4) Обработка
//   5) Отчет
// Если функция вызвана из объекта конфигурации
//   1) Обработка
//   2) Отчет
//   3) Внешний отчет в том же каталоге, что и вызывающий отчет (если он внешний)
//   4) Внешний отчет в каталоге базы данных
//   5) Внешний отчет в каталоге ExtForms
//
Функция ОткрытьОбработку(Знач ИмяОбработки, Параметры, Модально, Знач Внешняя, QuietMode = 0) Экспорт
	Перем Конт, Путь, Тип;
	Перем сзПути;
	Перем Диез;

	сзПути = СоздатьОбъект("СписокЗначений");

	Если ТипЗначения(Внешняя) = 2 Тогда
		сзПути.ДобавитьЗначение(Внешняя);
		Внешняя = 1;
	ИначеЕсли ТипЗначенияСтр(Внешняя) = "СписокЗначений" Тогда
		Для н = 1 По Внешняя.РазмерСписка() Цикл
			сзПути.ДобавитьЗначение( Внешняя.ПолучитьЗначение(н) );
		КонецЦикла;
		Внешняя = 1;
	КонецЕсли;

	ИмяОбработки = СокрЛП(ИмяОбработки);
	Если Прав(ИмяОбработки, 1) = "#" Тогда
		Диез = "#";
		ИмяОбработки = Лев(ИмяОбработки, СтрДлина(ИмяОбработки) - 1);
	Иначе
		Диез = "";
	КонецЕсли;

	Если (ПустаяСтрока(Путь) = 1) И (Внешняя = 0) Тогда
		Если Метаданные.Обработка(ИмяОбработки).Выбран() = 1 Тогда
			Тип = "Обработка";
		ИначеЕсли Метаданные.Отчет(ИмяОбработки).Выбран() = 1 Тогда
			Тип = "Отчет";
		Иначе
			Тип = "ВнешнийОтчет";
			Путь = НайтиФайлВнешнегоОтчета(ИмяОбработки, сзПути);
			Если Путь = "" Тогда
				Если QuietMode = 0 Тогда
					Сообщить("Не найдена обработка '" + ИмяОбработки + "'", "!");
				КонецЕсли;
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Тип = "ВнешнийОтчет";
		Путь = НайтиФайлВнешнегоОтчета(ИмяОбработки, сзПути);
		Если Путь = "" Тогда
			Если Метаданные.Обработка(ИмяОбработки).Выбран() = 1 Тогда
				Тип = "Обработка";
			ИначеЕсли Метаданные.Отчет(ИмяОбработки).Выбран() = 1 Тогда
				Тип = "Отчет";
			Иначе
				Если QuietMode = 0 Тогда
					Сообщить("Не найдена обработка '" + ИмяОбработки + "'", "!");
				КонецЕсли;
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Тип = "ВнешнийОтчет" Тогда
		Тип = "Отчет";
		Если Модально = 0 Тогда
			Возврат ОткрытьФорму(Тип + Диез, Параметры, Путь);
		Иначе
			Возврат ОткрытьФормуМодально(Тип + Диез, Параметры, Путь);
		КонецЕсли;
	Иначе
		Если Модально = 0 Тогда
			Возврат ОткрытьФорму(Тип + "." + ИмяОбработки + Диез, Параметры);
		Иначе
			Возврат ОткрытьФормуМодально(Тип + "." + ИмяОбработки + Диез, Параметры);
		КонецЕсли;
	КонецЕсли;
КонецФункции

//_____________________________________________________________________________
//ВнешнийОтчет - м.б. числом или строкой. Если строка, то внешний отчет первым делом ищется в указанном каталоге
Процедура РедакторТЗ(Знач ТЗ, Заголовок = "", Модально = 0, Знач ВнешнийОтчет = 0, АвтоШирина = 0, ТолькоПросмотр = 0) Экспорт
	Перем Путь, Сп, Тип;

	Попытка
		ТЗ = ТЗ.ПолучитьБазовыйКласс("ТаблицаЗначений");
	Исключение
	КонецПопытки;
	Сп = СоздатьОбъект("СписокЗначений");
	Сп.Установить("ТЗ", ТЗ);
	Сп.Установить("Заголовок", Заголовок);
	Сп.Установить("АвтоШирина", АвтоШирина);
	Сп.Установить("ТолькоПросмотр", ТолькоПросмотр);

	Если ОткрытьОбработку("РедакторТЗ#", Сп, Модально, ВнешнийОтчет) = 0 Тогда
		//Если ТипЗначенияСтр(ТЗ) = "ТаблицаЗначений" Тогда
		//	ТЗ.ВыбратьСтроку(, Заголовок, );
		//ИначеЕсли ТипЗначенияСтр(ТЗ) = "СписокЗначений" Тогда
		//	ТЗ.ВыбратьЗначение(, Заголовок,,, 0);
		//КонецЕсли;
	КонецЕсли;
КонецПроцедуры
   
Функция ВернутьПутьИзКонстантыХранилищаИлиПустуюСтроку()
	Если СтрДлина(СокрЛП(Константа.ХранилищеКомпонент)) = 0 Тогда
		Возврат "";
	КонецЕсли;    
	
	Возврат _глКаталогБезСлэша(Константа.ХранилищеКомпонент) +"\";
КонецФункции

Функция ЗагрузитьВК(ИмяДллФайла, ИмяОбъектаДляПроверки = "")
	Попытка
		лИТ = СоздатьОбъект(ИмяОбъектаДляПроверки);
	Исключение                   
		_стр =ВернутьПутьИзКонстантыХранилищаИлиПустуюСтроку();
		Если ЗагрузитьВнешнююКомпоненту(_стр +ИмяДллФайла) = 0 Тогда
			Сообщить("Не удалось загрузить ВК "+ИмяДллФайла, "!!!");
			//Сообщить("  Тестирование завершилось неудачей", "!!!");
			Возврат 0;
		КонецЕсли;
	КонецПопытки;
	Возврат 1;
КонецФункции

Функция Загрузить1СПП()
	//Попытка
	//	лИТ = СоздатьОбъект("ИндексированнаяТаблица");
	//Исключение                   
	//	_стр =ВернутьПутьИзКонстантыХранилищаИлиПустуюСтроку();
	//	Если ЗагрузитьВнешнююКомпоненту(_стр +"1CPP.dll") = 0 Тогда
	//	//Если ПодключитьВнешнююКомпоненту("Addin.1c++") = 0 Тогда
	//		Сообщить("Не удалось загрузить 1С++", "!!!");
	//		Сообщить("  Тестирование завершилось неудачей", "!!!");
	//		Возврат 0;
	//	КонецЕсли;
	//КонецПопытки;
	//Возврат 1;
	лФлаг = ЗагрузитьВК("1CPP.dll", "ИндексированнаяТаблица");
	Если лФлаг = 0 Тогда
		Сообщить("  Тестирование завершилось неудачей", "!!!");
	КонецЕсли;
	Возврат лФлаг;
КонецФункции	// Загрузить1СПП

Функция ЗагрузитьTurboMD()                                     
	// если загрузить ТурбоМД, тогда будут ошибки :(
	//_стр =ВернутьПутьИзКонстантыХранилищаИлиПустуюСтроку();
	//Если ЗагрузитьВнешнююКомпоненту(_стр +"turbomd.dll") = 0 Тогда
	//	Сообщить("Не удалось загрузить TurboMD.dll", "!!!");
	//	Возврат 0;
	//КонецЕсли;  
	//Возврат 1;
	ЗагрузитьВК("turbomd.dll");
КонецФункции	// ЗагрузитьTurboMD

Процедура ПриНачалеРаботыСистемы()
                   
////	_стр =ВернутьПутьИзКонстантыХранилищаИлиПустуюСтроку();
////	Если ЗагрузитьВнешнююКомпоненту(_стр +"FormEx.dll") = 0 Тогда
////		//Возврат ;
////	КонецЕсли;  
////		Попытка
////			глРасширениеФормы = СоздатьОбъект("РасширениеФормы");
////		Исключение
////		КонецПопытки;
////Возврат;	
//ЗагрузитьВК("FormEx.dll", "Сервис");

	Загрузить1СПП(); // при такой загрузке ошибки при завершении нет, а почему? непонятно :(
	
	// если загрузить не последнюю версию ТурбоМД, тогда, возможно, будут ошибки :(
	ЗагрузитьTurboMD(); // для удобной правки конфы
        
	Если гФлагЗагрузкаБезТестирования = 0 Тогда
		гЛогФайл = СоздатьОбъект("Общие.ЛогФайл");
		гЛогФайл.ИмяЛогФайла = КаталогИБ() + "Testing\1cpp_tests.log";
		гЛогФайл.СообщитьСДатой("Запуск 1С++");
		гЛогФайл.ДобавитьСтроку("1С++ успешно загружена");
		гЛогФайл.ДобавитьСтроку("   классы юнит-тестов также успешно загружены");
		
		MetaInfoClasses=СоздатьОбъект("MetaInfoClasses");
		                    
		//Попытка
		//	лСервис = СоздатьОбъект("Сервис");
		//	лСервис = 0;
		//Исключение
		//	_стр =ВернутьПутьИзКонстантыХранилищаИлиПустуюСтроку();
		//	Если ЗагрузитьВнешнююКомпоненту(_стр +"FormEx.dll") = 0 Тогда
		//		Сообщить("Не удалось загрузить FormEx.dll", "!!!");
		//		//Возврат ;
		//	КонецЕсли;  
		//КонецПопытки;    
		ЗагрузитьВК("FormEx.dll", "Сервис");
		
		Попытка
			глРасширениеФормы = СоздатьОбъект("РасширениеФормы");
		Исключение
		КонецПопытки;             
		
		глЖурнал = СоздатьОбъект("ЖурналВызоваМетодов");

		//КлассПерехватчикГМ = СоздатьОбъект("КлассПерехватчикГлобальногоМодуля");
		//КлассПерехватчикГМ.Инициализация(глЖурнал);
		//
		////_стр =ВернутьПутьИзКонстантыХранилищаИлиПустуюСтроку();
		////Если ЗагрузитьВнешнююКомпоненту(_стр +"RWidjets.dll") = 0 Тогда
		////	Сообщить("Не удалось загрузить RWidjets.dll", "!!!");
		////	//Возврат ;
		////КонецЕсли;  
		//ЗагрузитьВК("RWidjets.dll", "Меню");
	    
		// модально вызывать нельзя, в этом случае тесты работы с открытыми формами не пройдут
		ОткрытьФорму("Обработка.ЗагрузчикЮнитТестов");
	
		//Перехватчик = СоздатьОбъект("Перехватчик");
		//глТест = СоздатьОбъект("НаследникГрупповойКонтекст");
		//глТест.АтрибутКласса = "ГлобальныйМодуль";
		////Перехватчик.ПерехватитьСобытияГлобальногоМодуля(Контекст);
		////Перехватчик.ПерехватитьСобытияГлобальногоМодуля(1);
		//Перехватчик.ПерехватитьСобытияГлобальногоМодуля(глТест);
	Иначе
	
		Загрузить1СПП();

		////Попытка
		////	лСервис = СоздатьОбъект("Сервис");
		////	лСервис = 0;
		////Исключение
		////	_стр =ВернутьПутьИзКонстантыХранилищаИлиПустуюСтроку();
		////	Если ЗагрузитьВнешнююКомпоненту(_стр +"FormEx.dll") = 0 Тогда
		////		Сообщить("Не удалось загрузить FormEx.dll", "!!!");
		////		//Возврат ;
		////	КонецЕсли;  
		////КонецПопытки;
		ЗагрузитьВК("FormEx.dll", "Сервис");
		//ЗагрузитьВК("1sqlite.dll", "SQLiteBase");
		//ЗагрузитьВК("ProxyDataProvider.dll", "ПроксиПоставщикДанных");

		ОткрытьФорму("Отчет", , КаталогИБ()+"ExtForms\Проверка заменить базовыйобъект.ert");

	КонецЕсли;
	
КонецПроцедуры	// ПриНачалеРаботыСистемы 

////============================================================
//Процедура глПриОткрытииФормы(Конт) Экспорт
////Тест = СоздатьОбъект("НаследникГрупповойКонтекст");
//////Предупреждение("1");
////Тест.Инициализация(Конт);
//////Предупреждение("2");
//////Сообщить("======================================================= перед перехватом ");	
////	Тест.ПерехватитьСобытияГК(Конт);
////////Предупреждение("3");
//////Сообщить("======================================================= после перехвата");	
//
//	Перехватчик = СоздатьОбъект("Перехватчик");
//	Тест = СоздатьОбъект("НаследникГрупповойКонтекст");
//	Тест.Инициализация(Контекст);
//	Тест.АтрибутКласса = "ГрупповойКонтекст";
//	//Тест.ПерехватитьМетодыМодуляГК(Контекст);
//	//Тест.ПерехватитьСобытияГК(Контекст);
//	//глПриОткрытииФормы(Контекст);
//	
//	Перехватчик.ПерехватитьСобытияГК(Конт, Тест);
//	//Перехватчик.ПерехватитьСобытияГК(Контекст, Контекст); // должна выдаваться ошибка
//	//Перехватчик.ПерехватитьСобытияГК(Тест, Тест); // должна выдаваться ошибка
//Сообщить("======================================================= глПриОткрытииФормы ");	
//	
//КонецПроцедуры
        
//Процедура ПослеОткрытия(Конт)
//Тест = СоздатьОбъект("НаследникГрупповойКонтекст");
////Предупреждение("1");
//Тест.Инициализация(Конт);
////Предупреждение("2");
////Сообщить("======================================================= перед перехватом ");	
//	Тест.ПерехватитьСобытияГК(Конт);
//////Предупреждение("3");
////Сообщить("======================================================= после перехвата");	
//Сообщить("======================================================= ПослеОткрытия ");	
//КонецПроцедуры	// ПослеОткрытия

Процедура МетодСИсключением() Экспорт
//Попытка                   
	Тест = СоздатьОбъект("ПроверкаПредупреждения");
	Тест.МетодСИсключением();
	//Тест.Тест_ИсключениеВСозданномКлассе2();
//Исключение
//	Модуль = СоздатьОбъект("ВыполняемыйМодуль");
//    ОбИсключение = Модуль.ПолучитьИсключение();
//	Сообщить("ОбИсключение = <"+ОбИсключение+">");
//	Сообщить("ОписаниеОшибки() = <"+ОписаниеОшибки()+">");
//КонецПопытки;
Возврат;
КонецПроцедуры	// МетодСИсключением

//Процедура ПриЗавершенииРаботыСистемы()
//	Предупреждение("ПриЗавершенииРаботыСистемы()");
//КонецПроцедуры      

Процедура ПриОтменеПроведенияДокумента(Докум) Экспорт
	Предупреждение("Глобальник:: ПриОтменеПроведенияДокумента() "+Докум);
	//OnUnPosting(Докум);
	//Перехватчик = СоздатьОбъект("Перехватчик");                                          
	//СписокАргументов = СоздатьОбъект("СписокЗначений");
	//СписокАргументов.ДобавитьЗначение(Докум);
	//Перехватчик.ВызватьОригинальноеСобытиеГлобальногоМодуля("ПриОтменеПроведенияДокумента", СписокАргументов);
КонецПроцедуры

//// если так загружать, будет ошибка при завершении работы 1С при загрузке ФормЕкс в ПриНачалеРаботыСистемы
//// специально загружаю именно в теле глобальника для проверки некоторых начальных багов
//Если Загрузить1СПП() = 1 Тогда
//	Сообщить("1С++ успешно загружена");
//	Сообщить("   описания классов юнит-тестов также успешно загружены");
//КонецЕсли;
//                       
//////если так загружать ФормЕкс, ошибки при закрытии нет!!
////Если ЗагрузитьВнешнююКомпоненту("FormEx.dll") = 0 Тогда
////	Сообщить("Не удалось загрузить FormEx.dll", "!!!");
////	//Возврат ;
////КонецЕсли;  
//ЗагрузитьВК("FormEx.dll", "Сервис");

Функция Событие_НеобработаннаяОшибка(СообщениеОбОшибке, Маркер, ИмяФайла, Парам4, НомерСтрокиОшибки, Парам6)
//Функция Событие_НеобработаннаяОшибка(ПарамОшибка, СообщениеОбОшибке, Маркер, ИмяФайла, Парам4, НомерСтрокиОшибки, Парам6)
//Функция Событие_НеобработаннаяОшибка(СообщениеОбОшибке, Маркер, ИмяФайла, Парам4, НомерСтрокиОшибки)
	Сообщить("Событие_НеобработаннаяОшибка :: НомерСтрокиОшибки = <"+НомерСтрокиОшибки+"> "+" ИмяФайла = <"+ИмяФайла+">");
	Возврат 1;
КонецФункции

Функция Событие_ЗаписьСобытияЖурналаРегистрации(EventCategory, Event, EvType, comment, object, ObjDescr)
//Функция Событие_НеобработаннаяОшибка(ПарамОшибка, СообщениеОбОшибке, Маркер, ИмяФайла, Парам4, НомерСтрокиОшибки, Парам6)
//Функция Событие_НеобработаннаяОшибка(СообщениеОбОшибке, Маркер, ИмяФайла, Парам4, НомерСтрокиОшибки)
	//Сообщить("Событие_ЗаписьСобытияЖурналаРегистрации :: EventCategory = <"+EventCategory+"> "+" EvType = <"+EvType+">");
	СтрокаСобытия = "ГМ::Событие_ЗаписьСобытияЖурналаРегистрации :: EventCategory = <"+EventCategory+"> "+" EvType = <"+EvType+">, comment = <"+comment+">, object = <"+ТипЗначенияСтр(object)+">";
Сообщить(СтрокаСобытия);

//	СтрокаСобытия2 = "ГМ::Событие_ЗаписьСобытияЖурналаРегистрации :: Event = <"+Event+">, object = <"+object+">, ObjDescr = <"+ObjDescr+">";
//Сообщить(СтрокаСобытия2);
//	СтрокаСобытия2 = "ТипЗначенияСтр(Event) = <"+ТипЗначенияСтр(Event)+">, ТипЗначенияСтр(object) = <"+ТипЗначенияСтр(object)+">, ТипЗначенияСтр(ObjDescr) = <"+ТипЗначенияСтр(ObjDescr)+">";
//Сообщить(СтрокаСобытия2);
//	Если ТипЗначенияСтр(object) = "Документ" Тогда
//		Сообщить("Документ = "+object.Вид() +", НомерДок ="+object.НомерДок+", ДатаДок = "+object.ДатаДок);
//	ИначеЕсли ТипЗначенияСтр(object) = "Справочник" Тогда
//		Сообщить("Справочник = "+object.Вид() +", Код ="+object.Код+", Наименование = "+object.Наименование);
//	КонецЕсли;
	
	Если глОбрабатыватьСобытие_ЗаписьСобытияЖурналаРегистрации = 1 Тогда
		Сообщить(СтрокаСобытия);
		глЖурнал.ДобавитьЗапись(СтрокаСобытия);
	КонецЕсли;

	Возврат 0;
КонецФункции

Функция Событие_ЗаписьПользовательскогоСобытияЖурналаРегистрации(EventCategory, Event, EvType, comment, object, ObjDescr)
	СтрокаСобытия = "ГМ::Событие_ЗаписьПользовательскогоСобытияЖурналаРегистрации :: EventCategory = <"+EventCategory+"> "+" EvType = <"+EvType+">, comment = <"+comment+">";
Сообщить(СтрокаСобытия);
	СтрокаСобытия2 = "ГМ::Событие_ЗаписьСобытияЖурналаРегистрации :: comment = <"+comment+"> "+" object = <"+object+">, ObjDescr = <"+ObjDescr+">";
Сообщить(СтрокаСобытия2);
	
	Если глОбрабатыватьСобытие_ЗаписьПользовательскогоСобытияЖурналаРегистрации = 1 Тогда
		Сообщить(СтрокаСобытия);
		глЖурнал.ДобавитьЗапись(СтрокаСобытия);
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;
КонецФункции

// для тестирования событий FormEx 
Процедура глУстановитьФлагОбработкиСобытийФормЕкс(Журнал) Экспорт
	глОбрабатыватьСобытияФормЕкс = 1;
	глФлагКоличествоНажатийКлавиатуры = 0;
	глФлаг_ПриНажатииКнопкиКлавиатуры_ФСО = 1;
	глЖурнал = Журнал;
КонецПроцедуры	// УстановитьФлагОбработкиСобытийФормЕкс

Процедура глСброситьФлагОбработкиСобытийФормЕкс() Экспорт
	глОбрабатыватьСобытияФормЕкс = 0; 
	глФлагКоличествоНажатийКлавиатуры = 0;
	глФлаг_ПриНажатииКнопкиКлавиатуры_ФСО = 1;

	глФлагОткрытьНовуюФормуВОбработчике_ПослеОткрытия = 0;
КонецПроцедуры	// УстановитьФлагОбработкиСобытийФормЕкс

Процедура ПослеОткрытия(КонтФормы)
	Если глОбрабатыватьСобытияФормЕкс = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Предупреждение("Глобальный::ПослеОткрытия");
	
	глЖурнал.ДобавитьЗапись("Глобальный::ПослеОткрытия");
	
	Если глФлагОткрытьНовуюФормуВОбработчике_ПослеОткрытия = 1 Тогда
		
		глФлагОткрытьНовуюФормуВОбработчике_ПослеОткрытия = 0;
		
		//ДелегатФормы = СоздатьОбъект("ДелегатФормы");
		//КонтФормы = ДелегатФормы.ОткрытьФорму("Отчет.новый1");
		//ДелегатФормы = 0;
		Конт = 0;
		Предупреждение("Глобальный::ПослеОткрытия - перед открытием новой формы");
		ОткрытьФорму("Отчет.новый1#", Конт);
		Предупреждение("Глобальный::ПослеОткрытия - открыли новую форму");
		Система = СоздатьОбъект("Система");
		Система.ЗакрытьФорму(Конт);
		Предупреждение("Глобальный::ПослеОткрытия - закрыли новую форму");
		
	КонецЕсли;
КонецПроцедуры

Процедура ПослеЗакрытия(КонтФормы)
	Если глОбрабатыватьСобытияФормЕкс = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Сообщить("Глобальный::ПослеЗакрытия");
	глЖурнал.ДобавитьЗапись("Глобальный::ПослеЗакрытия");
КонецПроцедуры

//Процедура ПриЗагрузкеФормы(ИмяОбъекта)
//	Если глОбрабатыватьСобытияФормЕкс = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	глЖурнал.ДобавитьЗапись("Глобальный::ПриЗагрузкеФормы<"+Прав(ИмяОбъекта, 10)+">");
//КонецПроцедуры

Процедура ПриЗагрузкеВнешнегоОтчета(ИмяФайлаОтчета)
	Если глОбрабатыватьСобытияФормЕкс = 0 Тогда
		Возврат;
	КонецЕсли;
	
	глЖурнал.ДобавитьЗапись("Глобальный::ПриЗагрузкеВнешнегоОтчета<"+Прав(ИмяФайлаОтчета, 17)+">");
КонецПроцедуры

Процедура ПриЗагрузкеФормы(ИмяОбъекта) 
	//Сообщить("Глобальный::ПриЗагрузкеФормы<"+ИмяОбъекта+">");
	Если глОбрабатыватьСобытияФормЕкс = 0 Тогда
		Возврат;
	КонецЕсли;
	глЖурнал.ДобавитьЗапись("Глобальный::ПриЗагрузкеФормы<"+ИмяОбъекта+">");

	Если глФлагЗаменятьФормуВСобытии_ЗагрузкеФормы = 1 Тогда
		ИмяОбъекта = глИмяОбъектаДляЗаменыФормыВСобытии_ЗагрузкеФормы;
	КонецЕсли;
КонецПроцедуры 

Процедура ПриЗагрузкеМодуляФормы(ИмяОбъекта) 
	//Сообщить("Глобальный::ПриЗагрузкеМодуляФормы<"+ИмяОбъекта+">");
	Если глОбрабатыватьСобытияФормЕкс = 0 Тогда
		Возврат;
	КонецЕсли;
	глЖурнал.ДобавитьЗапись("Глобальный::ПриЗагрузкеМодуляФормы<"+ИмяОбъекта+">");

	Если глФлагЗаменятьФормуВСобытии_ПриЗагрузкеМодуляФормы = 1 Тогда
		ИмяОбъекта = глИмяОбъектаДляЗаменыФормыВСобытии_ПриЗагрузкеМодуляФормы;
	КонецЕсли;
КонецПроцедуры 

Процедура ПриНажатииКнопкиКлавиатуры(КонтФормы, КодКлавиши, Alt, Shift, Ctrl, Символ, ФСО)
//Сообщить("ТипЗначенияСтр(КонтФормы) = <"+ТипЗначенияСтр(КонтФормы)+">");
//Информатор = СоздатьОбъект("Информатор");
//Сообщить("Информатор.ТипЗначенияСтрВнутр()(КонтФормы) = <"+Информатор.ТипЗначенияСтрВнутр(КонтФормы)+">");

	Если глОбрабатыватьСобытияФормЕкс = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//глЖурнал.ДобавитьЗапись("Глобальный::ПриНажатииКнопкиКлавиатуры<"+КодКлавиши+">");
	глФлагКоличествоНажатийКлавиатуры = глФлагКоличествоНажатийКлавиатуры + 1;
	Если глФлагКоличествоНажатийКлавиатуры = 1 Тогда
		глЖурнал.ДобавитьЗапись("Глобальный::ПриНажатииКнопкиКлавиатуры<"+КодКлавиши+">");
	КонецЕсли;

	ФСО = глФлаг_ПриНажатииКнопкиКлавиатуры_ФСО;	
	
	Если глФлагКоличествоНажатийКлавиатуры = 1 Тогда
		Если глФлаг_ПриНажатииКнопкиКлавиатуры_ФСО = 0 Тогда
			глЖурнал.ДобавитьЗапись("Глобальный::ПриНажатииКнопкиКлавиатуры<ФСО=0>");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// обработчик не должен отработать
Процедура ПриОтжатииКнопкиКлавиатуры(КонтФормы, КодКлавиши, Alt, Shift, Ctrl, Символ, ФСО, ЛишнийПараметр)
	Если глОбрабатыватьСобытияФормЕкс = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//глЖурнал.ДобавитьЗапись("Глобальный::ПриНажатииКнопкиКлавиатуры<"+КодКлавиши+">");
	глФлагКоличествоНажатийКлавиатуры = глФлагКоличествоНажатийКлавиатуры + 1;
	Если глФлагКоличествоНажатийКлавиатуры = 1 Тогда
		глЖурнал.ДобавитьЗапись("Глобальный::ПриНажатииКнопкиКлавиатуры");
	КонецЕсли;
КонецПроцедуры

Процедура глТаймер() Экспорт                     
	Сообщить("Глобальный::Таймер"); // не удалять !! нужно для доп.контроля удаления таймера после завершения работы тестирования
	глЖурнал.ДобавитьЗапись("Глобальный::Таймер");

	Сервис = СоздатьОбъект("Сервис");
	//Сервис.ОбработкаОжидания("",0);
	
КонецПроцедуры

Процедура глТаймер2() Экспорт                     
	Сообщить("Глобальный::Таймер2"); // не удалять !! нужно для доп.контроля удаления таймера после завершения работы тестирования
	глЖурнал.ДобавитьЗапись("Глобальный::Таймер2");

	Сервис = СоздатьОбъект("Сервис");
	//Сервис.ОбработкаОжидания("",0);
	
КонецПроцедуры

Функция глТаймер_Функция() Экспорт                     
	Сообщить("Глобальный::глТаймер_Функция"); // не удалять !! нужно для доп.контроля удаления таймера после завершения работы тестирования
	глЖурнал.ДобавитьЗапись("Глобальный::глТаймер_Функция");

	Сервис = СоздатьОбъект("Сервис");
	//Сервис.ОбработкаОжидания("",0);
	
КонецФункции

Процедура глТаймер_НеверноеЧислоПараметров(Парам1) Экспорт                     
	Сообщить("Глобальный::глТаймер_НеверноеЧислоПараметров");
	глЖурнал.ДобавитьЗапись("Глобальный::глТаймер_НеверноеЧислоПараметров");
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)
	Сообщить("Глобальный::ОбработкаВнешнегоСобытия<"+Источник+">");
	глЖурнал.ДобавитьЗапись("Глобальный::ОбработкаВнешнегоСобытия<"+Источник+">");
КонецПроцедуры

Процедура ПриУдаленииДокумента(УдалДокум, Режим)
	Если глОбрабатыватьСобытияФормЕкс = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить("Глобальный::ОбработкаВнешнегоСобытия<"+УдалДокум+">");
	глЖурнал.ДобавитьЗапись("Глобальный::ОбработкаВнешнегоСобытия<"+УдалДокум+">");
КонецПроцедуры

Процедура ОбработкаЯчейкиТаблицы(ЗначениеРасшифровки, ФлагСтандОбр, ТаблИсточник, АдресЯчейки)
	Сообщить("глобальная ОбработкаЯчейкиТаблицы");	
КонецПроцедуры // ОбработкаЯчейкиТаблицы 

Процедура Событие_OnDrop(СписокФайлов)
	//Предупреждение("Глобальный::Событие_OnDrop");
	//Предупреждение(ТипЗначенияСтр(СписокФайлов));
	//Предупреждение("СписокФайлов.РазмерСписка() = <"+СписокФайлов.РазмерСписка()+">");

	Для к=1 По СписокФайлов.РазмерСписка() Цикл
		//Предупреждение("СписокФайлов.ПолучитьЗначение(к) = <"+СписокФайлов.ПолучитьЗначение(к)+">");
		ПутьФайла = СписокФайлов.ПолучитьЗначение(к);
		ОткрытьФорму("Отчет", , ПутьФайла);
	КонецЦикла;
КонецПроцедуры

Процедура Событие_OnURLDrop(СтрокаURL)
	//Сообщить("ТипЗначенияСтр(СтрокаURL) = <"+ТипЗначенияСтр(СтрокаURL)+">");
	//Предупреждение("Событие_OnURLDrop - СтрокаURL = <"+СтрокаURL+">");
	Сообщить("Событие_OnURLDrop - СтрокаURL = <"+СтрокаURL+">");
КонецПроцедуры

Процедура ЗакрытьВсеОкна()
	Сервис = СоздатьОбъект("Сервис");
	Сервис.ОбработкаОжидания("", 0);

	Сервис.ЗакрытьВсеОкна();
КонецПроцедуры	// ЗакрытьВсеОкна

Функция глШтатныеПараметрыПоУмолчанию_Сложение(А = 2, Б = 3) Экспорт
	Возврат А + Б;
КонецФункции

Функция глШтатныеПараметрыПоУмолчанию_Сложение_3Параметра(А = 2, Б = 3, Ц = 5) Экспорт
	Возврат А + Б + Ц;
КонецФункции

Процедура глРасширениеФормы_ОбработкаОжидания(Конт) Экспорт
     глРасширениеФормы.УстановитьФорму(Конт.Форма);
     глРасширениеФормы.ОбработкаОжидания("Таймер", 1000);
КонецПроцедуры

Процедура ПриПолученииКоманды1(пКоманда, пЗаблокироватьКоманду)
	СтрокаСобытия = "ГМ::ПриПолученииКоманды<"+пКоманда+">";

	Сообщить(СтрокаСобытия);
	глЖурнал.ДобавитьЗапись(СтрокаСобытия);
КонецПроцедуры

Процедура ПриНажатииЛевойКнопки1(КонтФормы, Состояние, КоординатаПоГоризонтали, КоординатаПоВертикали, ФСО)
	Сообщить("ТипЗначенияСтр(КонтФормы) = <"+ТипЗначенияСтр(КонтФормы)+">");
	Сообщить("ПриНажатииЛевойКнопки ФСО = <"+ФСО+">");
КонецПроцедуры                  

Функция глВзятьКонтекст(Конт) Экспорт
	Возврат Конт;
КонецФункции

Функция глВзятьГлобальныйКонтекст() Экспорт
	Возврат глВзятьКонтекст(Контекст);
КонецФункции 

Процедура ПриватныйМетод()
	Предупреждение("ПриватныйМетод");
	глЖурнал.ДобавитьЗапись("ПриватныйМетод");
КонецПроцедуры

Функция гл_ФормЕкс_Сервис_ВыполнитьПроцедуру(ИмяМетодаГлобальника) Экспорт
	глЖурнал = СоздатьОбъект("ЖурналВызоваМетодов");
//Сообщить("ТипЗначенияСтр(глВзятьГлобальныйКонтекст()) = <"+ТипЗначенияСтр(глВзятьГлобальныйКонтекст())+">");
	
	//ВМ = СоздатьОбъект("ВыполняемыйМодуль");
	//ВМ.УстановитьМодуль("ПриватныйМетод();");
	//ВМ.НазначитьКонтекст(Контекст);
	//ВМ.КомпилироватьИВыполнитьМодуль();

	Сервис = СоздатьОбъект("Сервис");
	чРезультат = Сервис.ВыполнитьПроцедуру(глВзятьГлобальныйКонтекст(), ИмяМетодаГлобальника);
	глЖурнал.ДобавитьЗапись("Результат:"+чРезультат);
	
	Возврат глЖурнал;
КонецФункции

Функция глПолучитьТипВидОбъектаВВидеСтроки(Объект) Экспорт
	Перем стр;
	стр = ТипЗначенияСтр(Объект)+","+Объект.Вид();
	
	Возврат стр;
КонецФункции

Функция глПолучитьДанныеОбъектаВВидеСтроки(Объект) Экспорт
	Перем стр;
	стр = "";
	
	Если ТипЗначенияСтр(Объект) = "Справочник" Тогда
		стр = Объект.Код;
	ИначеЕсли ТипЗначенияСтр(Объект) = "Документ" Тогда
		стр = "№"+Объект.НомерДок+" от "+Объект.ДатаДок;
	КонецЕсли;
	
	Возврат стр;
КонецФункции

// событие ФормЕкс
Процедура ОбработкаБлокировкиОбъекта(Объект,Повторить,ДополнительныйТекст) Экспорт

	Если глОбрабатыватьСобытияФормЕкс = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныйТекст = "Доп.текст <ОбработкаБлокировкиОбъекта>";
	//Сообщить("ОбработкаБлокировкиОбъекта ( "+Объект+" )","!"); 
	//Сообщить("ОбработкаБлокировкиОбъекта ( "+ТипЗначенияСтр(Объект)+" )","!!"); 
	//Сообщить("ОбработкаБлокировкиОбъекта ( "+Объект.Вид()+" )","!!"); 
	//Сообщить("ОбработкаБлокировкиОбъекта ( "+Объект+" )","!!"); 
	//Если ТипЗначенияСтр(Объект) = "Справочник" Тогда
	//	Сообщить("ОбработкаБлокировкиОбъекта ( "+Объект.Код+" )","!!"); 
	//ИначеЕсли ТипЗначенияСтр(Объект) = "Документ" Тогда
	//	Сообщить("ОбработкаБлокировкиОбъекта ( №"+Объект.НомерДок+" от "+Объект.ДатаДок+" )","!!"); 
	//КонецЕсли;

	глЖурнал.ДобавитьЗапись("Глобальный::ОбработкаБлокировкиОбъекта<"+глПолучитьТипВидОбъектаВВидеСтроки(Объект)+">");
	глЖурнал.ДобавитьЗапись("ДанныеОбъекта<"+глПолучитьДанныеОбъектаВВидеСтроки(Объект)+">");
КонецПроцедуры 

// событие ФормЕкс
Процедура ПриНачалеБлокировкиОбъекта(Объект) Экспорт

	Если глОбрабатыватьСобытияФормЕкс = 0 Тогда
		Возврат;
	КонецЕсли;

	//Сообщить("ПриНачалеБлокировкиОбъекта ( "+ТипЗначенияСтр(Объект)+" )","!!"); 
	//Сообщить("ПриНачалеБлокировкиОбъекта ( "+Объект.Вид()+" )","!!"); 
	////Сообщить("ПриНачалеБлокировкиОбъекта ( "+Объект+" )","!!"); 
	////Если ТипЗначенияСтр(Объект) = "Справочник" Тогда
	////	Сообщить("ПриНачалеБлокировкиОбъекта ( "+Объект.Код+" )","!!"); 
	////ИначеЕсли ТипЗначенияСтр(Объект) = "Документ" Тогда
	////	Сообщить("ПриНачалеБлокировкиОбъекта ( №"+Объект.НомерДок+" от "+Объект.ДатаДок+" )","!!"); 
	////КонецЕсли;

	глЖурнал.ДобавитьЗапись("Глобальный::ПриНачалеБлокировкиОбъекта<"+глПолучитьТипВидОбъектаВВидеСтроки(Объект)+">");
	глЖурнал.ДобавитьЗапись("ДанныеОбъекта<"+глПолучитьДанныеОбъектаВВидеСтроки(Объект)+">");
	//Если ТипЗначенияСтр(Объект) = "Справочник" Тогда
	//	//Сообщить("ПриНачалеБлокировкиОбъекта ( "+Объект.Код+" )","!!"); 
	//	глЖурнал.ДобавитьЗапись("ДанныеОбъекта<"+Объект.Код+">");
	//ИначеЕсли ТипЗначенияСтр(Объект) = "Документ" Тогда
	//	//Сообщить("ПриНачалеБлокировкиОбъекта ( №"+Объект.НомерДок+" от "+Объект.ДатаДок+" )","!!"); 
	//	глЖурнал.ДобавитьЗапись("ДанныеОбъекта<№"+Объект.НомерДок+" от "+Объект.ДатаДок+">");
	//КонецЕсли;
КонецПроцедуры 

глОбрабатыватьСобытияФормЕкс = 0;
глФлагОткрытьНовуюФормуВОбработчике_ПослеОткрытия = 0;
глФлагЗаменятьФормуВСобытии_ЗагрузкеФормы = 0;
глФлагЗаменятьФормуВСобытии_ПриЗагрузкеМодуляФормы = 0;

глОбрабатыватьСобытие_ЗаписьСобытияЖурналаРегистрации = 0;
глОбрабатыватьСобытие_ЗаписьПользовательскогоСобытияЖурналаРегистрации = 0;

гФлагЗагрузкаБезТестирования = 0;
