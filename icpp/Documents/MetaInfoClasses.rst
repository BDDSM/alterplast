.. јвтор: јртур јюханов aka artbear, mailto: artbear@inbox.ru

.. include:: commonchm.txt


#####################################################################
MetaInfoClasses
#####################################################################
..	<chminfo>
		<insert nodes="//common/maininfo/*"/>
		<alinks>_1cpp_metainfoclasses_</alinks>
		<klinks>
			MetaInfoClasses
		</klinks>
	</chminfo>

.. contents:: —одержание
	:backlinks: none

** ласс "MetaInfoClasses" / "MetaInfoClasses".**

1. ”добный сервисный класс, показывающий различную метаинформацию 
по классам, методам, параметрам методов, определенным символам препроцессора, псевдонимам путей, 
версию 1—++, текущие настройки 1—++, вложенным файлам (директивой #include).

2.  ласс также умеет динамически подгружать класы - метод «агрузитьќписание лассов_ .

3.  ласс также умеет сбрасывает метаданные классов, что позвол€ет динамически перезагружать классы, не перезагружа€ ѕредпри€тие.
ћетод ќчиститьƒанныеќптимизации лассов_ .
 
4. ј также формировать по специальным комментари€м в файлах определени€ 
классов ( prm-файлы ) XML - документацию и ALS - документацию по классам.
ћетод —оздатьALS_ .

¬се специальные комментарии формируютс€ в виде XML текста и определ€ютс€ 
наличием
трех знаков /// перед их началом.

Ќапример:

::

	///<class name = ћой ласс Version = 1.0 LastDate =  
	///descr = ћой первый класс с XML - комментари€ми
	///depends =  use =  author = √усев ƒ.ј. firm = OXY base =  
	///example =  remark = >
	//ј это обычный комментарий, которые не провер€етс€ XML - парсером
	class ћой ласс=ћой ласс.ert
	{
	};
	///</class>


=====================================================================
ћетоды
=====================================================================
..	<chminfo split="0" splitchild="1">
		<insert nodes="//common/propsmethods/*"/>
	</chminfo>

.. _—оздатьALS:

—оздатьALS / CreateALS
------------------------------------------------
	**—интаксис:** —оздатьALS(стр»м€‘айлаALS, стр»м€ орн€)

	**ѕараметры:**
		- **стр»м€‘айлаALS** - тип: —трока. »м€ файла als.
		- **стр»м€ орн€** - тип: —трока. »м€ корневой папки в синтаксис помощнике, в которой будут помещатьс€ описани€ классов.

	**ќписание:** формирует по XML - описани€м классов специального формата, 
	описанного выше, als - файл помощника 1—. » формирует XML-файл описаний. 
	Ќастройки дл€ этого метода осуществл€ютс€ с помощью следующих методов: 
	TuningALS, SetFilterClasses, SetFilterNamespace, описание которых см. 
	выше.
	
	ƒл€ возможности формировани€ ALS - файла из XML комментариев определены 6 специальных тэгов названи€, которых можно измен€ть:
		
		Ј       ѕространство имен (по умолчанию namespace). Ётот тэг формирует папку в синтаксис помощнике 1—
		
		Ј        ласс (по умолчанию class)
		
		Ј       ћетод (по умолчанию method)
		
		Ј       ѕараметр метода (по умолчанию param)
		
		Ј       ¬озвращаемое значение (по умолчанию returns)
		
		Ј       —войство (по умолчанию property)
		
		Ј       ” всех выше описанных тэгов, кроме возвращаемого значени€, об€зан быть атрибут им€ (по умолчанию name)

	ѕример в примере жирным выделенных все необходимые тэги и атрибуты:

::	

	/// <namespace name=ћои супер классы>
	//****************************************************************************
	///<class name = ћой ласс Version = 1.0 LastDate =  
	///descr = 
	///depends =  use =  author = √усев ƒ.ј. firm = OXY base =  
	///example =  remark = >
	class ћой ласс=ћой ласс.ert 
	{
	//*********************************************************************
		/// <property name=јтрибут1 access=Public type=—трока>
		/// јтрибут первый
		/// </property>
		//**********************************************************************
		/// <method name=ћетод access=Public>
		/// <summary></summary>
		/// <example></example>
		/// <remark></remark>
		/// <param name=„исло mod=[in] | [out] type=чѕарам1 defaultValue = 1>ѕараметр первый</param>
		/// <returns type=„исло>„то </returns>
		/// <sig>
		„исло ћетод(„исло чѕарам1 = 1);
		/// </sig> 
		/// </method>
	};       
	///</class>
	/// </namespace>
	

	¬ поставку с ¬  включен демонстрационный пример формировани€ als-файла дл€ класса. 
	» предложен шаблоны заполнени€ дл€ 1C редактора, где есть сокращени€: 
	класс\ мет\ пар\ св\ прим\ и их англ. эквиваленты.

”ст‘ильтрѕо лассам / SetFilterClasses
------------------------------------------------
	**—интаксис:** ”ст‘ильтрѕо лассам(стр‘ильтр)

	**ѕараметры:**
		- **стр‘ильтр** - тип: —трока. »мена классов, разделенные зап€той, которые необходимо выгружать в als-файл. 
		
		ѕуста€ строка - фильтр отключен и выгружатьс€ будут все комментированные классы.

	**ќписание:** устанавливает фильтр по выгружаемым классам в als-файл содержащихс€ в текущей конфигурации.

”ст‘ильтрѕоѕрост»мен / SetFilterNamespace
------------------------------------------------
	**—интаксис:** ”ст‘ильтрѕоѕрост»мен(стр‘ильтр)

	**ѕараметры:**
		- **стр‘ильтр** - тип: —трока. »мена пространств имен, разделенные зап€той, которые необходимо выгружать в als-файл. 
		
		ѕуста€ строка - фильтр отключен и выгружатьс€ будут все пространства.

	**ќписание:** устанавливает фильтр по пространству имен дл€ выгрузки в als-файл.	

ѕолучить«агр¬лож‘айлы / GetLoadIncludeFiles
------------------------------------------------
	**—интаксис:** ѕолучить«агр¬лож‘айлы()

	**¬озвращаемое значение:**
		тип: —писок«начений. —писок значений, значени€ в котором есть имена файлов.

	**ќписание:** возвращает список с именами вложенных файлов - загруженных 
	с помощью препроцессорной директивы #include.

ѕолучитьќпр—имволыѕрепроц / GetDefSymbolOfPreproc
---------------------------------------------------------------------------------------
	**—интаксис:** ѕолучитьќпр—имволыѕрепроц()

	**¬озвращаемое значение:**
		тип: —писок«начений. —писок значений, значени€ в котором есть имена символов.

	**ќписание:** возвращает список определенных препроцессорной директивой #define символов.

ѕолучить¬се»мена лассов / GetAllClassesNames
---------------------------------------------------------------------------------------
	**—интаксис:** ѕолучить¬се»мена лассов()

	**¬озвращаемое значение:**
		тип: —писок«начений. —писок значений, значени€ в котором есть имена классов, а в символьном представлении полный путь к его реализации.

	**ќписание:** возвращает список имен классов и полных путей до них.

ѕолучитьѕсевд»_ѕути / GetAllAliasAndPath
---------------------------------------------------------------------------------------
	**—интаксис:** ѕолучитьѕсевд»_ѕути()

	**¬озвращаемое значение:**
		тип: —писок«начений. —писок значений, значени€ в котором есть имена псевдонимов, а в символьном представлении их содержимое.

	**ќписание:** возвращает список псевдонимов и путей которые они определ€ют.

ѕолучить»менаћетодов ласса / GetNamesMethOfClass
---------------------------------------------------------------------------------------
	**—интаксис:** ѕолучить»менаћетодов ласса(стр»м€ ласса)

	**ѕараметры:**
		- **стр»м€ ласса** - тип: —трока. »м€ класса, имена методов которого мы желаем получить.

	**¬озвращаемое значение:**
		тип: —писок«начений. —писок значений, значени€ в котором есть имена методов.

	**ќписание:** возвращает список имен методов у класса.
	
	**¬нимание:**
	ћетод работает, только дл€ тех методов, которые были определены в файлах - определений классов (prm-файлы)."

ѕолучить»нфоѕоѕар / GetInfoParamMeth
---------------------------------------------------------------------------------------
	**—интаксис:** ѕолучить»нфоѕоѕар(стр»м€ ласса, стр»м€ћетода)

	**ѕараметры:**
		- **стр»м€ ласса** - тип: —трока. »м€ класса.
		- **стр»м€ћетода** - тип: —трока. »м€ метода.

	**¬озвращаемое значение:**
		тип: —писок«начений. —писок значений, значени€ в котором есть структуры с предопределенными пол€ми.

	**ќписание:** возвращает список предопределенных структур параметров 
	метода класса с пол€ми: »м€ - им€ параметра, »м€ - тип параметра, 
	«начение - значение по умолчанию дл€ параметра, –ежим - имеет два 
	состо€ни€ ѕо«начению и ѕо—ылке.
	
	**¬нимание:**
	ћетод работает, только дл€ тех методов, которые были определены в файлах - определений классов (prm-файлы)."

 ласс—уществует / IsClassExist
---------------------------------------------------------------------------------------
	**—интаксис:**  ласс—уществует(стр»м€ ласса)

	**ѕараметры:**
		- **стр»м€ ласса** - тип: —трока. »м€ класса.

	**¬озвращаемое значение:**
		тип: „исло.  1 - существует, 0 - не существует.

	**ќписание:** ќпредел€ет, существует ли в системе зарегистрированный класс с таким именем.

	ћетод €вл€етс€ полным аналогом соответствующего метода встроенного класса "»нформатор".

ћетод—уществует / IsMethExist
---------------------------------------------------------------------------------------
	**—интаксис:** ћетод—уществует(стр»м€ ласса, стр»м€ћетода)

	**ѕараметры:**
		- **стр»м€ ласса** - тип: —трока. »м€ класса.
		- **стр»м€ћетода** - тип: —трока. »м€ метода.

	**¬озвращаемое значение:**
		тип: „исло.  1 - существует, 0 - не существует.

	**ќписание:** ќпредел€ет, существует ли в системе зарегистрированный класс с таким именем и методом.

	**¬нимание:**
	ћетод работает, только дл€ тех методов, которые были определены в файлах - определений классов (prm-файлы).

	ћетод €вл€етс€ полным аналогом соответствующего метода встроенного класса "»нформатор".

ѕолучить¬ерсию / GetVersion
---------------------------------------------------------------------------------------
	**—интаксис:** ѕолучить¬ерсию()

	**¬озвращаемое значение:**
		тип: „исло. Ќомер версии, число без точек. ѕример: если верси€ ¬  1.1.1.0, то метод вернет 1110.

	**ќписание:** возвращает номер текущей версии ¬  1—++.

ЁтоSQL_¬ерси€ / ThisIsSQL_Ver
---------------------------------------------------------------------------------------
	**—интаксис:** ЁтоSQL_¬ерси€()

	**¬озвращаемое значение:**
		тип: „исло.

	**ќписание:** ¬озвращает 1, если текуща€ верси€ 1— работает с SQL сервером ћайкрософт, 0 - иначе.

ѕолучить“ек”становки / GetCurSettings
---------------------------------------------------------------------------------------
	**—интаксис:** ѕолучить“ек”становки(б¬клќптимизаци€, б¬клѕроверка“ипов, б¬кл–ежимќтладки)

	**ѕараметры:**
		- **б¬клќптимизаци€** - тип: „исло.  ¬ыходной параметр: 1 - включена, 0 - выключена.
		- **<б¬клѕроверка“ипов** - тип: „исло. ¬ыходной параметр: 1 - включена, 0 - выключена.
		- **<б¬кл–ежимќтладки** - тип: „исло. ¬ыходной параметр: 1 - включен, 0 - выключен.

	**ќписание:** ћетод возвращает установки ¬ , которые настраиваютс€ 
	в параметрах на закладке Ќастройки 1—++, почитать о которых можно в classes.chm.

”становить“ек”становки / SetCurSettings
---------------------------------------------------------------------------------------
	**—интаксис:** ”становить“ек”становки(б¬клќптимизаци€, б¬клѕроверка“ипов, б¬кл–ежимќтладки)

	**ѕараметры:**
		- **б¬клќптимизаци€** - тип: „исло. входной параметр: 1 - включена, 0 - выключена, любое другое число не измен€ет текущее значение.
		- **<б¬клѕроверка“ипов** - тип: „исло. ¬ходной параметр: 1 - включена, 0 - выключена, любое другое число не измен€ет текущее значение.
		- **<б¬кл–ежимќтладки** - тип: „исло. ¬ходной параметр: 1 - включен, 0 - выключен, любое другое число не измен€ет текущее значение.

	**ќписание:** ћетод измен€ет установки ¬ , которые настраиваютс€ 
	в параметрах на закладке Ќастройки 1—++, почитать о которых можно в classes.chm.

.. _«агрузитьќписание лассов:

«агрузитьќписание лассов / ReadDefinesOfClasses
---------------------------------------------------------------------------------------
	**—интаксис:** «агрузитьќписание лассов(»м€‘айла»ли—трокаќписани€ лассов)

	**ѕараметры:**
		- **»м€‘айла»ли—трокаќписани€ лассов** - тип: —трока. »м€ файла описани€ класса или классов. »ли строка с непосредственным описанием класса/классов.

	**ќписание:** «агружает описани€ классов и сами классы из соответствующих файлов или строк описани€. 
	
	—интаксис описани€ и реализации классов - это обычный синтаксис 1—++ 

ѕолучить»менаЅазовых лассов / GetBaseClasses
---------------------------------------------------------------------------------------
	**—интаксис:** ѕолучить»менаЅазовых лассов(»м€ ласса)

	**ѕараметры:**
		- **»м€ ласса** - тип: —трока. »м€ класса.

	**¬озвращаемое значение:**
		тип: —писок«начений. —писок значений, значени€ в котором есть наименовани€ базовых классов.

	**ќписание:** ѕолучает список базовых классов дл€ указанного класса.

явл€етс€ќбъектом / TheClassIs
---------------------------------------------------------------------------------------
	**—интаксис:** явл€етс€ќбъектом(Ќазваниеѕровер€емого“ипа, Ќазвание“ипаЌа оторыйѕровер€ем)

	**ѕараметры:**
		- **Ќазваниеѕровер€емого“ипа** - тип: —трока. »м€ типа, который провер€ем.
		- **Ќазвание“ипаЌа оторыйѕровер€ем** - тип: —трока. »м€ типа, на который провер€ем.

	**¬озвращаемое значение:**
		тип: „исло. 1 - €вл€етс€, 0 - нет.

	**ќписание:** ¬озвращает 1, если провер€емый тип совпадает со вторым типом или провер€емый тип €вл€етс€ наследников от второго типа.
	
	¬озвращает 0 в обратном случае.

ѕолучить¬ерсию‘айла / GetFileVersion
---------------------------------------------------------------------------------------
	**—интаксис:** ѕолучить¬ерсию‘айла([ѕуть‘айла = ""], [»м€ѕол€—труктуры¬ерсии = ""])

	**ѕараметры:**
		- **ѕуть‘айла** - тип: —трока.ѕуть к файлу. ≈сли путь не задан, значит, подразумеваетс€ путь к ¬  1—++, т.е. к исходному файлу 1cp.dllp.
		- **»м€ѕол€—труктуры¬ерсии** - тип: —трока. »м€ пол€. Ќапример,	PrivateBuild, SpecialBuild, FileVersion

	**¬озвращаемое значение:**
		тип: —трока. «начение указанного пол€ структуры версии дл€ указанного файла.

	**ќписание:** ѕолучает данные о любом поле структуры версии файла.

.. _ќчиститьƒанныеќптимизации лассов:

ќчиститьƒанныеќптимизации лассов / ClearClassOptimizationData
---------------------------------------------------------------------------------------
	**—интаксис:** ќчиститьƒанныеќптимизации лассов()

	**ќписание:** ѕозвол€ет сбросить метаданные у пользовательских классов.
	
	ѕосле исполнени€ данного метода классы при создании будут заново 
	перекомпилированы, независимо от включени€/выключени€ режима ќптимизаци€.
	
	**¬нимание:** ћетод удобно использовать дл€ динамического обновлени€ классов без перезагрузки пользователей из 1—.

	‘актически данный метод позвол€ет всегда включать режим ќптимизации дл€ большего ускорени€ и динамически перезагружать классы в режиме ѕредпри€тии в случае их	обновлени€.
