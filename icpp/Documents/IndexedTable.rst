.. Автор: Алексей Диркс aka ADirks, mailto: adirks@ngs.ru

.. include:: commonchm.txt


#####################################################################
ИндексированнаяТаблица
#####################################################################
..	<chminfo>
		<insert nodes="//common/maininfo/*"/>
		<alinks>_1cpp_index_table_</alinks>
		<klinks>
			ИндексированнаяТаблица
			IndexedTable
		</klinks>
	</chminfo>

.. contents:: Содержание
	:backlinks: none

**Класс "ИндексированнаяТаблица" / "IndexedTable".**

Аналог встроенного типа "ТаблицаЗначений", дополненный возможностью создавать и использовать индексы
над таблицей. Индексы строятся в виде двоичных поисковых деревьев, таким образом - получаем затраты на
поиск O(log2(N)), тогда как в стандартном типе "ТаблицаЗначений" поиск осуществляется перебором строк,
и следовательно, затраты на поиск - O(N).

Индекс может быть двух типов:
   1) по всем строкам таблицы;
   2) по строкам с уникальными значениями ключа. Строки с повторяющимися значениями ключа будут проигнорированы, и в операции перебора строк, суммирования, свёртки, выгрузки, загрузки не попадут.

Использование индексов даёт и другие преимущества, кроме ускорения поиска:
	- возможность поиска по нескольким значениям (по составному ключу);
	- наличие нескольких индексов для одной таблицы, независимые выборки для каждого индекса;
	- поиск по условиям "больше либо равно", "меньше либо равно";
	- построение индекса только по уникальным значениям даёт возможность получить список уникальных
	  ключей без свёртывания таблицы;
	- свёртка по существующему индексу - при этом не теряется время на построение временного индекса;
	- динамическая фильтрация строк;
	- суммирование и свёртка по динамическому фильтру.


Таблица всегда имеет 1 индекс (в дальнейшем будем называть его "основной индекс"), который нельзя удалить.
Номер этого индекса - 1, имя - "" (пустая строка). Если в операциях, использующих индекс, не
указано имя индекса, то используется основной индекс. При операциях перепозиционирования
(ВНачало(), СледующаяСтрока(), ПредыдущаяСтрока() и т.д.)  основной индекс позиционируется на ту же строку.


=====================================================================
Свойства
=====================================================================
..	<chminfo split="0" splitchild="1">
		<insert nodes="//common/propsmethods/*"/>
	</chminfo>

НомерСтроки / RowNumber
------------------------------------------------
	**Доступ:** чтение и запись.

	**Тип:** Число.

	**Описание:** Номер текущей строки в основном индексе. Если строка не выбрана, то 0.

<ИмяКолонки>
------------------------------------------------
	**Доступ:** чтение и запись.

	**Тип:** любой.

	**Описание:** Обращение к значениям колонок, созданных методом НоваяКолонка().


=====================================================================
Методы
=====================================================================
..	<chminfo split="0" splitchild="1">
		<insert nodes="//common/propsmethods/*"/>
	</chminfo>

НоваяКолонка / NewColumn
------------------------------------------------
	**Синтаксис:** НоваяКолонка(стрИмяКолонки)

	**Параметры:**
		- **стрИмяКолонки** - тип: Строка. Идентификатор создаваемой колонки. В идентификаторе колонки можно
		  использовать любые символы, но следует помнить, что символы '-', '*', '#', '^' и '&' используются
		  как модификаторы при построении индексных выражений, и по колонкам с такими символами построить индекс будет
		  невозможно.

	**Возвращает:** тип: Число. Номер созданной колонки.

	**Описание:** Создаёт колонку в таблице.

ПереименоватьКолонку / RenameColumn
------------------------------------------------
	**Синтаксис:** ПереименоватьКолонку(Колонка, стрНовоеИмяКолонки)

	**Параметры:**
		- **Колонка** - тип: Строка, Число. Идентификатор или номер колонки.
		- **стрНовоеИмяКолонки** - тип: Строка. Новый идентификатор колонки.

	**Описание:** Переименовывает колонку таблицы.

УдалитьКолонку / RemoveColumn
------------------------------------------------
	**Синтаксис:** УдалитьКолонку(Колонка)

	**Параметры:**
		- **Колонка** - тип: Строка, Число. Идентификатор или номер колонки.

	**Описание:** Удаляет указанную колонку.

КоличествоКолонок / ColumnCount
------------------------------------------------
	**Синтаксис:** КоличествоКолонок()

	**Возвращает:** тип:  Число. Количество колонок в таблице.

	**Описание:** Возвращает количество колонок в таблице.


ИмяКолонки / ColumnName
------------------------------------------------
	**Синтаксис:** ИмяКолонки(Колонка)

	**Параметры:**
		- **Колонка** - тип: Строка, Число. Идентификатор или номер колонки.

	**Возвращает:** тип: Строка. Идентификатор колонки. Если такой колонки нет, то возникает исключение.

	**Описание:** Возвращает идентификатор указанной колонки, как он был задан в методе НоваяКолонка().

НомерКолонки / ColumnNumber
------------------------------------------------
	**Синтаксис:** НомерКолонки(Колонка)

	**Параметры:**
		- **Колонка** - тип: Строка, Число. Идентификатор или номер колонки.

	**Возвращает:** тип: Число. Номер колонки.

	**Описание:** Возвращает номер указанной колонки.

НоваяСтрока / NewRow
------------------------------------------------
	**Синтаксис:** НоваяСтрока()

	**Возвращает:** тип: Число. Номер созданной строки.

	**Описание:** Cоздаёт новую строку в конце таблицы.

УдалитьСтроку / RemoveRow
------------------------------------------------
	**Синтаксис:** УдалитьСтроку(чСтрока)

	**Параметры:**
		- **чСтрока** - тип: Число. Номер удаляемой строки

	**Описание:** Удаляет указанную строку.

УдалитьСтроки / RemoveRows
------------------------------------------------
	**Синтаксис:** УдалитьСтроки([Индекс])

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. Если параметр указан, и по данному
		  индексу установлен фильтр, то удалятся строки, удовлетворяющие условиям фильтра.

	**Описание:** Удаляет строки из таблицы. Если указан индекс, то при удалении учитывается наложенный фильтр.

КоличествоСтрок / RowCount
------------------------------------------------
	**Синтаксис:** КоличествоСтрок([Индекс = ""], [флТолькоУникальные = 0])

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. Если параметр указан, и по данному
		  индексу установлен фильтр, то считаются только строки, удовлетворяющие условиям фильтра.
		- **флТолькоУникальные** - тип: Число. Флаг учета только уникальных значений индекса.

	**Возвращает:** тип: Число. количество строк в таблице.

	**Описание:** Возвращает количество строк в таблице.

НомерСтроки / RowNumber
------------------------------------------------
	**Синтаксис:** НомерСтроки(Индекс)

	**Параметры:**
		- **Индекс** - тип: Строка, Число. идентификатор или номер индекса.

	**Возвращает:** тип: Число. Номер текущей строки в указанном индексе. Если строка не выбрана, то 0.

	**Описание:** Возвращает текущий номер строки в выборке для указанного индекса.

Очистить / Cleanup
------------------------------------------------
	**Синтаксис:** Очистить()

	**Описание:** Полная очистка таблицы. Удаляются все индексы, строки и колонки.

ДобавитьИндекс / AddIndex
------------------------------------------------
	**Синтаксис:** ДобавитьИндекс(стрИдентификатор, стрВыражение, [чТолькоУникальныеЗначения = 0])

	**Параметры:**
		- **стрИдентификатор** - тип: Строка. Идентификатор создаваемого индекса;
		- **стрВыражение** - тип: Строка. Индексное выражение.  Индексное выражение состоит из списка
		  идентификаторов колонок, разделённого запятыми.
		  Если перед именем колонки стоит символ '-', то сортировка осуществляется в обратном порядке.
		  Если перед именем колонки стоит символ '*', то сортировка осуществляется по внутреннему
		  представлению объекта.
		  Если перед именем колонки стоит символ '#', то перед сравнением строк обрезаются пробелы слева и справа.
		  Если перед именем колонки стоит символ '^', то строки сравниваются без учёта регистра.
		  Модификаторы сортировки ('-', '*', "#", "^") можно использовать в любых сочетаниях.
		  Индексное выражение может быть пустой строкой - это эквивалентно сортировке по номеру
		  строки, или отсутствию сортировки (фильтр на такой индекс установить нельзя).
		- **чТолькоУникальныеЗначения** - тип: Число. Если 1, то в индекс попадут только строки,
		  содержащие уникальные значения индекса. Строки с повторяющимися индексами будут
		  проигнорированы, и в операции перебора строк, суммирования, свёртки, выгрузки,
		  загрузки не попадут.

	**Возвращает:** тип: Число. Номер созданного индекса.

	**Описание:** Добавляет индекс к таблице.

УдалитьИндекс / DropIndex
------------------------------------------------
	**Синтаксис:** УдалитьИндекс(Индекс)

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса.

	**Описание:** Удаление указанного индекса.

КоличествоИндексов / IndexCount
------------------------------------------------
	**Синтаксис:** КоличествоИндексов()

	**Возвращает:** тип: Число. Количество индексов в таблице.

	**Описание:** Возвращает количество индексов в таблице.

ИмяИндекса / IndexName
------------------------------------------------
	**Синтаксис:** ИмяИндекса(Индекс)

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса.

	**Возвращает:** тип: Строка. Имя индекса.
	  Если индекс отсутствует в таблице, генерируется исключение.

	**Описание:** Возвращает имя индекса.

ВыражениеИндекса / IndexExpr
------------------------------------------------
	**Синтаксис:** ВыражениеИндекса(Индекс)

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса.

	**Возвращает:** тип: Строка. Индексное выражение.
	  Если индекс отсутствует в таблице, генерируется исключение.

	**Описание:** Возвращает индексное выражение для заданного индекса.

НомерИндекса / IndexNumber
------------------------------------------------
	**Синтаксис:** НомерИндекса(Индекс)

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса.

	**Возвращает:** тип: Число. Номер индекса.
	  Если индекс отсутствует в таблице, функция возвращает 0.

	**Описание:** Возвращает номер индекса.

Сортировать / Sort
------------------------------------------------
	**Синтаксис:** Сортировать(стрВыражение)

	**Параметры:**
		- **стрВыражение** - тип: Строка. Индексное выражение.  Индексное выражение состоит из списка
		  идентификаторов колонок, разделённого запятыми. Если перед именем колонки стоит символ '-',
		  то сортировка осуществляется в обратном порядке. Если перед именем колонки стоит символ '*',
		  то сортировка осуществляется по внутреннему представлению объекта. Если индексное выражение
		  - пустая строка, то сортировка выключается (фильтр на такой индекс установить нельзя).

	**Описание:** Изменение сортировки в основном индексе.

ИндексУникален / IndexIsUnique
------------------------------------------------
	**Синтаксис:** ИндексУникален([Индекс = ""])

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса.

	**Возвращает:** тип: Число. 1 - в таблице нет строк, с повторяющимися значениями ключа;
	0 - таблица содержит строки с одинаковыми значениями ключа.

	**Описание:** проверяет, уникален ли индекс.

КоличествоУникальныхКлючей / UniqueKeyCount
------------------------------------------------
	**Синтаксис:** КоличествоУникальныхКлючей([Индекс = ""])

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса.

	**Возвращает:** тип: Число. Количество уникальных ключей.

	**Описание:** возвращает количество уникальных ключей по указанному индексу.

КоличествоЗначенийКлюча / KeyValueCount
------------------------------------------------
	**Синтаксис:** КоличествоЗначенийКлюча([Индекс = ""], Ключ)

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса.
		- **Ключ** - тип: любой. Если индекс построен по одной колонке - то значение поиска.
		  Если же индекс по нескольким колонкам, то это должен быть СписокЗначений,
		  содержащий значения ключевых колонок, заданных в методе  ДобавитьИндекс().

	**Возвращает:** тип: Число. Количество строк с указанным ключом.

	**Описание:** возвращает количество строк, для которых значение ключа равно параметру Ключ.

НайтиСтроку / FindRow
------------------------------------------------
	**Синтаксис:** НайтиСтроку(Индекс, Ключ, [чНайтиПоследнюю  = 0], [чСпозиционироваться = 0])

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса.
		- **Ключ** - тип: любой. Если индекс построен по одной колонке - то значение поиска.
		  Если же индекс по нескольким колонкам, то это должен быть СписокЗначений,
		  содержащий значения ключевых колонок, заданных в методе  ДобавитьИндекс().
		- **чНайтиПоследнюю** - тип: Число. Если 1, то будет найдена последняя строк с совпадающим значением ключа.
		- **чСпозиционироваться** - тип: Число. Если 1, то при успешном поиске индекс будет спозиционирован на
		  найденной строке.
		  Если перед выполнением метода была открыта выборка (методом ВыбратьСтроки), то она перепозиционируется
		  на найденное значение. Если выборка не была открыта, то она открывается, и после успешного поиска
		  могут быть использованы методы ПолучитьСтроку(), СледующаяСтрока() и ПредыдущаяСтрока().
		  Основной индекс также перепозиционируется.

	**Возвращает:** тип: Число. Номер найденной строки. Если ничего не найдено, то 0.

	**Описание:** Найти строку, точно соответствующую ключу.

НайтиБлижайшуюБольше / FindNearestGE
------------------------------------------------
	**Синтаксис:** НайтиБлижайшуюБольше(Ключ, [Индекс = ""], [чСпозиционироваться = 0])

	**Параметры:**
		- **Ключ** - тип: любой. Если индекс построен по одной колонке - то значение поиска.
		  Если же индекс по нескольким колонкам, то это должен быть СписокЗначений,
		  содержащий значения ключевых колонок, заданных в методе  ДобавитьИндекс().
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. По умолчанию используется основной индекс.
		- **чСпозиционироваться** - тип: Число. Если 1, то при успешном поиске индекс будет спозиционирован на
		  найденной строке.
		  Если перед выполнением метода была открыта выборка (методом ВыбратьСтроки), то она перепозиционируется
		  на найденное значение. Если выборка не была открыта, то она открывается, и после успешного поиска
		  могут быть использованы методы ПолучитьСтроку(), СледующаяСтрока() и ПредыдущаяСтрока().
		  Основной индекс также перепозиционируется.

	**Возвращает:** тип: Число. Номер найденной строки. Если ничего не найдено, то 0.

	**Описание:** Найти строку, которая равна или больше ключа.

НайтиБлижайшуюМеньше / FindNearestLE
------------------------------------------------
	**Синтаксис:** НайтиБлижайшуюМеньше(Ключ, [Индекс = ""], [чСпозиционироваться = 0])

	**Параметры:**
		- **Ключ** - тип: любой. Если индекс построен по одной колонке - то значение поиска.
		  Если же индекс по нескольким колонкам, то это должен быть СписокЗначений,
		  содержащий значения ключевых колонок, заданных в методе  ДобавитьИндекс().
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. По умолчанию используется основной индекс.
		- **чСпозиционироваться** - тип: Число. Если 1, то при успешном поиске индекс будет спозиционирован на
		  найденной строке.
		  Если перед выполнением метода была открыта выборка (методм ВыбратьСтроки), то она перепозиционируется
		  на найденное значение. Если выборка не была открыта, то она открывается, и после успешного поиска
		  могут быть использованы методы ПолучитьСтроку(), СледующаяСтрока() и ПредыдущаяСтрока().
		  Основной индекс также перепозиционируется.

	**Возвращает:** тип: Число. Номер найденной строки. Если ничего не найдено, то 0.

	**Описание:** Найти строку, которая равна или меньше ключа.

УстановитьФильтр / SetFilter
------------------------------------------------
	**Синтаксис:** УстановитьФильтр(КлючМин, КлючМакс, [Индекс = ""], [чТолькоУникальные = 0], [чИнверсия = 0])

	**Параметры:**
		- **КлючМин** - тип: любой. Нижняя граница фильтра. Задаётся так же, как в методе НайтиСтроку().
		- **КлючМакс** - тип: любой. Верхняя границы фильтра. Задаётся так же, как в методе НайтиСтроку().
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. По умолчанию используется основной индекс.
		- **чТолькоУникальные** - тип: Число. Если 1 - то в выборку попадут только строки с уникальным
		  значением ключа.
		- **чИнверсия** - тип: Число. 0 - обычный фильтр, 1 - инверсный фильтр.

		Если индекс построен по одной колонке, то в качестве ключей можно использовать значение колонки.
		Если же индекс по нескольким колонкам, то ключ должен быть СписокЗначений,
		содержащий значения ключевых колонок, заданных в методе  ДобавитьИндекс().

		Один из ключей может быть опущен - при этом в качестве опущеного значения будет автоматически
		задействовано минимально/максимально возможное значение. Т.е. фильтр будет с открытой границей.

	**Описание:** устанавливает динамический фильтр на таблицу по указанному индексу.
	Фильтр влияет на работу методов: ВНачало(), ВыбратьСтроки(), ВКонец(), ПолучитьСтроку(),
	СледующаяСтрока(), ПредыдущаяСтрока(),Свернуть(),Итог(), ЗаполнитьКолонку(),
	Выгрузить(), Загрузить(), Объединить().

Подмножество / Subset
------------------------------------------------
	**Синтаксис:** Подмножество(сзКлюч, чКоличествоФиксКолонок, [Индекс = ""])

	**Параметры:**
		- **сзКлюч** - тип: СписокЗначений. Список, содержащий значения фиксируемых колонок индекса.
		- **чКоличествоФиксКолонок** - тип: Число. Количество фиксируемых колонок индекса
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. По умолчанию используется основной индекс.

	**Описание:** устанавливает фильтр, фиксируя значения первых колонок индекса.

	Пример::

		ТЗ.ДобавитьИндекс("и1", "к1, к2");
		сзКлюч = СоздатьОбъект("СписокЗначений");
		сзКлюч.ДобавитьЗначение(5);
		ТЗ.Подмножество(сзКлюч, 1, "и1");

	в результате в выборке будут только те строки, у которых колонка к1 = 5.

ВыключитьФильтр / DropFilter
------------------------------------------------
	**Синтаксис:** ВыключитьФильтр([Индекс = ""])

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса.

	**Описание:** выключает фильтр у указанного индекса.

ВНачало / FirstRow
------------------------------------------------
	**Синтаксис:** ВНачало([Индекс = ""], [флТолькоУникальные = 0])

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. По умолчанию используется основной индекс.
		- **чТолькоУникальные** - тип: Число. Флаг выборки по уникальным значениям.
		  Флаг влияет на результат всех последующих вызовов методов ПолучитьСтроку(), СледующаяСтрока(), ПредыдущаяСтрока() по данной выборке.

	**Возвращает** тип: Число. 1 - операция завершилась успешно, 0 - выборка пуста.

	**Описание:** позиционируется перед первой строкой указанного индекса, так что метод
	СледующаяСтрока() спозиционируется на первой строке.

ВыбратьСтроки / SelectRows
------------------------------------------------
	**Синтаксис:** ВыбратьСтроки([Индекс = ""], [флТолькоУникальные = 0])

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. По умолчанию используется основной индекс.
		- **чТолькоУникальные** - тип: Число. Флаг выборки по уникальным значениям.
		  Флаг влияет на результат всех последующих вызовов методов ПолучитьСтроку(), СледующаяСтрока(), ПредыдущаяСтрока() по данной выборке.

	**Возвращает** тип: Число. 1 - операция завершилась успешно, 0 - выборка пуста.

	**Описание:** позиционируется перед первой строкой указанного индекса, так что метод
	ПолучитьСтроку() спозиционируется на первой строке.

ВКонец / LastRow
------------------------------------------------
	**Синтаксис:** ВКонец([Индекс = ""], [флТолькоУникальные = 0])

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. По умолчанию используется основной индекс.
		- **чТолькоУникальные** - тип: Число. Флаг выборки по уникальным значениям.
		  Флаг влияет на результат всех последующих вызовов методов ПолучитьСтроку(), СледующаяСтрока(), ПредыдущаяСтрока() по данной выборке.

	**Возвращает** тип: Число. 1 - операция завершилась успешно, 0 - выборка пуста.

	**Описание:** позиционируется после последней строки указанного индекса, так что метод
	ПредыдущаяСтрока() спозиционируется на последней строке.

СледующаяСтрока / Next
------------------------------------------------
	**Синтаксис:** СледующаяСтрока([Индекс = ""], [чТолькоУникальные = 0])

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. По умолчанию используется основной индекс.
		- **чТолькоУникальные** - тип: Число. 1 - будет получена следующая строка с отличающимся значением
		  ключа, все повторяющиеся строки будут пропущены.

	**Возвращает** тип: Число. 1 - операция завершилась успешно, 0 - больше нет строк.

	**Описание:** переход к следующей строке индекса.

	**Примечание:** флаг уникальной выборки, установленный в 1 в методах ВНачало() и ВКонец() имеет приоритет над флагом данного метода.

ПолучитьСтроку / GetRow
------------------------------------------------
	**Синтаксис:** ПолучитьСтроку([Индекс = ""], [чТолькоУникальные = 0])

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. По умолчанию используется основной индекс.
		- **чТолькоУникальные** - тип: Число. 1 - будет получена следующая строка с отличающимся значением
		  ключа, все повторяющиеся строки будут пропущены.

	**Возвращает** тип: Число. 1 - операция завершилась успешно, 0 - больше нет строк.

	**Описание:** переход к следующей строке индекса.

	**Примечание:** флаг уникальной выборки, установленный в 1 в методах ВНачало() и ВКонец(), имеет приоритет над флагом данного метода.

ПредыдущаяСтрока / Previous
------------------------------------------------
	**Синтаксис:** ПредыдущаяСтрока([Индекс = ""], [чТолькоУникальные = 0])

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. По умолчанию используется основной индекс.
		- **чТолькоУникальные** - тип: Число. 1 - будет получена следующая строка с отличающимся значением
		  ключа, все повторяющиеся строки будут пропущены.

	**Возвращает** тип: Число. 1 - операция завершилась успешно, 0 - больше нет строк.

	**Описание:** переход к предыдущей строке индекса.

	**Примечание:** флаг уникальной выборки, установленный в 1 в методах ВНачало() и ВКонец(), имеет приоритет над флагом данного метода.

ПолучитьЗначение / GetValue
------------------------------------------------
	**Синтаксис:** ПолучитьЗначение([чСтрока = ПустоеЗначение], Колонка)

	**Параметры:**
		- **чСтрока** - тип: Число. Номер строки. Если номер строки не указан, то берётся текущая строка.
		- **Колонка** - тип: Строка, Число. Идентификатор или номер колонки.

	**Возвращает** тип: любой. Значение ячейки таблицы.

	**Описание:** возвращает значение в указанной ячейке таблицы.

Получить / Get
------------------------------------------------
	**Синтаксис:** Получить(чСтрока, Колонка)

	**Описание:** синоним метода ПолучитьЗначение().

УстановитьЗначение / SetValue
------------------------------------------------
	**Синтаксис:** УстановитьЗначение([чСтрока = ПустоеЗначение], Колонка, Значение)

	**Параметры:**
		- **чСтрока** - тип: Число. Номер строки. Если номер строки не указан, то устанавливается
		  значение в текущей строке.
		- **Колонка** - тип: Строка, Число. Идентификатор или номер колонки.
		- **Значение** - тип: любой. Новое значение ячейки.

	**Описание:** устанавливает значение указанной ячейки.

Установить / Set
------------------------------------------------
	**Синтаксис:** Установить(чСтрока, Колонка, Значение)

	**Описание:** синоним метода УстановитьЗначение().

Свернуть / GroupBy
------------------------------------------------
	**Синтаксис:** Свернуть(стрКолонкиСвёртки, стрКолонкиСумм [, ИмяСуществующегоИндекса = ""])

	**Параметры:**
		- **стрКолонкиСвёртки** - тип: Строка. Список колонок, по которым будет осуществляться свёртка. Эта строка
		  полностью аналогична индексному выражению в методе ДобавитьИндекс(). Для свёртки таблица сначала
		  индексируется по этому выражению, а затем строки с одинаковым индексом суммируются. Результат
		  всегда помещается в первую по номеру строку, все остальные строки удаляются.
		- **стрКолонкиСумм** - тип: Строка. Список колонок, которые нужно просуммировать. Разделитель  - символ ','.
		  Пробелы игнорируются.
		- **ИмяСуществующегоИндекса**  - тип: Стрка, Число. Если указано имя индекса, то КолонкиСвёртки
		  игнорируются, а свёртка осуществляется по указанному индексу. В свёртке учавствуют только
		  те строки, которые входят в фильтр.

	**Описание:** сворачивает таблицу по колонкам <КолонкиСвёртки>, суммируя значения в
	колонках <КолонкиСумм>. Колонки, не вошедшие в <КолонкиСвёртки> и <КолонкиСумм> из
	таблицы не удаляются. Свёртка возможна и по существующему индексу - при этом не теряется
	время на построение временного индекса, и возможна выборочная свёртка по текущему фильтру индекса.

Итог / Sum
------------------------------------------------
	**Синтаксис:** Итог(КолонкаСуммы, [Индекс = ""])

	**Параметры:**
		- **КолонкаСуммы** - тип: Строка, Число. Колонка, по которой нужно получить сумму.
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. По умолчанию используется основной индекс.

	**Возвращает** тип: Число. Сумма по указанной колонке.

	**Описание:** считает сумму по указанной колонке, при этом учитывается фильтр индекса.

ИтогПоДиапазону / SumByRange
------------------------------------------------
	**Синтаксис:** ИтогПоДиапазону(КолонкаСуммы, [Индекс = ""], КлючМин, КлючМакс)

	**Параметры:**
		- **КолонкаСуммы** - тип: Строка, Число. Колонка, по которой нужно получить сумму.
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. По умолчанию используется основной индекс.
		- **КлючМин** - тип: любой. Нижняя граница диапазона. Задаётся так же, как в методе НайтиСтроку().
		- **КлючМакс** - тип: любой. Верхняя границы диапазона. Задаётся так же, как в методе НайтиСтроку().

	**Возвращает** тип: Число. Сумма по указанной колонке.

	**Описание:** считает сумму по указанной колонке, с заданием диапазона суммирования.
	Функция не учитывает установленные фильтры и сама перманентных фильтров не устанавливает.

ИтогПоУзлу / NodeSum
------------------------------------------------
	**Синтаксис:** ИтогПоУзлу(КолонкаСуммы  [, Индекс])

	**Параметры:**
		- **КолонкаСуммы** - тип: Строка, Число. Колонка, по которой нужно получить сумму.
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. По умолчанию используется основной индекс.

	**Возвращает:** тип: Число. Сумма по указанной колонке. Если выборка не активна (нет
	текущего узла), то возвращает 0.

	**Описание:** считает сумму по указанной колонке для текущего узла индексного дерева.
	Имеет смысл, когда индекс не уникален, и нужно посчитать итог по текущему ключу.

	Пример: на входе имеем таблицу

	===========  ===========
	  Фамилия       Сумма
	===========  ===========
	  Иванов       100
	  Иванов       120
	  Иванов       200
	  Петров       500
	  Петров       600
	===========  ===========

::

	ТЗ.ДобавитьИндекс("Фамилия", "Фамилия", 0);
	ТЗ.НайтиСтроку("Фамилия", "Иванов", 0, 1); //позиционируемся на узел, в котором собраны все строки с фамилией Иванов
	Сум = ТЗ.ИтогПоУзлу("Сумма", "Фамилия"); //вернёт 420  (100 + 120 + 200)
	ТЗ.НайтиСтроку("Фамилия", "Петров", 0, 1); //позиционируемся на узел, в котором собраны все строки с фамилией Петров
	Сум = ТЗ.ИтогПоУзлу("Сумма", "Фамилия"); //вернёт 1100  (500 + 600)

Группировать / Group
------------------------------------------------
	**Синтаксис:** Группировать(стрГруппировки, стрКолонкиСумм, [чРасшифровкаПоследнегоУровня = 0])

	**Параметры:**
		- **стрГруппировки** - тип: Строка. Строка, описывающая требуемую структуру группировки. Задаётся в виде
		  <ИмяИндекса1>: <ИндексноеВыражение1> [; <ИмяИндекса2>: <ИндексноеВыражение2> ... ].
		  ИндексноеВыражение - строка в том же формате, что и для метода ДобавитьИндекс(), с одним
		  дополнением: если в списке модификаторов колонки присутствует символ '&', то по этой колонке
		  будут посчитаны итоги по группам справочника. Колонка с таким модификатором может быть
		  только одна на каждом уровне группировки.
		- **стрКолонкиСумм** - тип: Строка. Строка с колонками, по которым нужно считать суммы.
		- **чРасшифровкаПоследнегоУровня** - тип: Число. 1 - в каждой строке последнего
		  уровня группировки будет таблица с расшифровкой, содержащая строки исходной таблицы в
		  нетронутом виде. 0 - последний уровень будет свёрнут.

	**Описание:** формирует таблицу с древовидной структурой в соответствии с группировками.
	На каждом уровне группировки остаются только уникальные значения по соответствующему индексу.
	В колонки сумм записываются суммы по всем строкам с совпадающим значением ключа.
	Строки с совпадающими значениями ключа записываются в таблицу, которая помещается в колонку тзПотомки -
	эта колонка создаётся в процессе группировки.

	Пример: на входе имеем таблицу

	+----------+------------+---------+
	| Фамилия  | Имя        | Сумма   |
	+==========+============+=========+
	| Иванов   | Иван       | 100     |
	+----------+------------+---------+
	| Иванов   | Сергей     | 120     |
	+----------+------------+---------+
	| Петров   | Пётр       | 130     |
	+----------+------------+---------+
	| Петров   | Александр  | 200     |
	+----------+------------+---------+

	группируем её::

		ТЗ.Группировать("Фамилия: Фамилия; Имя: Имя", "Сумма");

	и получаем таблицу такого вида (в колонке тзПотомки показано содержимое таблицы тзПотомки):

	+----------+------------+---------+----------------------------------+
	| Фамилия  | Имя        | Сумма   | тзПотомки                        |
	|          |            |         +----------+------------+----------+
	|          |            |         | Фамилия  | Имя        | Сумма    |
	+==========+============+=========+==========+============+==========+
	| Иванов   | Иван       | 220     | Иванов   | Иван       | 100      |
	|          |            |         +----------+------------+----------+
	|          |            |         | Иванов   | Сергей     | 120      |
	+----------+------------+---------+----------+------------+----------+
	| Петров   | Пётр       | 330     | Петров   | Пётр       | 130      |
	|          |            |         +----------+------------+----------+
	|          |            |         | Петров   | Александр  | 200      |
	+----------+------------+---------+----------+------------+----------+


	При группировке возможно также подсчитывать суммы по группам справочников - для этого в списке
	модификаторов индекса нужно указать '&'. Если в таблице есть колонка с именем
	'<ИмяКолонкиСправочника>_Родитель', то родитель для элемента будет браться из этой колонки -
	это уменьшает количество обращений к базе, и заметно увеличивает производительность.
	Итоговая таблица будет организована в виде дерева, в точности повторяющего структуру справочника.
	Следующий уровень группировки располагается в листьях этого дерева (т.е. в строках, не являющихся группами).
	Для удобства работы с полученным деревом в таблицу добавляется колонка '__ЭтоГруппа__', в которую
	записывается 1 для всех групп, и ПустоеЗначение для элементов. Также добавляется колонка '__Уровень__',
	которая заполняется значением уровня групп справочника (нумерация начинается с 1). Для элементов
	в колонку '__Уровень__' записывается ПустоеЗначение.

ЗаполнитьСтроку / FillRow
------------------------------------------------
	**Синтаксис:** ЗаполнитьСтроку([чНомерСтроки = 0], Источник, [чНомерСтрокиИсточника = 0], [чПоИменамКолонок = 0])

	**Параметры:**
		- **чНомерСтроки** - тип: Число. Номер строки, которую нужно заполнить. Если <= 0, то заполняется
		  текущая строка.
		- **Источник** - тип: ИндексированнаяТаблица, ТаблицаЗначений, Список значений.
		  Источник данных для заполнения строки.
		- **чНомерСтрокиИсточника** - тип: Число. Номер строки в таблице-источнике.  По умолчанию берётся
		  текущая строка в предопределённом индексе. Если Источник - СписокЗначений, то этот
		  параметр игнорируется.
		- **чПоИменамКолонок** - тип: Число. 0 - значения из источника копируются по номерам колонок;
		  1 - значения копируются по именам колонок.  Если в приёмнике нет колонки с таким
		  именем, то значение не копируется. Если Источник - СписокЗначений, то именами колонок
		  считаются символьные представления значений.

	**Описание:** заполняет строку таблицы из строки другой таблицы, или из списка значений.

ЗаполнитьКолонку / FillColumn  (вариант 1)
------------------------------------------------
..	<chminfo>
		<autokw/>
		<klinks>
			ЗаполнитьКолонку
			FillColumn
		</klinks>
		<alinks>_1cpp_it_fillcolumn_</alinks>
		<seealso>_1cpp_it_fillcolumn_</seealso>
	</chminfo>
..

	**Синтаксис:** ЗаполнитьКолонку([Индекс = ""], Колонка, Источник, [ИндексИсточника = ""], [КолонкаИсточника = ""])

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса, по которому упорядочиваются и фильтруются
		  строки заполняемой таблицы. По умолчанию используется основной индекс.
		- **Колонка** - тип: Строка, Число. Идентификатор или номер заполняемой колонки.
		- **Источник** - тип: ИндексированнаяТаблица. Источник данных для заполнения колонки.
		- **ИндексИсточника** - тип: Строка, Число. Идентификатор или номер индекса, по которому упорядочиваются и фильтруются
		  строки таблицы-источника. По умолчанию используется основной индекс.
		- **КолонкаИсточника** - тип: Строка, Число. Идентификатор или номер колонки, из которой будут
		  браться значения.
		  Если параметр не указан, то колонка-источник определяется параметром **Колонка**.

	**Описание:** заполняет колонку таблицы из колонки другой индексированной таблицы.

ЗаполнитьКолонку / FillColumn  (вариант 2)
------------------------------------------------
..	<chminfo>
		<autokw/>
		<klinks>
			ЗаполнитьКолонку
			FillColumn
		</klinks>
		<alinks>_1cpp_it_fillcolumn_</alinks>
		<seealso>_1cpp_it_fillcolumn_</seealso>
	</chminfo>
..

	**Синтаксис:** ЗаполнитьКолонку([Индекс = ""], Колонка, Источник, [КолонкаИсточника = ""])

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса, по которому упорядочиваются и фильтруются
		  строки заполняемой таблицы. По умолчанию используется основной индекс.
		- **Колонка** - тип: Строка, Число. Идентификатор или номер заполняемой колонки.
		- **Источник** - тип: ТаблицаЗначений, СписокЗначений. Источник данных для заполнения колонки.
		- **КолонкаИсточника** - номер или идентификатор колонки, из которой будут браться значения.
		  Если параметр не указан, то колонка-источник определяется параметром *Колонка*.
		  Для списка значений параметр игнорируется.

	**Описание:** заполняет колонку таблицы из колонки другой таблицы (ТаблицаЗначений) или списка значений.

ЗаполнитьКолонку / FillColumn  (вариант 3)
------------------------------------------------
..	<chminfo>
		<autokw/>
		<klinks>
			ЗаполнитьКолонку
			FillColumn
		</klinks>
		<alinks>_1cpp_it_fillcolumn_</alinks>
		<seealso>_1cpp_it_fillcolumn_</seealso>
	</chminfo>
..

	**Синтаксис:** ЗаполнитьКолонку([Индекс = ""], Колонка, Значение)

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса, по которому упорядочиваются и фильтруются
		  строки заполняемой таблицы. По умолчанию используется основной индекс.
		- **Колонка** - тип: Строка, Число. Идентификатор или номер заполняемой колонки.
		- **Значение** - тип: любой, кроме ИндексированнаяТаблица, ТаблицаЗначений, СписокЗначений.
		  Значение, которым будет заполнена колонка.

	**Описание:** заполняет колонку таблицы одним и тем же значением.

Выгрузить / Unload
------------------------------------------------
	**Синтаксис:** Выгрузить(Приемник [, Индекс = ""] [, Колонки = ""] [, чТолькоУникальные = 0])

	**Параметры:**
		- **Приемник** - тип: ИндексированнаяТаблица, ТаблицаЗначений, Документ, СписокЗначений, Неопределенный или произвольная коллекция или любой объект, поддерживающий универсальный интерфейс загрузки.
		  Переменная, в которую будет выгружена таблица.
		  Если это документ, то заполняется его табличная часть.
		  Если тип Неопределенный, то создаётся таблица типа ИндексированнаяТаблица.
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. По умолчанию используется основной индекс.
		- **Колонки** - тип: Строка, Число. Список колонок через запятую или номер колонки для выгрузки.
		  Если значение не задано или задана пустая строка, параметр игнорируется.
		- **чТолькоУникальные** - тип: Число. Флаг выгрузки только уникальных значений.

	**Описание:** выгружает текущую таблицу в другую таблицу, или в новую.  Если таблица-приёмник
	существует, то она полностью очищается.  Индексы при выгрузке не копируются.
	Выгрузка осуществляется с учётом  индекса и фильтра.

ВыгрузитьСтроку / Unload
------------------------------------------------
	**Синтаксис:** ВыгрузитьСтроку(Приемник, [чНомерСтроки = 0], [Колонки = ""], [чПоложениеИменКолонок = 0])

	**Параметры:**
		- **чНомерСтроки** - тип: Число. Номер строки.
			+ 0 - не выгружать данные
			+ не задан - выгружать данные текущей строки
			+ номер строки - выгружать данные заданной строки

		- **Приемник** - тип: СписокЗначений, ТаблицаЗначений, произвольная коллекция или любой объект, поддерживающий универсальный интерфейс загрузки.
		  Переменная, в которую будет выгружена таблица.
		- **Колонки** - тип: Строка, Число. Список колонок через запятую или номер колонки для выгрузки.
		  Если значение не задано или задана пустая строка, параметр игнорируется.
		- **чПоложениеИменКолонок** - тип: Число. Флаг выгрузки дополнительно имен колонок.
			+ 0 или не задан - не выгружать имена колонок
			+ 1 - выгружать имена колонок перед данными
			+ 2 - выгружать имена колонок после данных

			Если чПоложениеИменКолонок <> 0 и чНомерСтроки = 0, тогда будут 
			выгружены только имена колонок, данные строки не выгрузятся.
			Таким образом, результат может содержать одну колонку с именами колонок,
			либо одну колонку с данными строки, либо обе колонки вместе.
			Если значение не задано или задана пустая строка, параметр игнорируется.

	**Описание:** выгружает текущую или заданную строку таблицы в объект-коллекцию;
	коллекция-приемник не очищается.

Загрузить / Load
------------------------------------------------
	**Синтаксис:** Загрузить(Источник, [Индекс = ""], [Колонки = ""])

	**Параметры:**
		- **Источник** - тип: ИндексированнаяТаблица, ТаблицаЗначений, Документ. Таблица, из которой будут
		  загружены данные.
		  Если тип - Документ, то будет загружена табличная часть документа.
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса в таблице - источнике. По умолчанию используется
		  основной индекс.
		  Если параметр Источник имеет тип Документ, то Индекс интерпретируется как строка, содержащая список
		  полей табличной части документа.
		  Если Источник имеет тип ТаблицаЗначений, то этот параметр игнорируется.
		- **Колонки** - тип: Строка, Число. Список колонок через запятую или номер колонки для загрузки в таблице - источнике.
		  Определяет список колонкок, которые будут загружены в таблицу. Если значение не задано или задана пустая строка,
		  параметр игнорируется. Если источник имеет тип Документ, этот параметр игнорируется (используйте параметр Индекс).

	**Описание:** загружает данные из указанной таблицы, в соответствии с индексом.
	Перед загрузкой текущая таблица полностью очищается. Индексы не копируются.

ЗагрузитьЗапрос / LoadQuery
------------------------------------------------
	**Синтаксис:** ЗагрузитьЗапрос(Запрос, [чФлаг = 0], [чИтоги = 1])

	**Параметры:**
		- **Запрос** - тип: Запрос. Запрос, из которого будут загружены данные.
		- **чФлаг** - тип: Число, Строка. 0 - значения групп и функций (по умолчанию);
		  1 - значения групп и функций, дополнительных переменных;
		  2 - значения упорядочиваний групп и функций;
		  3 - значения упорядочиваний групп и функций, дополнительных переменных;
		  Строка - 'Товар(1), Товар(2), Товар, Склад, Приход, Расход', где Товар(1) - значение первого
		  упорядочивания группировки 'Товар'.
		- **чИтоги** - тип: Число.
		  0 - итоги по группировкам не выводить;
		  1 - итоги по группировкам выводить сверху (по умолчанию);
		  2 - итоги по группировкам выводить снизу;
		  3 - итоги по группировкам выводить сверху и снизу.

	**Описание:** загружает данные из указанного запроса. Перед загрузкой текущая таблица полностью очищается.

ВнутреннееСоединение / InnerJoin
------------------------------------------------
	**Синтаксис:** ВнутреннееСоединение(стрКолонкиЛевойИТ, ПраваяИТ, ИндексПравойИТ, стрКолонкиПравойИТ)

	**Параметры:**
		- **стрКолонкиЛевойИТ** - тип: Строка. Колонки, значения которых будут использованы для поиска строки в правой таблице.
		- **ПраваяИТ** - тип: ИндексированнаяТаблица. Присоединяемая таблица.
		- **ИндексПравойИТ** - тип: Строка, Число. Имя или номер индекса, по которому будут искаться строки в правой таблице.
		  Количество колонок индекса должно быть равно количеству колонок поиска (см. параметр *стрКолонкиЛевойИТ*).
		- **стрКолонкиПравойИТ** - тип: Строка. Список колонок, которые будут копироваться из правой таблицы в левую.
		  Список задаётся в формате "<ИмяКолИст>|<ИмяКолИст:ИмяКолНазн> [,...]". <ИмяКолИст> - имя колонки в правой таблице; 
		  если такой колонки нет в левой таблице, то она будет создана. <ИмяКолНазн> - если указана, то значение из колонки 
		  правой таблицы с названием <ИмяКолИст> будет скопировано в колонку левой таблицы <ИмяКолНазн>.

	**Описание:** Выполняет операцию, аналогичную команде SQL **Inner Join**. Для каждой строки из левой таблицы (левой 
	таблицей является текущий объект) добавляются все строки из правой таблицы, соответствующие ключевому выражению.
	Ключевое выражение определяется параметром *стрКолонкиЛевойИТ*. Из правой таблицы в левую переносятся значения 
	колонок, указанных в параметре *стрКолонкиПравойИТ*. Если строка левой таблицы не найдена в правой, то строка
	в левой таблице удаляется.


ЛевоеСоединение / LeftJoin
------------------------------------------------
	**Синтаксис:** ЛевоеСоединение(стрКолонкиЛевойИТ, ПраваяИТ, ИндексПравойИТ, стрКолонкиПравойИТ)

	**Параметры:**
		- **стрКолонкиЛевойИТ** - тип: Строка. Колонки, значения которых будут использованы для поиска строки в правой таблице.
		- **ПраваяИТ** - тип: ИндексированнаяТаблица. Присоединяемая таблица.
		- **ИндексПравойИТ** - тип: Строка, Число. Имя или номер индекса, по которому будут искаться строки в правой таблице.
		  Количество колонок индекса должно быть равно количеству колонок поиска (см. параметр *стрКолонкиЛевойИТ*).
		- **стрКолонкиПравойИТ** - тип: Строка. Список колонок, которые будут копироваться из правой таблицы в левую.
		  Список задаётся в формате "<ИмяКолИст>|<ИмяКолИст:ИмяКолНазн> [,...]". <ИмяКолИст> - имя колонки в правой таблице; 
		  если такой колонки нет в левой таблице, то она будет создана. <ИмяКолНазн> - если указана, то значение из колонки 
		  правой таблицы с названием <ИмяКолИст> будет скопировано в колонку левой таблицы <ИмяКолНазн>.

	**Описание:** Выполняет операцию, аналогичную команде SQL **Left Join**. Для каждой строки из левой таблицы (левой 
	таблицей является текущий объект) добавляются все строки из правой таблицы, соответствующие ключевому выражению.
	Ключевое выражение определяется параметром *стрКолонкиЛевойИТ*. Из правой таблицы в левую переносятся значения 
	колонок, указанных в параметре *стрКолонкиПравойИТ*. Если строка левой таблицы не найдена в правой, то значения 
	колонок левой таблицы **остаются неизменными**.


ПравоеСоединение / RightJoin
------------------------------------------------
	**Синтаксис:** ПравоеСоединение(стрКолонкиЛевойИТ, ПраваяИТ, ИндексПравойИТ, стрКолонкиПравойИТ)

	**Параметры:**
		- **стрКолонкиЛевойИТ** - тип: Строка. Колонки, значения которых будут использованы для поиска строки в правой таблице.
		- **ПраваяИТ** - тип: ИндексированнаяТаблица. Присоединяемая таблица.
		- **ИндексПравойИТ** - тип: Строка, Число. Имя или номер индекса, по которому будут искаться строки в правой таблице.
		  Количество колонок индекса должно быть равно количеству колонок поиска (см. параметр *стрКолонкиЛевойИТ*).
		- **стрКолонкиПравойИТ** - тип: Строка. Список колонок, которые будут копироваться из правой таблицы в левую.
		  Список задаётся в формате "<ИмяКолИст>|<ИмяКолИст:ИмяКолНазн> [,...]". <ИмяКолИст> - имя колонки в правой таблице; 
		  если такой колонки нет в левой таблице, то она будет создана. <ИмяКолНазн> - если указана, то значение из колонки 
		  правой таблицы с названием <ИмяКолИст> будет скопировано в колонку левой таблицы <ИмяКолНазн>.

	**Описание:** Выполняет операцию, аналогичную команде SQL **Right Join**. Для каждой строки из левой таблицы (левой 
	таблицей является текущий объект) добавляются все строки из правой таблицы, соответствующие ключевому выражению.
	Ключевое выражение определяется параметром *стрКолонкиЛевойИТ*. Из правой таблицы в левую переносятся значения 
	колонок, указанных в параметре *стрКолонкиПравойИТ*. Если строка левой таблицы не найдена в правой, то она удаляется.
	Если строка правой таблицы отсутствует в левой, то она добавляется,
	при этом все колонки кроме указанных в параметре *стрКолонкиПравойИТ* заполняются пустыми значениями.

ПолноеСоединение / FullJoin
------------------------------------------------
	**Синтаксис:** ПолноеСоединение(стрКолонкиЛевойИТ, ПраваяИТ, ИндексПравойИТ, стрКолонкиПравойИТ)

	**Параметры:**
		- **стрКолонкиЛевойИТ** - тип: Строка. Колонки, значения которых будут использованы для поиска строки в правой таблице.
		- **ПраваяИТ** - тип: ИндексированнаяТаблица. Присоединяемая таблица.
		- **ИндексПравойИТ** - тип: Строка, Число. Имя или номер индекса, по которому будут искаться строки в правой таблице.
		  Количество колонок индекса должно быть равно количеству колонок поиска (см. параметр *стрКолонкиЛевойИТ*).
		- **стрКолонкиПравойИТ** - тип: Строка. Список колонок, которые будут копироваться из правой таблицы в левую.
		  Список задаётся в формате "<ИмяКолИст>|<ИмяКолИст:ИмяКолНазн> [,...]". <ИмяКолИст> - имя колонки в правой таблице; 
		  если такой колонки нет в левой таблице, то она будет создана. <ИмяКолНазн> - если указана, то значение из колонки 
		  правой таблицы с названием <ИмяКолИст> будет скопировано в колонку левой таблицы <ИмяКолНазн>.

	**Описание:** Выполняет операцию, аналогичную команде SQL **Full Join**. Для каждой строки из левой таблицы (левой 
	таблицей является текущий объект) добавляются все строки из правой таблицы, соответствующие ключевому выражению.
	Ключевое выражение определяется параметром *стрКолонкиЛевойИТ*. Из правой таблицы в левую переносятся значения 
	колонок, указанных в параметре *стрКолонкиПравойИТ*. Если строка левой таблицы не найдена в правой, то значения 
	колонок левой таблицы **остаются неизменными**.
	Если строка правой таблицы отсутствует в левой, то она добавляется,
	при этом все колонки кроме указанных в параметре *стрКолонкиПравойИТ* заполняются пустыми значениями.

Объединить / Merge
------------------------------------------------
	**Синтаксис:** Объединить(ТЗ [, Индекс = ""] [, Колонки = ""])

	**Параметры:**
		- **ТЗ** - тип: ИндексированнаяТаблица, ТаблицаЗначений. Таблица, из которой будут
		  загружены данные.
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса в таблице - источнике. По умолчанию используется
		  основной индекс. Если ТЗ имеет тип ТаблицаЗначений, то этот параметр игнорируется.
		- **Колонки** - тип: Строка, Число. Список колонок через запятую или номер колонки в таблице - источнике.
		  Определяет список колонкок, которые будут участвовать в процессе объединения.
		  Если значение не задано или задана пустая строка, параметр игнорируется.

	**Описание:** добавляет строки из таблицы - источника в текущую таблицу.  Если в таблице - источнике
	есть колонки, которых нет в текущей, то они создаются. Объединени осуществляется с учётом
	индекса и фильтра таблицы - источника.

Пересечение / Conjunction
------------------------------------------------
	**Синтаксис:** Пересечение(ТЗ2, ИндексТекущейТЗ, ИндексТЗ2 [, флДобавлятьСтрокиТЗ2 = 1])

	**Параметры:**
		- **ТЗ2** - тип: ИндексированннаяТаблица. Таблица, с которой строится пересечение.
		- **ИндексТекущейТЗ** - тип: Строка, Число. Имя или номер индекса в текущей таблицы.
		- **ИндексВторойТЗ** - тип: Строка, Число. Имя или номер индекса в ТЗ2.
		- **флДобавлятьСтрокиТЗ2** - тип: Число. Флаг добавления строк ТЗ2 в  результат.

	**Описание:** пересечение двух таблиц по ключевым полям.  Результатом пересечения является
	таблица, в которой присутствуют строки текущей ТЗ,  которые есть в ТЗ2, и строки ТЗ2,
	которые есть в текущей ТЗ (с учетом флДобавлятьСтрокиТЗ2).  Совпадение строк определяется
	по индексам ИндексТекущейТЗ и  ИндексТЗ2.  Количество колонок в индексах должно быть одинаковым.

Разность / Difference
------------------------------------------------
	**Синтаксис:** Разность(ТЗ2, ИндексТекущейТЗ, ИндексТЗ2 [, флДобавлятьСтрокиТЗ2 = 1])

	**Параметры:**
		- **ТЗ2** - тип: ИндексированннаяТаблица. Таблица, с которой строится разность.
		- **ИндексТекущейТЗ** - тип: Строка, Число. Имя или номер индекса в текущей таблицы.
		- **ИндексВторойТЗ** - тип: Строка, Число. Имя или номер индекса в ТЗ2.
		- **флДобавлятьСтрокиТЗ2** - тип: Число. Флаг добавления строк ТЗ2 в результат.

	**Описание:** разность двух таблиц по ключевым полям.  Результатом является
	таблица, в которой присутствуют строки текущей ТЗ, которых нет в ТЗ2, и строки ТЗ2,
	которых нет в текущей ТЗ (с учетом флДобавлятьСтрокиТЗ2). Совпадение строк определяется
	по индексам ИндексТекущейТЗ и ИндексТЗ2.  Количество колонок в индексах должно быть одинаковым.

Копия / Copy
------------------------------------------------
	**Синтаксис:** Копия([чКопироватьИндексы = 0], [чКопироватьДанные = 1])

	**Параметры:**
		- **чКопироватьИндексы** - тип: Число. Если 1, то индексы и фильтры тоже будут скопированы.
		- **чКопироватьДанные** - тип: Число. Если 1, то данные будут скопированы;
		  если 0 - то копируется только структура.

	**Возвращает:** тип: ИндексированнаяТаблица. Переменная, являющаяся копией объекта.

	**Описание:** создаёт копию таблицы.

ВФайл / SaveToFile
------------------------------------------------
	**Синтаксис:** ВФайл(стрИмяФайла, [чФормат = 1], [Индекс = ""], [чСИменамиКолонок = 1])

	**Параметры:**
		- **стрИмяФайла** - тип: Строка. Имя файла, в который нужно записать таблицу. Если файл уже существует,
		  то он перезаписывается.
		- **чФормат** - тип: Число. Формат файла.  Может принимать следующие значения: 1 - запись значений во
		  внутреннем формате; 2 - запись значений во внешнем формате; 3 - csv файл со значениями во внутреннем
		  формате; 4 - csv файл со значениями во внешнем формате.
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. По умолчанию используется основной индекс.
		  Выгрузка в файл производится с учётом сортировки и фильтра (если есть) по указанному индексу.
		- **чСИменамиКолонок** - тип: Число. 1 - в первую строку файла будут записаны имена колонок.
		  Имеет смысл только для csv-файлов.

	**Описание:** записывает таблицу в файл.

ИзФайла / LoadFromFile
------------------------------------------------
	**Синтаксис:** ИзФайла(стрИмяФайла, [чФормат = 1], [чСИменамиКолонок = 1])

	**Параметры:**
		- **стрИмяФайла** - тип: Строка. Имя файла, из которого нужно считать таблицу.
		- **чФормат** - тип: Число. Формат файла.  Может принимать следующие значения: 1 - запись значений во
		  внутреннем формате; 2 - запись значений во внешнем формате; 3 - csv файл со значениями во внутреннем
		  формате; 4 - csv файл со значениями во внешнем формате.
		- **чСИменамиКолонок** - тип: Число. 1 - в первой строке файла хранятся имена колонок.
		  Имеет смысл только для csv-файлов. Если параметр = 0, то имена колонок образуются как __col__<НомерКолонки>.

	**Возвращает:** тип: Число. 1 - таблица считана успешно; 0 - ошибка при чтении.

	**Описание:** считывает таблицу из файла.

ВСтроку / SaveToString
------------------------------------------------
	**Синтаксис:** ВСтроку([чФормат = 1], [Индекс = ""])

	**Параметры:**
		- **чФормат** - тип: Число. 1 - запись значений во внутреннем формате; 0 - запись значений во внешнем формате.
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. По умолчанию используется основной индекс.
		  Выгрузка в файл производится с учётом сортировки и фильтра (если есть) по указанному индексу.

	**Возвращает:** тип: Строка. Строковое представление таблицы.

	**Описание:** Преобразует таблицу в строковое представление для сериализации.
	Полученная строка впоследствии может использоваться в методе ИзСтроки().

ИзСтроки / LoadFromString
------------------------------------------------
	**Синтаксис:** ИзСтроки(стрПредставление)

	**Параметры:**
		- **стрПредставление** - тип: Строка. Строковое представление таблицы.

	**Описание:** загружает таблицу из строкового представления.

ВыбратьСтроку / ChooseLine
------------------------------------------------
	**Синтаксис:** ВыбратьСтроку([Строка = 0], [стрЗаголовокОкна = ""], [чТаймаут = 0], [Индекс = ""])

	**Параметры:**
		- **Строка** - тип: любой. Переменная, куда помещается значение - номер выбранной строки.
		  При вызове метода здесь можно передавать значение начального номера строки.
		- **стрЗаголовокОкна** - тип: Строка. Заголовок окна выбора.
		- **чТаймаут** - тип: Число. Время ожидания системы (в секундах) на отклик пользователя.
		  Если не задано, то время ожидания бесконечно.
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. По умолчанию используется основной индекс.
		  В окне выбора строки появятся с учётом сортировки и фильтра (если есть) по указанному индексу.

	**Возвращает:** тип: Число. 1 - если выбор произведен (нажата кнопка 'ОК');
	0 - если выбор не произведен (нажата кнопка 'ОТМЕНА').

	**Описание:** Открывает окно для интерактивного выбора строки в таблице значений.
	Метод предназначен в основном для отладки.

Показать / Show
------------------------------------------------
	**Синтаксис:** Показать([Индекс = ""])

	**Параметры:**
		- **Индекс** - тип: Строка, Число. Идентификатор или номер индекса. По умолчанию используется основной индекс.
		  В окне выбора строки появятся с учётом сортировки и фильтра (если есть) по указанному индексу.

	**Возвращает:** тип: Число. 1 - если выбор произведен (нажата кнопка 'ОК');
	0 - если выбор не произведен (нажата кнопка 'ОТМЕНА').

	**Описание:** Открывает окно для интерактивного выбора строки в таблице значений.
	Метод предназначен в основном для отладки.
